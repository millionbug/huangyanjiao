{
  "entry": "serverRenderBlog.js",
  "files": {
    "serverRenderBlog.js": "module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\neval(\"let vue = __webpack_require__(1);\\nconsole.log(vue);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zZXJ2ZXIvcmVuZGVyL2Jsb2cuanM/NTE1ZSJdLCJuYW1lcyI6WyJ2dWUiLCJyZXF1aXJlIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUMsQ0FBUixDQUFWO0FBQ0FDLFFBQVFDLEdBQVIsQ0FBWUgsR0FBWiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IHZ1ZSA9IHJlcXVpcmUoJ3Z1ZScpXG5jb25zb2xlLmxvZyh2dWUpXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc2VydmVyL3JlbmRlci9ibG9nLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///0\\n\");\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\neval(\"Object.defineProperty(__webpack_exports__, \\\"__esModule\\\", { value: true });\\n/*!\\n * Vue.js v2.5.17\\n * (c) 2014-2018 Evan You\\n * Released under the MIT License.\\n */\\n/*  */\\n\\nvar emptyObject = Object.freeze({});\\n\\n// these helpers produces better vm code in JS engines due to their\\n// explicitness and function inlining\\nfunction isUndef(v) {\\n  return v === undefined || v === null;\\n}\\n\\nfunction isDef(v) {\\n  return v !== undefined && v !== null;\\n}\\n\\nfunction isTrue(v) {\\n  return v === true;\\n}\\n\\nfunction isFalse(v) {\\n  return v === false;\\n}\\n\\n/**\\n * Check if value is primitive\\n */\\nfunction isPrimitive(value) {\\n  return typeof value === 'string' || typeof value === 'number' ||\\n  // $flow-disable-line\\n  typeof value === 'symbol' || typeof value === 'boolean';\\n}\\n\\n/**\\n * Quick object check - this is primarily used to tell\\n * Objects from primitive values when we know the value\\n * is a JSON-compliant type.\\n */\\nfunction isObject(obj) {\\n  return obj !== null && typeof obj === 'object';\\n}\\n\\n/**\\n * Get the raw type string of a value e.g. [object Object]\\n */\\nvar _toString = Object.prototype.toString;\\n\\nfunction toRawType(value) {\\n  return _toString.call(value).slice(8, -1);\\n}\\n\\n/**\\n * Strict object type check. Only returns true\\n * for plain JavaScript objects.\\n */\\nfunction isPlainObject(obj) {\\n  return _toString.call(obj) === '[object Object]';\\n}\\n\\nfunction isRegExp(v) {\\n  return _toString.call(v) === '[object RegExp]';\\n}\\n\\n/**\\n * Check if val is a valid array index.\\n */\\nfunction isValidArrayIndex(val) {\\n  var n = parseFloat(String(val));\\n  return n >= 0 && Math.floor(n) === n && isFinite(val);\\n}\\n\\n/**\\n * Convert a value to a string that is actually rendered.\\n */\\nfunction toString(val) {\\n  return val == null ? '' : typeof val === 'object' ? JSON.stringify(val, null, 2) : String(val);\\n}\\n\\n/**\\n * Convert a input value to a number for persistence.\\n * If the conversion fails, return original string.\\n */\\nfunction toNumber(val) {\\n  var n = parseFloat(val);\\n  return isNaN(n) ? val : n;\\n}\\n\\n/**\\n * Make a map and return a function for checking if a key\\n * is in that map.\\n */\\nfunction makeMap(str, expectsLowerCase) {\\n  var map = Object.create(null);\\n  var list = str.split(',');\\n  for (var i = 0; i < list.length; i++) {\\n    map[list[i]] = true;\\n  }\\n  return expectsLowerCase ? function (val) {\\n    return map[val.toLowerCase()];\\n  } : function (val) {\\n    return map[val];\\n  };\\n}\\n\\n/**\\n * Check if a tag is a built-in tag.\\n */\\nvar isBuiltInTag = makeMap('slot,component', true);\\n\\n/**\\n * Check if a attribute is a reserved attribute.\\n */\\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\\n\\n/**\\n * Remove an item from an array\\n */\\nfunction remove(arr, item) {\\n  if (arr.length) {\\n    var index = arr.indexOf(item);\\n    if (index > -1) {\\n      return arr.splice(index, 1);\\n    }\\n  }\\n}\\n\\n/**\\n * Check whether the object has the property.\\n */\\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\\nfunction hasOwn(obj, key) {\\n  return hasOwnProperty.call(obj, key);\\n}\\n\\n/**\\n * Create a cached version of a pure function.\\n */\\nfunction cached(fn) {\\n  var cache = Object.create(null);\\n  return function cachedFn(str) {\\n    var hit = cache[str];\\n    return hit || (cache[str] = fn(str));\\n  };\\n}\\n\\n/**\\n * Camelize a hyphen-delimited string.\\n */\\nvar camelizeRE = /-(\\\\w)/g;\\nvar camelize = cached(function (str) {\\n  return str.replace(camelizeRE, function (_, c) {\\n    return c ? c.toUpperCase() : '';\\n  });\\n});\\n\\n/**\\n * Capitalize a string.\\n */\\nvar capitalize = cached(function (str) {\\n  return str.charAt(0).toUpperCase() + str.slice(1);\\n});\\n\\n/**\\n * Hyphenate a camelCase string.\\n */\\nvar hyphenateRE = /\\\\B([A-Z])/g;\\nvar hyphenate = cached(function (str) {\\n  return str.replace(hyphenateRE, '-$1').toLowerCase();\\n});\\n\\n/**\\n * Simple bind polyfill for environments that do not support it... e.g.\\n * PhantomJS 1.x. Technically we don't need this anymore since native bind is\\n * now more performant in most browsers, but removing it would be breaking for\\n * code that was able to run in PhantomJS 1.x, so this must be kept for\\n * backwards compatibility.\\n */\\n\\n/* istanbul ignore next */\\nfunction polyfillBind(fn, ctx) {\\n  function boundFn(a) {\\n    var l = arguments.length;\\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\\n  }\\n\\n  boundFn._length = fn.length;\\n  return boundFn;\\n}\\n\\nfunction nativeBind(fn, ctx) {\\n  return fn.bind(ctx);\\n}\\n\\nvar bind = Function.prototype.bind ? nativeBind : polyfillBind;\\n\\n/**\\n * Convert an Array-like object to a real Array.\\n */\\nfunction toArray(list, start) {\\n  start = start || 0;\\n  var i = list.length - start;\\n  var ret = new Array(i);\\n  while (i--) {\\n    ret[i] = list[i + start];\\n  }\\n  return ret;\\n}\\n\\n/**\\n * Mix properties into target object.\\n */\\nfunction extend(to, _from) {\\n  for (var key in _from) {\\n    to[key] = _from[key];\\n  }\\n  return to;\\n}\\n\\n/**\\n * Merge an Array of Objects into a single Object.\\n */\\nfunction toObject(arr) {\\n  var res = {};\\n  for (var i = 0; i < arr.length; i++) {\\n    if (arr[i]) {\\n      extend(res, arr[i]);\\n    }\\n  }\\n  return res;\\n}\\n\\n/**\\n * Perform no operation.\\n * Stubbing args to make Flow happy without leaving useless transpiled code\\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\\n */\\nfunction noop(a, b, c) {}\\n\\n/**\\n * Always return false.\\n */\\nvar no = function (a, b, c) {\\n  return false;\\n};\\n\\n/**\\n * Return same value\\n */\\nvar identity = function (_) {\\n  return _;\\n};\\n\\n/**\\n * Generate a static keys string from compiler modules.\\n */\\nfunction genStaticKeys(modules) {\\n  return modules.reduce(function (keys, m) {\\n    return keys.concat(m.staticKeys || []);\\n  }, []).join(',');\\n}\\n\\n/**\\n * Check if two values are loosely equal - that is,\\n * if they are plain objects, do they have the same shape?\\n */\\nfunction looseEqual(a, b) {\\n  if (a === b) {\\n    return true;\\n  }\\n  var isObjectA = isObject(a);\\n  var isObjectB = isObject(b);\\n  if (isObjectA && isObjectB) {\\n    try {\\n      var isArrayA = Array.isArray(a);\\n      var isArrayB = Array.isArray(b);\\n      if (isArrayA && isArrayB) {\\n        return a.length === b.length && a.every(function (e, i) {\\n          return looseEqual(e, b[i]);\\n        });\\n      } else if (!isArrayA && !isArrayB) {\\n        var keysA = Object.keys(a);\\n        var keysB = Object.keys(b);\\n        return keysA.length === keysB.length && keysA.every(function (key) {\\n          return looseEqual(a[key], b[key]);\\n        });\\n      } else {\\n        /* istanbul ignore next */\\n        return false;\\n      }\\n    } catch (e) {\\n      /* istanbul ignore next */\\n      return false;\\n    }\\n  } else if (!isObjectA && !isObjectB) {\\n    return String(a) === String(b);\\n  } else {\\n    return false;\\n  }\\n}\\n\\nfunction looseIndexOf(arr, val) {\\n  for (var i = 0; i < arr.length; i++) {\\n    if (looseEqual(arr[i], val)) {\\n      return i;\\n    }\\n  }\\n  return -1;\\n}\\n\\n/**\\n * Ensure a function is called only once.\\n */\\nfunction once(fn) {\\n  var called = false;\\n  return function () {\\n    if (!called) {\\n      called = true;\\n      fn.apply(this, arguments);\\n    }\\n  };\\n}\\n\\nvar SSR_ATTR = 'data-server-rendered';\\n\\nvar ASSET_TYPES = ['component', 'directive', 'filter'];\\n\\nvar LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured'];\\n\\n/*  */\\n\\nvar config = {\\n  /**\\n   * Option merge strategies (used in core/util/options)\\n   */\\n  // $flow-disable-line\\n  optionMergeStrategies: Object.create(null),\\n\\n  /**\\n   * Whether to suppress warnings.\\n   */\\n  silent: false,\\n\\n  /**\\n   * Show production mode tip message on boot?\\n   */\\n  productionTip: \\\"development\\\" !== 'production',\\n\\n  /**\\n   * Whether to enable devtools\\n   */\\n  devtools: \\\"development\\\" !== 'production',\\n\\n  /**\\n   * Whether to record perf\\n   */\\n  performance: false,\\n\\n  /**\\n   * Error handler for watcher errors\\n   */\\n  errorHandler: null,\\n\\n  /**\\n   * Warn handler for watcher warns\\n   */\\n  warnHandler: null,\\n\\n  /**\\n   * Ignore certain custom elements\\n   */\\n  ignoredElements: [],\\n\\n  /**\\n   * Custom user key aliases for v-on\\n   */\\n  // $flow-disable-line\\n  keyCodes: Object.create(null),\\n\\n  /**\\n   * Check if a tag is reserved so that it cannot be registered as a\\n   * component. This is platform-dependent and may be overwritten.\\n   */\\n  isReservedTag: no,\\n\\n  /**\\n   * Check if an attribute is reserved so that it cannot be used as a component\\n   * prop. This is platform-dependent and may be overwritten.\\n   */\\n  isReservedAttr: no,\\n\\n  /**\\n   * Check if a tag is an unknown element.\\n   * Platform-dependent.\\n   */\\n  isUnknownElement: no,\\n\\n  /**\\n   * Get the namespace of an element\\n   */\\n  getTagNamespace: noop,\\n\\n  /**\\n   * Parse the real tag name for the specific platform.\\n   */\\n  parsePlatformTagName: identity,\\n\\n  /**\\n   * Check if an attribute must be bound using property, e.g. value\\n   * Platform-dependent.\\n   */\\n  mustUseProp: no,\\n\\n  /**\\n   * Exposed for legacy reasons\\n   */\\n  _lifecycleHooks: LIFECYCLE_HOOKS\\n};\\n\\n/*  */\\n\\n/**\\n * Check if a string starts with $ or _\\n */\\nfunction isReserved(str) {\\n  var c = (str + '').charCodeAt(0);\\n  return c === 0x24 || c === 0x5F;\\n}\\n\\n/**\\n * Define a property.\\n */\\nfunction def(obj, key, val, enumerable) {\\n  Object.defineProperty(obj, key, {\\n    value: val,\\n    enumerable: !!enumerable,\\n    writable: true,\\n    configurable: true\\n  });\\n}\\n\\n/**\\n * Parse simple path.\\n */\\nvar bailRE = /[^\\\\w.$]/;\\nfunction parsePath(path) {\\n  if (bailRE.test(path)) {\\n    return;\\n  }\\n  var segments = path.split('.');\\n  return function (obj) {\\n    for (var i = 0; i < segments.length; i++) {\\n      if (!obj) {\\n        return;\\n      }\\n      obj = obj[segments[i]];\\n    }\\n    return obj;\\n  };\\n}\\n\\n/*  */\\n\\n// can we use __proto__?\\nvar hasProto = '__proto__' in {};\\n\\n// Browser environment sniffing\\nvar inBrowser = typeof window !== 'undefined';\\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\\nvar isIE = UA && /msie|trident/.test(UA);\\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\\nvar isEdge = UA && UA.indexOf('edge/') > 0;\\nvar isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';\\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';\\nvar isChrome = UA && /chrome\\\\/\\\\d+/.test(UA) && !isEdge;\\n\\n// Firefox has a \\\"watch\\\" function on Object.prototype...\\nvar nativeWatch = {}.watch;\\n\\nvar supportsPassive = false;\\nif (inBrowser) {\\n  try {\\n    var opts = {};\\n    Object.defineProperty(opts, 'passive', {\\n      get: function get() {\\n        /* istanbul ignore next */\\n        supportsPassive = true;\\n      }\\n    }); // https://github.com/facebook/flow/issues/285\\n    window.addEventListener('test-passive', null, opts);\\n  } catch (e) {}\\n}\\n\\n// this needs to be lazy-evaled because vue may be required before\\n// vue-server-renderer can set VUE_ENV\\nvar _isServer;\\nvar isServerRendering = function () {\\n  if (_isServer === undefined) {\\n    /* istanbul ignore if */\\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\\n      // detect presence of vue-server-renderer and avoid\\n      // Webpack shimming the process\\n      _isServer = global['process'].env.VUE_ENV === 'server';\\n    } else {\\n      _isServer = false;\\n    }\\n  }\\n  return _isServer;\\n};\\n\\n// detect devtools\\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\\n\\n/* istanbul ignore next */\\nfunction isNative(Ctor) {\\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());\\n}\\n\\nvar hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\\n\\nvar _Set;\\n/* istanbul ignore if */ // $flow-disable-line\\nif (typeof Set !== 'undefined' && isNative(Set)) {\\n  // use native Set when available.\\n  _Set = Set;\\n} else {\\n  // a non-standard Set polyfill that only works with primitive keys.\\n  _Set = function () {\\n    function Set() {\\n      this.set = Object.create(null);\\n    }\\n    Set.prototype.has = function has(key) {\\n      return this.set[key] === true;\\n    };\\n    Set.prototype.add = function add(key) {\\n      this.set[key] = true;\\n    };\\n    Set.prototype.clear = function clear() {\\n      this.set = Object.create(null);\\n    };\\n\\n    return Set;\\n  }();\\n}\\n\\n/*  */\\n\\nvar warn = noop;\\nvar tip = noop;\\nvar generateComponentTrace = noop; // work around flow check\\nvar formatComponentName = noop;\\n\\nif (true) {\\n  var hasConsole = typeof console !== 'undefined';\\n  var classifyRE = /(?:^|[-_])(\\\\w)/g;\\n  var classify = function (str) {\\n    return str.replace(classifyRE, function (c) {\\n      return c.toUpperCase();\\n    }).replace(/[-_]/g, '');\\n  };\\n\\n  warn = function (msg, vm) {\\n    var trace = vm ? generateComponentTrace(vm) : '';\\n\\n    if (config.warnHandler) {\\n      config.warnHandler.call(null, msg, vm, trace);\\n    } else if (hasConsole && !config.silent) {\\n      console.error(\\\"[Vue warn]: \\\" + msg + trace);\\n    }\\n  };\\n\\n  tip = function (msg, vm) {\\n    if (hasConsole && !config.silent) {\\n      console.warn(\\\"[Vue tip]: \\\" + msg + (vm ? generateComponentTrace(vm) : ''));\\n    }\\n  };\\n\\n  formatComponentName = function (vm, includeFile) {\\n    if (vm.$root === vm) {\\n      return '<Root>';\\n    }\\n    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};\\n    var name = options.name || options._componentTag;\\n    var file = options.__file;\\n    if (!name && file) {\\n      var match = file.match(/([^/\\\\\\\\]+)\\\\.vue$/);\\n      name = match && match[1];\\n    }\\n\\n    return (name ? \\\"<\\\" + classify(name) + \\\">\\\" : \\\"<Anonymous>\\\") + (file && includeFile !== false ? \\\" at \\\" + file : '');\\n  };\\n\\n  var repeat = function (str, n) {\\n    var res = '';\\n    while (n) {\\n      if (n % 2 === 1) {\\n        res += str;\\n      }\\n      if (n > 1) {\\n        str += str;\\n      }\\n      n >>= 1;\\n    }\\n    return res;\\n  };\\n\\n  generateComponentTrace = function (vm) {\\n    if (vm._isVue && vm.$parent) {\\n      var tree = [];\\n      var currentRecursiveSequence = 0;\\n      while (vm) {\\n        if (tree.length > 0) {\\n          var last = tree[tree.length - 1];\\n          if (last.constructor === vm.constructor) {\\n            currentRecursiveSequence++;\\n            vm = vm.$parent;\\n            continue;\\n          } else if (currentRecursiveSequence > 0) {\\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\\n            currentRecursiveSequence = 0;\\n          }\\n        }\\n        tree.push(vm);\\n        vm = vm.$parent;\\n      }\\n      return '\\\\n\\\\nfound in\\\\n\\\\n' + tree.map(function (vm, i) {\\n        return \\\"\\\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + \\\"... (\\\" + vm[1] + \\\" recursive calls)\\\" : formatComponentName(vm));\\n      }).join('\\\\n');\\n    } else {\\n      return \\\"\\\\n\\\\n(found in \\\" + formatComponentName(vm) + \\\")\\\";\\n    }\\n  };\\n}\\n\\n/*  */\\n\\nvar uid = 0;\\n\\n/**\\n * A dep is an observable that can have multiple\\n * directives subscribing to it.\\n */\\nvar Dep = function Dep() {\\n  this.id = uid++;\\n  this.subs = [];\\n};\\n\\nDep.prototype.addSub = function addSub(sub) {\\n  this.subs.push(sub);\\n};\\n\\nDep.prototype.removeSub = function removeSub(sub) {\\n  remove(this.subs, sub);\\n};\\n\\nDep.prototype.depend = function depend() {\\n  if (Dep.target) {\\n    Dep.target.addDep(this);\\n  }\\n};\\n\\nDep.prototype.notify = function notify() {\\n  // stabilize the subscriber list first\\n  var subs = this.subs.slice();\\n  for (var i = 0, l = subs.length; i < l; i++) {\\n    subs[i].update();\\n  }\\n};\\n\\n// the current target watcher being evaluated.\\n// this is globally unique because there could be only one\\n// watcher being evaluated at any time.\\nDep.target = null;\\nvar targetStack = [];\\n\\nfunction pushTarget(_target) {\\n  if (Dep.target) {\\n    targetStack.push(Dep.target);\\n  }\\n  Dep.target = _target;\\n}\\n\\nfunction popTarget() {\\n  Dep.target = targetStack.pop();\\n}\\n\\n/*  */\\n\\nvar VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {\\n  this.tag = tag;\\n  this.data = data;\\n  this.children = children;\\n  this.text = text;\\n  this.elm = elm;\\n  this.ns = undefined;\\n  this.context = context;\\n  this.fnContext = undefined;\\n  this.fnOptions = undefined;\\n  this.fnScopeId = undefined;\\n  this.key = data && data.key;\\n  this.componentOptions = componentOptions;\\n  this.componentInstance = undefined;\\n  this.parent = undefined;\\n  this.raw = false;\\n  this.isStatic = false;\\n  this.isRootInsert = true;\\n  this.isComment = false;\\n  this.isCloned = false;\\n  this.isOnce = false;\\n  this.asyncFactory = asyncFactory;\\n  this.asyncMeta = undefined;\\n  this.isAsyncPlaceholder = false;\\n};\\n\\nvar prototypeAccessors = { child: { configurable: true } };\\n\\n// DEPRECATED: alias for componentInstance for backwards compat.\\n/* istanbul ignore next */\\nprototypeAccessors.child.get = function () {\\n  return this.componentInstance;\\n};\\n\\nObject.defineProperties(VNode.prototype, prototypeAccessors);\\n\\nvar createEmptyVNode = function (text) {\\n  if (text === void 0) text = '';\\n\\n  var node = new VNode();\\n  node.text = text;\\n  node.isComment = true;\\n  return node;\\n};\\n\\nfunction createTextVNode(val) {\\n  return new VNode(undefined, undefined, undefined, String(val));\\n}\\n\\n// optimized shallow clone\\n// used for static nodes and slot nodes because they may be reused across\\n// multiple renders, cloning them avoids errors when DOM manipulations rely\\n// on their elm reference.\\nfunction cloneVNode(vnode) {\\n  var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);\\n  cloned.ns = vnode.ns;\\n  cloned.isStatic = vnode.isStatic;\\n  cloned.key = vnode.key;\\n  cloned.isComment = vnode.isComment;\\n  cloned.fnContext = vnode.fnContext;\\n  cloned.fnOptions = vnode.fnOptions;\\n  cloned.fnScopeId = vnode.fnScopeId;\\n  cloned.isCloned = true;\\n  return cloned;\\n}\\n\\n/*\\n * not type checking this file because flow doesn't play well with\\n * dynamically accessing methods on Array prototype\\n */\\n\\nvar arrayProto = Array.prototype;\\nvar arrayMethods = Object.create(arrayProto);\\n\\nvar methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];\\n\\n/**\\n * Intercept mutating methods and emit events\\n */\\nmethodsToPatch.forEach(function (method) {\\n  // cache original method\\n  var original = arrayProto[method];\\n  def(arrayMethods, method, function mutator() {\\n    var args = [],\\n        len = arguments.length;\\n    while (len--) args[len] = arguments[len];\\n\\n    var result = original.apply(this, args);\\n    var ob = this.__ob__;\\n    var inserted;\\n    switch (method) {\\n      case 'push':\\n      case 'unshift':\\n        inserted = args;\\n        break;\\n      case 'splice':\\n        inserted = args.slice(2);\\n        break;\\n    }\\n    if (inserted) {\\n      ob.observeArray(inserted);\\n    }\\n    // notify change\\n    ob.dep.notify();\\n    return result;\\n  });\\n});\\n\\n/*  */\\n\\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\\n\\n/**\\n * In some cases we may want to disable observation inside a component's\\n * update computation.\\n */\\nvar shouldObserve = true;\\n\\nfunction toggleObserving(value) {\\n  shouldObserve = value;\\n}\\n\\n/**\\n * Observer class that is attached to each observed\\n * object. Once attached, the observer converts the target\\n * object's property keys into getter/setters that\\n * collect dependencies and dispatch updates.\\n */\\nvar Observer = function Observer(value) {\\n  this.value = value;\\n  this.dep = new Dep();\\n  this.vmCount = 0;\\n  def(value, '__ob__', this);\\n  if (Array.isArray(value)) {\\n    var augment = hasProto ? protoAugment : copyAugment;\\n    augment(value, arrayMethods, arrayKeys);\\n    this.observeArray(value);\\n  } else {\\n    this.walk(value);\\n  }\\n};\\n\\n/**\\n * Walk through each property and convert them into\\n * getter/setters. This method should only be called when\\n * value type is Object.\\n */\\nObserver.prototype.walk = function walk(obj) {\\n  var keys = Object.keys(obj);\\n  for (var i = 0; i < keys.length; i++) {\\n    defineReactive(obj, keys[i]);\\n  }\\n};\\n\\n/**\\n * Observe a list of Array items.\\n */\\nObserver.prototype.observeArray = function observeArray(items) {\\n  for (var i = 0, l = items.length; i < l; i++) {\\n    observe(items[i]);\\n  }\\n};\\n\\n// helpers\\n\\n/**\\n * Augment an target Object or Array by intercepting\\n * the prototype chain using __proto__\\n */\\nfunction protoAugment(target, src, keys) {\\n  /* eslint-disable no-proto */\\n  target.__proto__ = src;\\n  /* eslint-enable no-proto */\\n}\\n\\n/**\\n * Augment an target Object or Array by defining\\n * hidden properties.\\n */\\n/* istanbul ignore next */\\nfunction copyAugment(target, src, keys) {\\n  for (var i = 0, l = keys.length; i < l; i++) {\\n    var key = keys[i];\\n    def(target, key, src[key]);\\n  }\\n}\\n\\n/**\\n * Attempt to create an observer instance for a value,\\n * returns the new observer if successfully observed,\\n * or the existing observer if the value already has one.\\n */\\nfunction observe(value, asRootData) {\\n  if (!isObject(value) || value instanceof VNode) {\\n    return;\\n  }\\n  var ob;\\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\\n    ob = value.__ob__;\\n  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\\n    ob = new Observer(value);\\n  }\\n  if (asRootData && ob) {\\n    ob.vmCount++;\\n  }\\n  return ob;\\n}\\n\\n/**\\n * Define a reactive property on an Object.\\n */\\nfunction defineReactive(obj, key, val, customSetter, shallow) {\\n  var dep = new Dep();\\n\\n  var property = Object.getOwnPropertyDescriptor(obj, key);\\n  if (property && property.configurable === false) {\\n    return;\\n  }\\n\\n  // cater for pre-defined getter/setters\\n  var getter = property && property.get;\\n  if (!getter && arguments.length === 2) {\\n    val = obj[key];\\n  }\\n  var setter = property && property.set;\\n\\n  var childOb = !shallow && observe(val);\\n  Object.defineProperty(obj, key, {\\n    enumerable: true,\\n    configurable: true,\\n    get: function reactiveGetter() {\\n      var value = getter ? getter.call(obj) : val;\\n      if (Dep.target) {\\n        dep.depend();\\n        if (childOb) {\\n          childOb.dep.depend();\\n          if (Array.isArray(value)) {\\n            dependArray(value);\\n          }\\n        }\\n      }\\n      return value;\\n    },\\n    set: function reactiveSetter(newVal) {\\n      var value = getter ? getter.call(obj) : val;\\n      /* eslint-disable no-self-compare */\\n      if (newVal === value || newVal !== newVal && value !== value) {\\n        return;\\n      }\\n      /* eslint-enable no-self-compare */\\n      if (\\\"development\\\" !== 'production' && customSetter) {\\n        customSetter();\\n      }\\n      if (setter) {\\n        setter.call(obj, newVal);\\n      } else {\\n        val = newVal;\\n      }\\n      childOb = !shallow && observe(newVal);\\n      dep.notify();\\n    }\\n  });\\n}\\n\\n/**\\n * Set a property on an object. Adds the new property and\\n * triggers change notification if the property doesn't\\n * already exist.\\n */\\nfunction set(target, key, val) {\\n  if (\\\"development\\\" !== 'production' && (isUndef(target) || isPrimitive(target))) {\\n    warn(\\\"Cannot set reactive property on undefined, null, or primitive value: \\\" + target);\\n  }\\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\\n    target.length = Math.max(target.length, key);\\n    target.splice(key, 1, val);\\n    return val;\\n  }\\n  if (key in target && !(key in Object.prototype)) {\\n    target[key] = val;\\n    return val;\\n  }\\n  var ob = target.__ob__;\\n  if (target._isVue || ob && ob.vmCount) {\\n    \\\"development\\\" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');\\n    return val;\\n  }\\n  if (!ob) {\\n    target[key] = val;\\n    return val;\\n  }\\n  defineReactive(ob.value, key, val);\\n  ob.dep.notify();\\n  return val;\\n}\\n\\n/**\\n * Delete a property and trigger change if necessary.\\n */\\nfunction del(target, key) {\\n  if (\\\"development\\\" !== 'production' && (isUndef(target) || isPrimitive(target))) {\\n    warn(\\\"Cannot delete reactive property on undefined, null, or primitive value: \\\" + target);\\n  }\\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\\n    target.splice(key, 1);\\n    return;\\n  }\\n  var ob = target.__ob__;\\n  if (target._isVue || ob && ob.vmCount) {\\n    \\\"development\\\" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');\\n    return;\\n  }\\n  if (!hasOwn(target, key)) {\\n    return;\\n  }\\n  delete target[key];\\n  if (!ob) {\\n    return;\\n  }\\n  ob.dep.notify();\\n}\\n\\n/**\\n * Collect dependencies on array elements when the array is touched, since\\n * we cannot intercept array element access like property getters.\\n */\\nfunction dependArray(value) {\\n  for (var e = void 0, i = 0, l = value.length; i < l; i++) {\\n    e = value[i];\\n    e && e.__ob__ && e.__ob__.dep.depend();\\n    if (Array.isArray(e)) {\\n      dependArray(e);\\n    }\\n  }\\n}\\n\\n/*  */\\n\\n/**\\n * Option overwriting strategies are functions that handle\\n * how to merge a parent option value and a child option\\n * value into the final value.\\n */\\nvar strats = config.optionMergeStrategies;\\n\\n/**\\n * Options with restrictions\\n */\\nif (true) {\\n  strats.el = strats.propsData = function (parent, child, vm, key) {\\n    if (!vm) {\\n      warn(\\\"option \\\\\\\"\\\" + key + \\\"\\\\\\\" can only be used during instance \\\" + 'creation with the `new` keyword.');\\n    }\\n    return defaultStrat(parent, child);\\n  };\\n}\\n\\n/**\\n * Helper that recursively merges two data objects together.\\n */\\nfunction mergeData(to, from) {\\n  if (!from) {\\n    return to;\\n  }\\n  var key, toVal, fromVal;\\n  var keys = Object.keys(from);\\n  for (var i = 0; i < keys.length; i++) {\\n    key = keys[i];\\n    toVal = to[key];\\n    fromVal = from[key];\\n    if (!hasOwn(to, key)) {\\n      set(to, key, fromVal);\\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\\n      mergeData(toVal, fromVal);\\n    }\\n  }\\n  return to;\\n}\\n\\n/**\\n * Data\\n */\\nfunction mergeDataOrFn(parentVal, childVal, vm) {\\n  if (!vm) {\\n    // in a Vue.extend merge, both should be functions\\n    if (!childVal) {\\n      return parentVal;\\n    }\\n    if (!parentVal) {\\n      return childVal;\\n    }\\n    // when parentVal & childVal are both present,\\n    // we need to return a function that returns the\\n    // merged result of both functions... no need to\\n    // check if parentVal is a function here because\\n    // it has to be a function to pass previous merges.\\n    return function mergedDataFn() {\\n      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);\\n    };\\n  } else {\\n    return function mergedInstanceDataFn() {\\n      // instance merge\\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;\\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;\\n      if (instanceData) {\\n        return mergeData(instanceData, defaultData);\\n      } else {\\n        return defaultData;\\n      }\\n    };\\n  }\\n}\\n\\nstrats.data = function (parentVal, childVal, vm) {\\n  if (!vm) {\\n    if (childVal && typeof childVal !== 'function') {\\n      \\\"development\\\" !== 'production' && warn('The \\\"data\\\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\\n\\n      return parentVal;\\n    }\\n    return mergeDataOrFn(parentVal, childVal);\\n  }\\n\\n  return mergeDataOrFn(parentVal, childVal, vm);\\n};\\n\\n/**\\n * Hooks and props are merged as arrays.\\n */\\nfunction mergeHook(parentVal, childVal) {\\n  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;\\n}\\n\\nLIFECYCLE_HOOKS.forEach(function (hook) {\\n  strats[hook] = mergeHook;\\n});\\n\\n/**\\n * Assets\\n *\\n * When a vm is present (instance creation), we need to do\\n * a three-way merge between constructor options, instance\\n * options and parent options.\\n */\\nfunction mergeAssets(parentVal, childVal, vm, key) {\\n  var res = Object.create(parentVal || null);\\n  if (childVal) {\\n    \\\"development\\\" !== 'production' && assertObjectType(key, childVal, vm);\\n    return extend(res, childVal);\\n  } else {\\n    return res;\\n  }\\n}\\n\\nASSET_TYPES.forEach(function (type) {\\n  strats[type + 's'] = mergeAssets;\\n});\\n\\n/**\\n * Watchers.\\n *\\n * Watchers hashes should not overwrite one\\n * another, so we merge them as arrays.\\n */\\nstrats.watch = function (parentVal, childVal, vm, key) {\\n  // work around Firefox's Object.prototype.watch...\\n  if (parentVal === nativeWatch) {\\n    parentVal = undefined;\\n  }\\n  if (childVal === nativeWatch) {\\n    childVal = undefined;\\n  }\\n  /* istanbul ignore if */\\n  if (!childVal) {\\n    return Object.create(parentVal || null);\\n  }\\n  if (true) {\\n    assertObjectType(key, childVal, vm);\\n  }\\n  if (!parentVal) {\\n    return childVal;\\n  }\\n  var ret = {};\\n  extend(ret, parentVal);\\n  for (var key$1 in childVal) {\\n    var parent = ret[key$1];\\n    var child = childVal[key$1];\\n    if (parent && !Array.isArray(parent)) {\\n      parent = [parent];\\n    }\\n    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];\\n  }\\n  return ret;\\n};\\n\\n/**\\n * Other object hashes.\\n */\\nstrats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {\\n  if (childVal && \\\"development\\\" !== 'production') {\\n    assertObjectType(key, childVal, vm);\\n  }\\n  if (!parentVal) {\\n    return childVal;\\n  }\\n  var ret = Object.create(null);\\n  extend(ret, parentVal);\\n  if (childVal) {\\n    extend(ret, childVal);\\n  }\\n  return ret;\\n};\\nstrats.provide = mergeDataOrFn;\\n\\n/**\\n * Default strategy.\\n */\\nvar defaultStrat = function (parentVal, childVal) {\\n  return childVal === undefined ? parentVal : childVal;\\n};\\n\\n/**\\n * Validate component names\\n */\\nfunction checkComponents(options) {\\n  for (var key in options.components) {\\n    validateComponentName(key);\\n  }\\n}\\n\\nfunction validateComponentName(name) {\\n  if (!/^[a-zA-Z][\\\\w-]*$/.test(name)) {\\n    warn('Invalid component name: \\\"' + name + '\\\". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');\\n  }\\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\\n    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);\\n  }\\n}\\n\\n/**\\n * Ensure all props option syntax are normalized into the\\n * Object-based format.\\n */\\nfunction normalizeProps(options, vm) {\\n  var props = options.props;\\n  if (!props) {\\n    return;\\n  }\\n  var res = {};\\n  var i, val, name;\\n  if (Array.isArray(props)) {\\n    i = props.length;\\n    while (i--) {\\n      val = props[i];\\n      if (typeof val === 'string') {\\n        name = camelize(val);\\n        res[name] = { type: null };\\n      } else if (true) {\\n        warn('props must be strings when using array syntax.');\\n      }\\n    }\\n  } else if (isPlainObject(props)) {\\n    for (var key in props) {\\n      val = props[key];\\n      name = camelize(key);\\n      res[name] = isPlainObject(val) ? val : { type: val };\\n    }\\n  } else if (true) {\\n    warn(\\\"Invalid value for option \\\\\\\"props\\\\\\\": expected an Array or an Object, \\\" + \\\"but got \\\" + toRawType(props) + \\\".\\\", vm);\\n  }\\n  options.props = res;\\n}\\n\\n/**\\n * Normalize all injections into Object-based format\\n */\\nfunction normalizeInject(options, vm) {\\n  var inject = options.inject;\\n  if (!inject) {\\n    return;\\n  }\\n  var normalized = options.inject = {};\\n  if (Array.isArray(inject)) {\\n    for (var i = 0; i < inject.length; i++) {\\n      normalized[inject[i]] = { from: inject[i] };\\n    }\\n  } else if (isPlainObject(inject)) {\\n    for (var key in inject) {\\n      var val = inject[key];\\n      normalized[key] = isPlainObject(val) ? extend({ from: key }, val) : { from: val };\\n    }\\n  } else if (true) {\\n    warn(\\\"Invalid value for option \\\\\\\"inject\\\\\\\": expected an Array or an Object, \\\" + \\\"but got \\\" + toRawType(inject) + \\\".\\\", vm);\\n  }\\n}\\n\\n/**\\n * Normalize raw function directives into object format.\\n */\\nfunction normalizeDirectives(options) {\\n  var dirs = options.directives;\\n  if (dirs) {\\n    for (var key in dirs) {\\n      var def = dirs[key];\\n      if (typeof def === 'function') {\\n        dirs[key] = { bind: def, update: def };\\n      }\\n    }\\n  }\\n}\\n\\nfunction assertObjectType(name, value, vm) {\\n  if (!isPlainObject(value)) {\\n    warn(\\\"Invalid value for option \\\\\\\"\\\" + name + \\\"\\\\\\\": expected an Object, \\\" + \\\"but got \\\" + toRawType(value) + \\\".\\\", vm);\\n  }\\n}\\n\\n/**\\n * Merge two option objects into a new one.\\n * Core utility used in both instantiation and inheritance.\\n */\\nfunction mergeOptions(parent, child, vm) {\\n  if (true) {\\n    checkComponents(child);\\n  }\\n\\n  if (typeof child === 'function') {\\n    child = child.options;\\n  }\\n\\n  normalizeProps(child, vm);\\n  normalizeInject(child, vm);\\n  normalizeDirectives(child);\\n  var extendsFrom = child.extends;\\n  if (extendsFrom) {\\n    parent = mergeOptions(parent, extendsFrom, vm);\\n  }\\n  if (child.mixins) {\\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\\n      parent = mergeOptions(parent, child.mixins[i], vm);\\n    }\\n  }\\n  var options = {};\\n  var key;\\n  for (key in parent) {\\n    mergeField(key);\\n  }\\n  for (key in child) {\\n    if (!hasOwn(parent, key)) {\\n      mergeField(key);\\n    }\\n  }\\n  function mergeField(key) {\\n    var strat = strats[key] || defaultStrat;\\n    options[key] = strat(parent[key], child[key], vm, key);\\n  }\\n  return options;\\n}\\n\\n/**\\n * Resolve an asset.\\n * This function is used because child instances need access\\n * to assets defined in its ancestor chain.\\n */\\nfunction resolveAsset(options, type, id, warnMissing) {\\n  /* istanbul ignore if */\\n  if (typeof id !== 'string') {\\n    return;\\n  }\\n  var assets = options[type];\\n  // check local registration variations first\\n  if (hasOwn(assets, id)) {\\n    return assets[id];\\n  }\\n  var camelizedId = camelize(id);\\n  if (hasOwn(assets, camelizedId)) {\\n    return assets[camelizedId];\\n  }\\n  var PascalCaseId = capitalize(camelizedId);\\n  if (hasOwn(assets, PascalCaseId)) {\\n    return assets[PascalCaseId];\\n  }\\n  // fallback to prototype chain\\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\\n  if (\\\"development\\\" !== 'production' && warnMissing && !res) {\\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\\n  }\\n  return res;\\n}\\n\\n/*  */\\n\\nfunction validateProp(key, propOptions, propsData, vm) {\\n  var prop = propOptions[key];\\n  var absent = !hasOwn(propsData, key);\\n  var value = propsData[key];\\n  // boolean casting\\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\\n  if (booleanIndex > -1) {\\n    if (absent && !hasOwn(prop, 'default')) {\\n      value = false;\\n    } else if (value === '' || value === hyphenate(key)) {\\n      // only cast empty string / same name to boolean if\\n      // boolean has higher priority\\n      var stringIndex = getTypeIndex(String, prop.type);\\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\\n        value = true;\\n      }\\n    }\\n  }\\n  // check default value\\n  if (value === undefined) {\\n    value = getPropDefaultValue(vm, prop, key);\\n    // since the default value is a fresh copy,\\n    // make sure to observe it.\\n    var prevShouldObserve = shouldObserve;\\n    toggleObserving(true);\\n    observe(value);\\n    toggleObserving(prevShouldObserve);\\n  }\\n  if (true) {\\n    assertProp(prop, key, value, vm, absent);\\n  }\\n  return value;\\n}\\n\\n/**\\n * Get the default value of a prop.\\n */\\nfunction getPropDefaultValue(vm, prop, key) {\\n  // no default, return undefined\\n  if (!hasOwn(prop, 'default')) {\\n    return undefined;\\n  }\\n  var def = prop.default;\\n  // warn against non-factory defaults for Object & Array\\n  if (\\\"development\\\" !== 'production' && isObject(def)) {\\n    warn('Invalid default value for prop \\\"' + key + '\\\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\\n  }\\n  // the raw prop value was also undefined from previous render,\\n  // return previous default value to avoid unnecessary watcher trigger\\n  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {\\n    return vm._props[key];\\n  }\\n  // call factory function for non-Function types\\n  // a value is Function if its prototype is function even across different execution context\\n  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;\\n}\\n\\n/**\\n * Assert whether a prop is valid.\\n */\\nfunction assertProp(prop, name, value, vm, absent) {\\n  if (prop.required && absent) {\\n    warn('Missing required prop: \\\"' + name + '\\\"', vm);\\n    return;\\n  }\\n  if (value == null && !prop.required) {\\n    return;\\n  }\\n  var type = prop.type;\\n  var valid = !type || type === true;\\n  var expectedTypes = [];\\n  if (type) {\\n    if (!Array.isArray(type)) {\\n      type = [type];\\n    }\\n    for (var i = 0; i < type.length && !valid; i++) {\\n      var assertedType = assertType(value, type[i]);\\n      expectedTypes.push(assertedType.expectedType || '');\\n      valid = assertedType.valid;\\n    }\\n  }\\n  if (!valid) {\\n    warn(\\\"Invalid prop: type check failed for prop \\\\\\\"\\\" + name + \\\"\\\\\\\".\\\" + \\\" Expected \\\" + expectedTypes.map(capitalize).join(', ') + \\\", got \\\" + toRawType(value) + \\\".\\\", vm);\\n    return;\\n  }\\n  var validator = prop.validator;\\n  if (validator) {\\n    if (!validator(value)) {\\n      warn('Invalid prop: custom validator check failed for prop \\\"' + name + '\\\".', vm);\\n    }\\n  }\\n}\\n\\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\\n\\nfunction assertType(value, type) {\\n  var valid;\\n  var expectedType = getType(type);\\n  if (simpleCheckRE.test(expectedType)) {\\n    var t = typeof value;\\n    valid = t === expectedType.toLowerCase();\\n    // for primitive wrapper objects\\n    if (!valid && t === 'object') {\\n      valid = value instanceof type;\\n    }\\n  } else if (expectedType === 'Object') {\\n    valid = isPlainObject(value);\\n  } else if (expectedType === 'Array') {\\n    valid = Array.isArray(value);\\n  } else {\\n    valid = value instanceof type;\\n  }\\n  return {\\n    valid: valid,\\n    expectedType: expectedType\\n  };\\n}\\n\\n/**\\n * Use function string name to check built-in types,\\n * because a simple equality check will fail when running\\n * across different vms / iframes.\\n */\\nfunction getType(fn) {\\n  var match = fn && fn.toString().match(/^\\\\s*function (\\\\w+)/);\\n  return match ? match[1] : '';\\n}\\n\\nfunction isSameType(a, b) {\\n  return getType(a) === getType(b);\\n}\\n\\nfunction getTypeIndex(type, expectedTypes) {\\n  if (!Array.isArray(expectedTypes)) {\\n    return isSameType(expectedTypes, type) ? 0 : -1;\\n  }\\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\\n    if (isSameType(expectedTypes[i], type)) {\\n      return i;\\n    }\\n  }\\n  return -1;\\n}\\n\\n/*  */\\n\\nfunction handleError(err, vm, info) {\\n  if (vm) {\\n    var cur = vm;\\n    while (cur = cur.$parent) {\\n      var hooks = cur.$options.errorCaptured;\\n      if (hooks) {\\n        for (var i = 0; i < hooks.length; i++) {\\n          try {\\n            var capture = hooks[i].call(cur, err, vm, info) === false;\\n            if (capture) {\\n              return;\\n            }\\n          } catch (e) {\\n            globalHandleError(e, cur, 'errorCaptured hook');\\n          }\\n        }\\n      }\\n    }\\n  }\\n  globalHandleError(err, vm, info);\\n}\\n\\nfunction globalHandleError(err, vm, info) {\\n  if (config.errorHandler) {\\n    try {\\n      return config.errorHandler.call(null, err, vm, info);\\n    } catch (e) {\\n      logError(e, null, 'config.errorHandler');\\n    }\\n  }\\n  logError(err, vm, info);\\n}\\n\\nfunction logError(err, vm, info) {\\n  if (true) {\\n    warn(\\\"Error in \\\" + info + \\\": \\\\\\\"\\\" + err.toString() + \\\"\\\\\\\"\\\", vm);\\n  }\\n  /* istanbul ignore else */\\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\\n    console.error(err);\\n  } else {\\n    throw err;\\n  }\\n}\\n\\n/*  */\\n/* globals MessageChannel */\\n\\nvar callbacks = [];\\nvar pending = false;\\n\\nfunction flushCallbacks() {\\n  pending = false;\\n  var copies = callbacks.slice(0);\\n  callbacks.length = 0;\\n  for (var i = 0; i < copies.length; i++) {\\n    copies[i]();\\n  }\\n}\\n\\n// Here we have async deferring wrappers using both microtasks and (macro) tasks.\\n// In < 2.4 we used microtasks everywhere, but there are some scenarios where\\n// microtasks have too high a priority and fire in between supposedly\\n// sequential events (e.g. #4521, #6690) or even between bubbling of the same\\n// event (#6566). However, using (macro) tasks everywhere also has subtle problems\\n// when state is changed right before repaint (e.g. #6813, out-in transitions).\\n// Here we use microtask by default, but expose a way to force (macro) task when\\n// needed (e.g. in event handlers attached by v-on).\\nvar microTimerFunc;\\nvar macroTimerFunc;\\nvar useMacroTask = false;\\n\\n// Determine (macro) task defer implementation.\\n// Technically setImmediate should be the ideal choice, but it's only available\\n// in IE. The only polyfill that consistently queues the callback after all DOM\\n// events triggered in the same loop is by using MessageChannel.\\n/* istanbul ignore if */\\nif (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\\n  macroTimerFunc = function () {\\n    setImmediate(flushCallbacks);\\n  };\\n} else if (typeof MessageChannel !== 'undefined' && (isNative(MessageChannel) ||\\n// PhantomJS\\nMessageChannel.toString() === '[object MessageChannelConstructor]')) {\\n  var channel = new MessageChannel();\\n  var port = channel.port2;\\n  channel.port1.onmessage = flushCallbacks;\\n  macroTimerFunc = function () {\\n    port.postMessage(1);\\n  };\\n} else {\\n  /* istanbul ignore next */\\n  macroTimerFunc = function () {\\n    setTimeout(flushCallbacks, 0);\\n  };\\n}\\n\\n// Determine microtask defer implementation.\\n/* istanbul ignore next, $flow-disable-line */\\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\\n  var p = Promise.resolve();\\n  microTimerFunc = function () {\\n    p.then(flushCallbacks);\\n    // in problematic UIWebViews, Promise.then doesn't completely break, but\\n    // it can get stuck in a weird state where callbacks are pushed into the\\n    // microtask queue but the queue isn't being flushed, until the browser\\n    // needs to do some other work, e.g. handle a timer. Therefore we can\\n    // \\\"force\\\" the microtask queue to be flushed by adding an empty timer.\\n    if (isIOS) {\\n      setTimeout(noop);\\n    }\\n  };\\n} else {\\n  // fallback to macro\\n  microTimerFunc = macroTimerFunc;\\n}\\n\\n/**\\n * Wrap a function so that if any code inside triggers state change,\\n * the changes are queued using a (macro) task instead of a microtask.\\n */\\nfunction withMacroTask(fn) {\\n  return fn._withTask || (fn._withTask = function () {\\n    useMacroTask = true;\\n    var res = fn.apply(null, arguments);\\n    useMacroTask = false;\\n    return res;\\n  });\\n}\\n\\nfunction nextTick(cb, ctx) {\\n  var _resolve;\\n  callbacks.push(function () {\\n    if (cb) {\\n      try {\\n        cb.call(ctx);\\n      } catch (e) {\\n        handleError(e, ctx, 'nextTick');\\n      }\\n    } else if (_resolve) {\\n      _resolve(ctx);\\n    }\\n  });\\n  if (!pending) {\\n    pending = true;\\n    if (useMacroTask) {\\n      macroTimerFunc();\\n    } else {\\n      microTimerFunc();\\n    }\\n  }\\n  // $flow-disable-line\\n  if (!cb && typeof Promise !== 'undefined') {\\n    return new Promise(function (resolve) {\\n      _resolve = resolve;\\n    });\\n  }\\n}\\n\\n/*  */\\n\\nvar mark;\\nvar measure;\\n\\nif (true) {\\n  var perf = inBrowser && window.performance;\\n  /* istanbul ignore if */\\n  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {\\n    mark = function (tag) {\\n      return perf.mark(tag);\\n    };\\n    measure = function (name, startTag, endTag) {\\n      perf.measure(name, startTag, endTag);\\n      perf.clearMarks(startTag);\\n      perf.clearMarks(endTag);\\n      perf.clearMeasures(name);\\n    };\\n  }\\n}\\n\\n/* not type checking this file because flow doesn't play well with Proxy */\\n\\nvar initProxy;\\n\\nif (true) {\\n  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify\\n  );\\n\\n  var warnNonPresent = function (target, key) {\\n    warn(\\\"Property or method \\\\\\\"\\\" + key + \\\"\\\\\\\" is not defined on the instance but \\\" + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);\\n  };\\n\\n  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);\\n\\n  if (hasProxy) {\\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\\n    config.keyCodes = new Proxy(config.keyCodes, {\\n      set: function set(target, key, value) {\\n        if (isBuiltInModifier(key)) {\\n          warn(\\\"Avoid overwriting built-in modifier in config.keyCodes: .\\\" + key);\\n          return false;\\n        } else {\\n          target[key] = value;\\n          return true;\\n        }\\n      }\\n    });\\n  }\\n\\n  var hasHandler = {\\n    has: function has(target, key) {\\n      var has = key in target;\\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\\n      if (!has && !isAllowed) {\\n        warnNonPresent(target, key);\\n      }\\n      return has || !isAllowed;\\n    }\\n  };\\n\\n  var getHandler = {\\n    get: function get(target, key) {\\n      if (typeof key === 'string' && !(key in target)) {\\n        warnNonPresent(target, key);\\n      }\\n      return target[key];\\n    }\\n  };\\n\\n  initProxy = function initProxy(vm) {\\n    if (hasProxy) {\\n      // determine which proxy handler to use\\n      var options = vm.$options;\\n      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;\\n      vm._renderProxy = new Proxy(vm, handlers);\\n    } else {\\n      vm._renderProxy = vm;\\n    }\\n  };\\n}\\n\\n/*  */\\n\\nvar seenObjects = new _Set();\\n\\n/**\\n * Recursively traverse an object to evoke all converted\\n * getters, so that every nested property inside the object\\n * is collected as a \\\"deep\\\" dependency.\\n */\\nfunction traverse(val) {\\n  _traverse(val, seenObjects);\\n  seenObjects.clear();\\n}\\n\\nfunction _traverse(val, seen) {\\n  var i, keys;\\n  var isA = Array.isArray(val);\\n  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {\\n    return;\\n  }\\n  if (val.__ob__) {\\n    var depId = val.__ob__.dep.id;\\n    if (seen.has(depId)) {\\n      return;\\n    }\\n    seen.add(depId);\\n  }\\n  if (isA) {\\n    i = val.length;\\n    while (i--) {\\n      _traverse(val[i], seen);\\n    }\\n  } else {\\n    keys = Object.keys(val);\\n    i = keys.length;\\n    while (i--) {\\n      _traverse(val[keys[i]], seen);\\n    }\\n  }\\n}\\n\\n/*  */\\n\\nvar normalizeEvent = cached(function (name) {\\n  var passive = name.charAt(0) === '&';\\n  name = passive ? name.slice(1) : name;\\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\\n  name = once$$1 ? name.slice(1) : name;\\n  var capture = name.charAt(0) === '!';\\n  name = capture ? name.slice(1) : name;\\n  return {\\n    name: name,\\n    once: once$$1,\\n    capture: capture,\\n    passive: passive\\n  };\\n});\\n\\nfunction createFnInvoker(fns) {\\n  function invoker() {\\n    var arguments$1 = arguments;\\n\\n    var fns = invoker.fns;\\n    if (Array.isArray(fns)) {\\n      var cloned = fns.slice();\\n      for (var i = 0; i < cloned.length; i++) {\\n        cloned[i].apply(null, arguments$1);\\n      }\\n    } else {\\n      // return handler return value for single handlers\\n      return fns.apply(null, arguments);\\n    }\\n  }\\n  invoker.fns = fns;\\n  return invoker;\\n}\\n\\nfunction updateListeners(on, oldOn, add, remove$$1, vm) {\\n  var name, def, cur, old, event;\\n  for (name in on) {\\n    def = cur = on[name];\\n    old = oldOn[name];\\n    event = normalizeEvent(name);\\n    /* istanbul ignore if */\\n    if (isUndef(cur)) {\\n      \\\"development\\\" !== 'production' && warn(\\\"Invalid handler for event \\\\\\\"\\\" + event.name + \\\"\\\\\\\": got \\\" + String(cur), vm);\\n    } else if (isUndef(old)) {\\n      if (isUndef(cur.fns)) {\\n        cur = on[name] = createFnInvoker(cur);\\n      }\\n      add(event.name, cur, event.once, event.capture, event.passive, event.params);\\n    } else if (cur !== old) {\\n      old.fns = cur;\\n      on[name] = old;\\n    }\\n  }\\n  for (name in oldOn) {\\n    if (isUndef(on[name])) {\\n      event = normalizeEvent(name);\\n      remove$$1(event.name, oldOn[name], event.capture);\\n    }\\n  }\\n}\\n\\n/*  */\\n\\nfunction mergeVNodeHook(def, hookKey, hook) {\\n  if (def instanceof VNode) {\\n    def = def.data.hook || (def.data.hook = {});\\n  }\\n  var invoker;\\n  var oldHook = def[hookKey];\\n\\n  function wrappedHook() {\\n    hook.apply(this, arguments);\\n    // important: remove merged hook to ensure it's called only once\\n    // and prevent memory leak\\n    remove(invoker.fns, wrappedHook);\\n  }\\n\\n  if (isUndef(oldHook)) {\\n    // no existing hook\\n    invoker = createFnInvoker([wrappedHook]);\\n  } else {\\n    /* istanbul ignore if */\\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\\n      // already a merged invoker\\n      invoker = oldHook;\\n      invoker.fns.push(wrappedHook);\\n    } else {\\n      // existing plain hook\\n      invoker = createFnInvoker([oldHook, wrappedHook]);\\n    }\\n  }\\n\\n  invoker.merged = true;\\n  def[hookKey] = invoker;\\n}\\n\\n/*  */\\n\\nfunction extractPropsFromVNodeData(data, Ctor, tag) {\\n  // we are only extracting raw values here.\\n  // validation and default values are handled in the child\\n  // component itself.\\n  var propOptions = Ctor.options.props;\\n  if (isUndef(propOptions)) {\\n    return;\\n  }\\n  var res = {};\\n  var attrs = data.attrs;\\n  var props = data.props;\\n  if (isDef(attrs) || isDef(props)) {\\n    for (var key in propOptions) {\\n      var altKey = hyphenate(key);\\n      if (true) {\\n        var keyInLowerCase = key.toLowerCase();\\n        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {\\n          tip(\\\"Prop \\\\\\\"\\\" + keyInLowerCase + \\\"\\\\\\\" is passed to component \\\" + formatComponentName(tag || Ctor) + \\\", but the declared prop name is\\\" + \\\" \\\\\\\"\\\" + key + \\\"\\\\\\\". \\\" + \\\"Note that HTML attributes are case-insensitive and camelCased \\\" + \\\"props need to use their kebab-case equivalents when using in-DOM \\\" + \\\"templates. You should probably use \\\\\\\"\\\" + altKey + \\\"\\\\\\\" instead of \\\\\\\"\\\" + key + \\\"\\\\\\\".\\\");\\n        }\\n      }\\n      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);\\n    }\\n  }\\n  return res;\\n}\\n\\nfunction checkProp(res, hash, key, altKey, preserve) {\\n  if (isDef(hash)) {\\n    if (hasOwn(hash, key)) {\\n      res[key] = hash[key];\\n      if (!preserve) {\\n        delete hash[key];\\n      }\\n      return true;\\n    } else if (hasOwn(hash, altKey)) {\\n      res[key] = hash[altKey];\\n      if (!preserve) {\\n        delete hash[altKey];\\n      }\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\n/*  */\\n\\n// The template compiler attempts to minimize the need for normalization by\\n// statically analyzing the template at compile time.\\n//\\n// For plain HTML markup, normalization can be completely skipped because the\\n// generated render function is guaranteed to return Array<VNode>. There are\\n// two cases where extra normalization is needed:\\n\\n// 1. When the children contains components - because a functional component\\n// may return an Array instead of a single root. In this case, just a simple\\n// normalization is needed - if any child is an Array, we flatten the whole\\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\\n// because functional components already normalize their own children.\\nfunction simpleNormalizeChildren(children) {\\n  for (var i = 0; i < children.length; i++) {\\n    if (Array.isArray(children[i])) {\\n      return Array.prototype.concat.apply([], children);\\n    }\\n  }\\n  return children;\\n}\\n\\n// 2. When the children contains constructs that always generated nested Arrays,\\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\\n// with hand-written render functions / JSX. In such cases a full normalization\\n// is needed to cater to all possible types of children values.\\nfunction normalizeChildren(children) {\\n  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;\\n}\\n\\nfunction isTextNode(node) {\\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment);\\n}\\n\\nfunction normalizeArrayChildren(children, nestedIndex) {\\n  var res = [];\\n  var i, c, lastIndex, last;\\n  for (i = 0; i < children.length; i++) {\\n    c = children[i];\\n    if (isUndef(c) || typeof c === 'boolean') {\\n      continue;\\n    }\\n    lastIndex = res.length - 1;\\n    last = res[lastIndex];\\n    //  nested\\n    if (Array.isArray(c)) {\\n      if (c.length > 0) {\\n        c = normalizeArrayChildren(c, (nestedIndex || '') + \\\"_\\\" + i);\\n        // merge adjacent text nodes\\n        if (isTextNode(c[0]) && isTextNode(last)) {\\n          res[lastIndex] = createTextVNode(last.text + c[0].text);\\n          c.shift();\\n        }\\n        res.push.apply(res, c);\\n      }\\n    } else if (isPrimitive(c)) {\\n      if (isTextNode(last)) {\\n        // merge adjacent text nodes\\n        // this is necessary for SSR hydration because text nodes are\\n        // essentially merged when rendered to HTML strings\\n        res[lastIndex] = createTextVNode(last.text + c);\\n      } else if (c !== '') {\\n        // convert primitive to vnode\\n        res.push(createTextVNode(c));\\n      }\\n    } else {\\n      if (isTextNode(c) && isTextNode(last)) {\\n        // merge adjacent text nodes\\n        res[lastIndex] = createTextVNode(last.text + c.text);\\n      } else {\\n        // default key for nested array children (likely generated by v-for)\\n        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {\\n          c.key = \\\"__vlist\\\" + nestedIndex + \\\"_\\\" + i + \\\"__\\\";\\n        }\\n        res.push(c);\\n      }\\n    }\\n  }\\n  return res;\\n}\\n\\n/*  */\\n\\nfunction ensureCtor(comp, base) {\\n  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {\\n    comp = comp.default;\\n  }\\n  return isObject(comp) ? base.extend(comp) : comp;\\n}\\n\\nfunction createAsyncPlaceholder(factory, data, context, children, tag) {\\n  var node = createEmptyVNode();\\n  node.asyncFactory = factory;\\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\\n  return node;\\n}\\n\\nfunction resolveAsyncComponent(factory, baseCtor, context) {\\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\\n    return factory.errorComp;\\n  }\\n\\n  if (isDef(factory.resolved)) {\\n    return factory.resolved;\\n  }\\n\\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\\n    return factory.loadingComp;\\n  }\\n\\n  if (isDef(factory.contexts)) {\\n    // already pending\\n    factory.contexts.push(context);\\n  } else {\\n    var contexts = factory.contexts = [context];\\n    var sync = true;\\n\\n    var forceRender = function () {\\n      for (var i = 0, l = contexts.length; i < l; i++) {\\n        contexts[i].$forceUpdate();\\n      }\\n    };\\n\\n    var resolve = once(function (res) {\\n      // cache resolved\\n      factory.resolved = ensureCtor(res, baseCtor);\\n      // invoke callbacks only if this is not a synchronous resolve\\n      // (async resolves are shimmed as synchronous during SSR)\\n      if (!sync) {\\n        forceRender();\\n      }\\n    });\\n\\n    var reject = once(function (reason) {\\n      \\\"development\\\" !== 'production' && warn(\\\"Failed to resolve async component: \\\" + String(factory) + (reason ? \\\"\\\\nReason: \\\" + reason : ''));\\n      if (isDef(factory.errorComp)) {\\n        factory.error = true;\\n        forceRender();\\n      }\\n    });\\n\\n    var res = factory(resolve, reject);\\n\\n    if (isObject(res)) {\\n      if (typeof res.then === 'function') {\\n        // () => Promise\\n        if (isUndef(factory.resolved)) {\\n          res.then(resolve, reject);\\n        }\\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\\n        res.component.then(resolve, reject);\\n\\n        if (isDef(res.error)) {\\n          factory.errorComp = ensureCtor(res.error, baseCtor);\\n        }\\n\\n        if (isDef(res.loading)) {\\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\\n          if (res.delay === 0) {\\n            factory.loading = true;\\n          } else {\\n            setTimeout(function () {\\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\\n                factory.loading = true;\\n                forceRender();\\n              }\\n            }, res.delay || 200);\\n          }\\n        }\\n\\n        if (isDef(res.timeout)) {\\n          setTimeout(function () {\\n            if (isUndef(factory.resolved)) {\\n              reject( true ? \\\"timeout (\\\" + res.timeout + \\\"ms)\\\" : null);\\n            }\\n          }, res.timeout);\\n        }\\n      }\\n    }\\n\\n    sync = false;\\n    // return in case resolved synchronously\\n    return factory.loading ? factory.loadingComp : factory.resolved;\\n  }\\n}\\n\\n/*  */\\n\\nfunction isAsyncPlaceholder(node) {\\n  return node.isComment && node.asyncFactory;\\n}\\n\\n/*  */\\n\\nfunction getFirstComponentChild(children) {\\n  if (Array.isArray(children)) {\\n    for (var i = 0; i < children.length; i++) {\\n      var c = children[i];\\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\\n        return c;\\n      }\\n    }\\n  }\\n}\\n\\n/*  */\\n\\n/*  */\\n\\nfunction initEvents(vm) {\\n  vm._events = Object.create(null);\\n  vm._hasHookEvent = false;\\n  // init parent attached events\\n  var listeners = vm.$options._parentListeners;\\n  if (listeners) {\\n    updateComponentListeners(vm, listeners);\\n  }\\n}\\n\\nvar target;\\n\\nfunction add(event, fn, once) {\\n  if (once) {\\n    target.$once(event, fn);\\n  } else {\\n    target.$on(event, fn);\\n  }\\n}\\n\\nfunction remove$1(event, fn) {\\n  target.$off(event, fn);\\n}\\n\\nfunction updateComponentListeners(vm, listeners, oldListeners) {\\n  target = vm;\\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\\n  target = undefined;\\n}\\n\\nfunction eventsMixin(Vue) {\\n  var hookRE = /^hook:/;\\n  Vue.prototype.$on = function (event, fn) {\\n    var this$1 = this;\\n\\n    var vm = this;\\n    if (Array.isArray(event)) {\\n      for (var i = 0, l = event.length; i < l; i++) {\\n        this$1.$on(event[i], fn);\\n      }\\n    } else {\\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\\n      // optimize hook:event cost by using a boolean flag marked at registration\\n      // instead of a hash lookup\\n      if (hookRE.test(event)) {\\n        vm._hasHookEvent = true;\\n      }\\n    }\\n    return vm;\\n  };\\n\\n  Vue.prototype.$once = function (event, fn) {\\n    var vm = this;\\n    function on() {\\n      vm.$off(event, on);\\n      fn.apply(vm, arguments);\\n    }\\n    on.fn = fn;\\n    vm.$on(event, on);\\n    return vm;\\n  };\\n\\n  Vue.prototype.$off = function (event, fn) {\\n    var this$1 = this;\\n\\n    var vm = this;\\n    // all\\n    if (!arguments.length) {\\n      vm._events = Object.create(null);\\n      return vm;\\n    }\\n    // array of events\\n    if (Array.isArray(event)) {\\n      for (var i = 0, l = event.length; i < l; i++) {\\n        this$1.$off(event[i], fn);\\n      }\\n      return vm;\\n    }\\n    // specific event\\n    var cbs = vm._events[event];\\n    if (!cbs) {\\n      return vm;\\n    }\\n    if (!fn) {\\n      vm._events[event] = null;\\n      return vm;\\n    }\\n    if (fn) {\\n      // specific handler\\n      var cb;\\n      var i$1 = cbs.length;\\n      while (i$1--) {\\n        cb = cbs[i$1];\\n        if (cb === fn || cb.fn === fn) {\\n          cbs.splice(i$1, 1);\\n          break;\\n        }\\n      }\\n    }\\n    return vm;\\n  };\\n\\n  Vue.prototype.$emit = function (event) {\\n    var vm = this;\\n    if (true) {\\n      var lowerCaseEvent = event.toLowerCase();\\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\\n        tip(\\\"Event \\\\\\\"\\\" + lowerCaseEvent + \\\"\\\\\\\" is emitted in component \\\" + formatComponentName(vm) + \\\" but the handler is registered for \\\\\\\"\\\" + event + \\\"\\\\\\\". \\\" + \\\"Note that HTML attributes are case-insensitive and you cannot use \\\" + \\\"v-on to listen to camelCase events when using in-DOM templates. \\\" + \\\"You should probably use \\\\\\\"\\\" + hyphenate(event) + \\\"\\\\\\\" instead of \\\\\\\"\\\" + event + \\\"\\\\\\\".\\\");\\n      }\\n    }\\n    var cbs = vm._events[event];\\n    if (cbs) {\\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\\n      var args = toArray(arguments, 1);\\n      for (var i = 0, l = cbs.length; i < l; i++) {\\n        try {\\n          cbs[i].apply(vm, args);\\n        } catch (e) {\\n          handleError(e, vm, \\\"event handler for \\\\\\\"\\\" + event + \\\"\\\\\\\"\\\");\\n        }\\n      }\\n    }\\n    return vm;\\n  };\\n}\\n\\n/*  */\\n\\n/**\\n * Runtime helper for resolving raw children VNodes into a slot object.\\n */\\nfunction resolveSlots(children, context) {\\n  var slots = {};\\n  if (!children) {\\n    return slots;\\n  }\\n  for (var i = 0, l = children.length; i < l; i++) {\\n    var child = children[i];\\n    var data = child.data;\\n    // remove slot attribute if the node is resolved as a Vue slot node\\n    if (data && data.attrs && data.attrs.slot) {\\n      delete data.attrs.slot;\\n    }\\n    // named slots should only be respected if the vnode was rendered in the\\n    // same context.\\n    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {\\n      var name = data.slot;\\n      var slot = slots[name] || (slots[name] = []);\\n      if (child.tag === 'template') {\\n        slot.push.apply(slot, child.children || []);\\n      } else {\\n        slot.push(child);\\n      }\\n    } else {\\n      (slots.default || (slots.default = [])).push(child);\\n    }\\n  }\\n  // ignore slots that contains only whitespace\\n  for (var name$1 in slots) {\\n    if (slots[name$1].every(isWhitespace)) {\\n      delete slots[name$1];\\n    }\\n  }\\n  return slots;\\n}\\n\\nfunction isWhitespace(node) {\\n  return node.isComment && !node.asyncFactory || node.text === ' ';\\n}\\n\\nfunction resolveScopedSlots(fns, // see flow/vnode\\nres) {\\n  res = res || {};\\n  for (var i = 0; i < fns.length; i++) {\\n    if (Array.isArray(fns[i])) {\\n      resolveScopedSlots(fns[i], res);\\n    } else {\\n      res[fns[i].key] = fns[i].fn;\\n    }\\n  }\\n  return res;\\n}\\n\\n/*  */\\n\\nvar activeInstance = null;\\nvar isUpdatingChildComponent = false;\\n\\nfunction initLifecycle(vm) {\\n  var options = vm.$options;\\n\\n  // locate first non-abstract parent\\n  var parent = options.parent;\\n  if (parent && !options.abstract) {\\n    while (parent.$options.abstract && parent.$parent) {\\n      parent = parent.$parent;\\n    }\\n    parent.$children.push(vm);\\n  }\\n\\n  vm.$parent = parent;\\n  vm.$root = parent ? parent.$root : vm;\\n\\n  vm.$children = [];\\n  vm.$refs = {};\\n\\n  vm._watcher = null;\\n  vm._inactive = null;\\n  vm._directInactive = false;\\n  vm._isMounted = false;\\n  vm._isDestroyed = false;\\n  vm._isBeingDestroyed = false;\\n}\\n\\nfunction lifecycleMixin(Vue) {\\n  Vue.prototype._update = function (vnode, hydrating) {\\n    var vm = this;\\n    if (vm._isMounted) {\\n      callHook(vm, 'beforeUpdate');\\n    }\\n    var prevEl = vm.$el;\\n    var prevVnode = vm._vnode;\\n    var prevActiveInstance = activeInstance;\\n    activeInstance = vm;\\n    vm._vnode = vnode;\\n    // Vue.prototype.__patch__ is injected in entry points\\n    // based on the rendering backend used.\\n    if (!prevVnode) {\\n      // initial render\\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */\\n      , vm.$options._parentElm, vm.$options._refElm);\\n      // no need for the ref nodes after initial patch\\n      // this prevents keeping a detached DOM tree in memory (#5851)\\n      vm.$options._parentElm = vm.$options._refElm = null;\\n    } else {\\n      // updates\\n      vm.$el = vm.__patch__(prevVnode, vnode);\\n    }\\n    activeInstance = prevActiveInstance;\\n    // update __vue__ reference\\n    if (prevEl) {\\n      prevEl.__vue__ = null;\\n    }\\n    if (vm.$el) {\\n      vm.$el.__vue__ = vm;\\n    }\\n    // if parent is an HOC, update its $el as well\\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\\n      vm.$parent.$el = vm.$el;\\n    }\\n    // updated hook is called by the scheduler to ensure that children are\\n    // updated in a parent's updated hook.\\n  };\\n\\n  Vue.prototype.$forceUpdate = function () {\\n    var vm = this;\\n    if (vm._watcher) {\\n      vm._watcher.update();\\n    }\\n  };\\n\\n  Vue.prototype.$destroy = function () {\\n    var vm = this;\\n    if (vm._isBeingDestroyed) {\\n      return;\\n    }\\n    callHook(vm, 'beforeDestroy');\\n    vm._isBeingDestroyed = true;\\n    // remove self from parent\\n    var parent = vm.$parent;\\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\\n      remove(parent.$children, vm);\\n    }\\n    // teardown watchers\\n    if (vm._watcher) {\\n      vm._watcher.teardown();\\n    }\\n    var i = vm._watchers.length;\\n    while (i--) {\\n      vm._watchers[i].teardown();\\n    }\\n    // remove reference from data ob\\n    // frozen object may not have observer.\\n    if (vm._data.__ob__) {\\n      vm._data.__ob__.vmCount--;\\n    }\\n    // call the last hook...\\n    vm._isDestroyed = true;\\n    // invoke destroy hooks on current rendered tree\\n    vm.__patch__(vm._vnode, null);\\n    // fire destroyed hook\\n    callHook(vm, 'destroyed');\\n    // turn off all instance listeners.\\n    vm.$off();\\n    // remove __vue__ reference\\n    if (vm.$el) {\\n      vm.$el.__vue__ = null;\\n    }\\n    // release circular reference (#6759)\\n    if (vm.$vnode) {\\n      vm.$vnode.parent = null;\\n    }\\n  };\\n}\\n\\nfunction mountComponent(vm, el, hydrating) {\\n  vm.$el = el;\\n  if (!vm.$options.render) {\\n    vm.$options.render = createEmptyVNode;\\n    if (true) {\\n      /* istanbul ignore if */\\n      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {\\n        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);\\n      } else {\\n        warn('Failed to mount component: template or render function not defined.', vm);\\n      }\\n    }\\n  }\\n  callHook(vm, 'beforeMount');\\n\\n  var updateComponent;\\n  /* istanbul ignore if */\\n  if (\\\"development\\\" !== 'production' && config.performance && mark) {\\n    updateComponent = function () {\\n      var name = vm._name;\\n      var id = vm._uid;\\n      var startTag = \\\"vue-perf-start:\\\" + id;\\n      var endTag = \\\"vue-perf-end:\\\" + id;\\n\\n      mark(startTag);\\n      var vnode = vm._render();\\n      mark(endTag);\\n      measure(\\\"vue \\\" + name + \\\" render\\\", startTag, endTag);\\n\\n      mark(startTag);\\n      vm._update(vnode, hydrating);\\n      mark(endTag);\\n      measure(\\\"vue \\\" + name + \\\" patch\\\", startTag, endTag);\\n    };\\n  } else {\\n    updateComponent = function () {\\n      vm._update(vm._render(), hydrating);\\n    };\\n  }\\n\\n  // we set this to vm._watcher inside the watcher's constructor\\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\\n  // component's mounted hook), which relies on vm._watcher being already defined\\n  new Watcher(vm, updateComponent, noop, null, true /* isRenderWatcher */);\\n  hydrating = false;\\n\\n  // manually mounted instance, call mounted on self\\n  // mounted is called for render-created child components in its inserted hook\\n  if (vm.$vnode == null) {\\n    vm._isMounted = true;\\n    callHook(vm, 'mounted');\\n  }\\n  return vm;\\n}\\n\\nfunction updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {\\n  if (true) {\\n    isUpdatingChildComponent = true;\\n  }\\n\\n  // determine whether component has slot children\\n  // we need to do this before overwriting $options._renderChildren\\n  var hasChildren = !!(renderChildren || // has new static slots\\n  vm.$options._renderChildren || // has old static slots\\n  parentVnode.data.scopedSlots || // has new scoped slots\\n  vm.$scopedSlots !== emptyObject // has old scoped slots\\n  );\\n\\n  vm.$options._parentVnode = parentVnode;\\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\\n\\n  if (vm._vnode) {\\n    // update child tree's parent\\n    vm._vnode.parent = parentVnode;\\n  }\\n  vm.$options._renderChildren = renderChildren;\\n\\n  // update $attrs and $listeners hash\\n  // these are also reactive so they may trigger child update if the child\\n  // used them during render\\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\\n  vm.$listeners = listeners || emptyObject;\\n\\n  // update props\\n  if (propsData && vm.$options.props) {\\n    toggleObserving(false);\\n    var props = vm._props;\\n    var propKeys = vm.$options._propKeys || [];\\n    for (var i = 0; i < propKeys.length; i++) {\\n      var key = propKeys[i];\\n      var propOptions = vm.$options.props; // wtf flow?\\n      props[key] = validateProp(key, propOptions, propsData, vm);\\n    }\\n    toggleObserving(true);\\n    // keep a copy of raw propsData\\n    vm.$options.propsData = propsData;\\n  }\\n\\n  // update listeners\\n  listeners = listeners || emptyObject;\\n  var oldListeners = vm.$options._parentListeners;\\n  vm.$options._parentListeners = listeners;\\n  updateComponentListeners(vm, listeners, oldListeners);\\n\\n  // resolve slots + force update if has children\\n  if (hasChildren) {\\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\\n    vm.$forceUpdate();\\n  }\\n\\n  if (true) {\\n    isUpdatingChildComponent = false;\\n  }\\n}\\n\\nfunction isInInactiveTree(vm) {\\n  while (vm && (vm = vm.$parent)) {\\n    if (vm._inactive) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\nfunction activateChildComponent(vm, direct) {\\n  if (direct) {\\n    vm._directInactive = false;\\n    if (isInInactiveTree(vm)) {\\n      return;\\n    }\\n  } else if (vm._directInactive) {\\n    return;\\n  }\\n  if (vm._inactive || vm._inactive === null) {\\n    vm._inactive = false;\\n    for (var i = 0; i < vm.$children.length; i++) {\\n      activateChildComponent(vm.$children[i]);\\n    }\\n    callHook(vm, 'activated');\\n  }\\n}\\n\\nfunction deactivateChildComponent(vm, direct) {\\n  if (direct) {\\n    vm._directInactive = true;\\n    if (isInInactiveTree(vm)) {\\n      return;\\n    }\\n  }\\n  if (!vm._inactive) {\\n    vm._inactive = true;\\n    for (var i = 0; i < vm.$children.length; i++) {\\n      deactivateChildComponent(vm.$children[i]);\\n    }\\n    callHook(vm, 'deactivated');\\n  }\\n}\\n\\nfunction callHook(vm, hook) {\\n  // #7573 disable dep collection when invoking lifecycle hooks\\n  pushTarget();\\n  var handlers = vm.$options[hook];\\n  if (handlers) {\\n    for (var i = 0, j = handlers.length; i < j; i++) {\\n      try {\\n        handlers[i].call(vm);\\n      } catch (e) {\\n        handleError(e, vm, hook + \\\" hook\\\");\\n      }\\n    }\\n  }\\n  if (vm._hasHookEvent) {\\n    vm.$emit('hook:' + hook);\\n  }\\n  popTarget();\\n}\\n\\n/*  */\\n\\nvar MAX_UPDATE_COUNT = 100;\\n\\nvar queue = [];\\nvar activatedChildren = [];\\nvar has = {};\\nvar circular = {};\\nvar waiting = false;\\nvar flushing = false;\\nvar index = 0;\\n\\n/**\\n * Reset the scheduler's state.\\n */\\nfunction resetSchedulerState() {\\n  index = queue.length = activatedChildren.length = 0;\\n  has = {};\\n  if (true) {\\n    circular = {};\\n  }\\n  waiting = flushing = false;\\n}\\n\\n/**\\n * Flush both queues and run the watchers.\\n */\\nfunction flushSchedulerQueue() {\\n  flushing = true;\\n  var watcher, id;\\n\\n  // Sort queue before flush.\\n  // This ensures that:\\n  // 1. Components are updated from parent to child. (because parent is always\\n  //    created before the child)\\n  // 2. A component's user watchers are run before its render watcher (because\\n  //    user watchers are created before the render watcher)\\n  // 3. If a component is destroyed during a parent component's watcher run,\\n  //    its watchers can be skipped.\\n  queue.sort(function (a, b) {\\n    return a.id - b.id;\\n  });\\n\\n  // do not cache length because more watchers might be pushed\\n  // as we run existing watchers\\n  for (index = 0; index < queue.length; index++) {\\n    watcher = queue[index];\\n    id = watcher.id;\\n    has[id] = null;\\n    watcher.run();\\n    // in dev build, check and stop circular updates.\\n    if (\\\"development\\\" !== 'production' && has[id] != null) {\\n      circular[id] = (circular[id] || 0) + 1;\\n      if (circular[id] > MAX_UPDATE_COUNT) {\\n        warn('You may have an infinite update loop ' + (watcher.user ? \\\"in watcher with expression \\\\\\\"\\\" + watcher.expression + \\\"\\\\\\\"\\\" : \\\"in a component render function.\\\"), watcher.vm);\\n        break;\\n      }\\n    }\\n  }\\n\\n  // keep copies of post queues before resetting state\\n  var activatedQueue = activatedChildren.slice();\\n  var updatedQueue = queue.slice();\\n\\n  resetSchedulerState();\\n\\n  // call component updated and activated hooks\\n  callActivatedHooks(activatedQueue);\\n  callUpdatedHooks(updatedQueue);\\n\\n  // devtool hook\\n  /* istanbul ignore if */\\n  if (devtools && config.devtools) {\\n    devtools.emit('flush');\\n  }\\n}\\n\\nfunction callUpdatedHooks(queue) {\\n  var i = queue.length;\\n  while (i--) {\\n    var watcher = queue[i];\\n    var vm = watcher.vm;\\n    if (vm._watcher === watcher && vm._isMounted) {\\n      callHook(vm, 'updated');\\n    }\\n  }\\n}\\n\\n/**\\n * Queue a kept-alive component that was activated during patch.\\n * The queue will be processed after the entire tree has been patched.\\n */\\nfunction queueActivatedComponent(vm) {\\n  // setting _inactive to false here so that a render function can\\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\\n  vm._inactive = false;\\n  activatedChildren.push(vm);\\n}\\n\\nfunction callActivatedHooks(queue) {\\n  for (var i = 0; i < queue.length; i++) {\\n    queue[i]._inactive = true;\\n    activateChildComponent(queue[i], true /* true */);\\n  }\\n}\\n\\n/**\\n * Push a watcher into the watcher queue.\\n * Jobs with duplicate IDs will be skipped unless it's\\n * pushed when the queue is being flushed.\\n */\\nfunction queueWatcher(watcher) {\\n  var id = watcher.id;\\n  if (has[id] == null) {\\n    has[id] = true;\\n    if (!flushing) {\\n      queue.push(watcher);\\n    } else {\\n      // if already flushing, splice the watcher based on its id\\n      // if already past its id, it will be run next immediately.\\n      var i = queue.length - 1;\\n      while (i > index && queue[i].id > watcher.id) {\\n        i--;\\n      }\\n      queue.splice(i + 1, 0, watcher);\\n    }\\n    // queue the flush\\n    if (!waiting) {\\n      waiting = true;\\n      nextTick(flushSchedulerQueue);\\n    }\\n  }\\n}\\n\\n/*  */\\n\\nvar uid$1 = 0;\\n\\n/**\\n * A watcher parses an expression, collects dependencies,\\n * and fires callback when the expression value changes.\\n * This is used for both the $watch() api and directives.\\n */\\nvar Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {\\n  this.vm = vm;\\n  if (isRenderWatcher) {\\n    vm._watcher = this;\\n  }\\n  vm._watchers.push(this);\\n  // options\\n  if (options) {\\n    this.deep = !!options.deep;\\n    this.user = !!options.user;\\n    this.lazy = !!options.lazy;\\n    this.sync = !!options.sync;\\n  } else {\\n    this.deep = this.user = this.lazy = this.sync = false;\\n  }\\n  this.cb = cb;\\n  this.id = ++uid$1; // uid for batching\\n  this.active = true;\\n  this.dirty = this.lazy; // for lazy watchers\\n  this.deps = [];\\n  this.newDeps = [];\\n  this.depIds = new _Set();\\n  this.newDepIds = new _Set();\\n  this.expression =  true ? expOrFn.toString() : '';\\n  // parse expression for getter\\n  if (typeof expOrFn === 'function') {\\n    this.getter = expOrFn;\\n  } else {\\n    this.getter = parsePath(expOrFn);\\n    if (!this.getter) {\\n      this.getter = function () {};\\n      \\\"development\\\" !== 'production' && warn(\\\"Failed watching path: \\\\\\\"\\\" + expOrFn + \\\"\\\\\\\" \\\" + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);\\n    }\\n  }\\n  this.value = this.lazy ? undefined : this.get();\\n};\\n\\n/**\\n * Evaluate the getter, and re-collect dependencies.\\n */\\nWatcher.prototype.get = function get() {\\n  pushTarget(this);\\n  var value;\\n  var vm = this.vm;\\n  try {\\n    value = this.getter.call(vm, vm);\\n  } catch (e) {\\n    if (this.user) {\\n      handleError(e, vm, \\\"getter for watcher \\\\\\\"\\\" + this.expression + \\\"\\\\\\\"\\\");\\n    } else {\\n      throw e;\\n    }\\n  } finally {\\n    // \\\"touch\\\" every property so they are all tracked as\\n    // dependencies for deep watching\\n    if (this.deep) {\\n      traverse(value);\\n    }\\n    popTarget();\\n    this.cleanupDeps();\\n  }\\n  return value;\\n};\\n\\n/**\\n * Add a dependency to this directive.\\n */\\nWatcher.prototype.addDep = function addDep(dep) {\\n  var id = dep.id;\\n  if (!this.newDepIds.has(id)) {\\n    this.newDepIds.add(id);\\n    this.newDeps.push(dep);\\n    if (!this.depIds.has(id)) {\\n      dep.addSub(this);\\n    }\\n  }\\n};\\n\\n/**\\n * Clean up for dependency collection.\\n */\\nWatcher.prototype.cleanupDeps = function cleanupDeps() {\\n  var this$1 = this;\\n\\n  var i = this.deps.length;\\n  while (i--) {\\n    var dep = this$1.deps[i];\\n    if (!this$1.newDepIds.has(dep.id)) {\\n      dep.removeSub(this$1);\\n    }\\n  }\\n  var tmp = this.depIds;\\n  this.depIds = this.newDepIds;\\n  this.newDepIds = tmp;\\n  this.newDepIds.clear();\\n  tmp = this.deps;\\n  this.deps = this.newDeps;\\n  this.newDeps = tmp;\\n  this.newDeps.length = 0;\\n};\\n\\n/**\\n * Subscriber interface.\\n * Will be called when a dependency changes.\\n */\\nWatcher.prototype.update = function update() {\\n  /* istanbul ignore else */\\n  if (this.lazy) {\\n    this.dirty = true;\\n  } else if (this.sync) {\\n    this.run();\\n  } else {\\n    queueWatcher(this);\\n  }\\n};\\n\\n/**\\n * Scheduler job interface.\\n * Will be called by the scheduler.\\n */\\nWatcher.prototype.run = function run() {\\n  if (this.active) {\\n    var value = this.get();\\n    if (value !== this.value ||\\n    // Deep watchers and watchers on Object/Arrays should fire even\\n    // when the value is the same, because the value may\\n    // have mutated.\\n    isObject(value) || this.deep) {\\n      // set new value\\n      var oldValue = this.value;\\n      this.value = value;\\n      if (this.user) {\\n        try {\\n          this.cb.call(this.vm, value, oldValue);\\n        } catch (e) {\\n          handleError(e, this.vm, \\\"callback for watcher \\\\\\\"\\\" + this.expression + \\\"\\\\\\\"\\\");\\n        }\\n      } else {\\n        this.cb.call(this.vm, value, oldValue);\\n      }\\n    }\\n  }\\n};\\n\\n/**\\n * Evaluate the value of the watcher.\\n * This only gets called for lazy watchers.\\n */\\nWatcher.prototype.evaluate = function evaluate() {\\n  this.value = this.get();\\n  this.dirty = false;\\n};\\n\\n/**\\n * Depend on all deps collected by this watcher.\\n */\\nWatcher.prototype.depend = function depend() {\\n  var this$1 = this;\\n\\n  var i = this.deps.length;\\n  while (i--) {\\n    this$1.deps[i].depend();\\n  }\\n};\\n\\n/**\\n * Remove self from all dependencies' subscriber list.\\n */\\nWatcher.prototype.teardown = function teardown() {\\n  var this$1 = this;\\n\\n  if (this.active) {\\n    // remove self from vm's watcher list\\n    // this is a somewhat expensive operation so we skip it\\n    // if the vm is being destroyed.\\n    if (!this.vm._isBeingDestroyed) {\\n      remove(this.vm._watchers, this);\\n    }\\n    var i = this.deps.length;\\n    while (i--) {\\n      this$1.deps[i].removeSub(this$1);\\n    }\\n    this.active = false;\\n  }\\n};\\n\\n/*  */\\n\\nvar sharedPropertyDefinition = {\\n  enumerable: true,\\n  configurable: true,\\n  get: noop,\\n  set: noop\\n};\\n\\nfunction proxy(target, sourceKey, key) {\\n  sharedPropertyDefinition.get = function proxyGetter() {\\n    return this[sourceKey][key];\\n  };\\n  sharedPropertyDefinition.set = function proxySetter(val) {\\n    this[sourceKey][key] = val;\\n  };\\n  Object.defineProperty(target, key, sharedPropertyDefinition);\\n}\\n\\nfunction initState(vm) {\\n  vm._watchers = [];\\n  var opts = vm.$options;\\n  if (opts.props) {\\n    initProps(vm, opts.props);\\n  }\\n  if (opts.methods) {\\n    initMethods(vm, opts.methods);\\n  }\\n  if (opts.data) {\\n    initData(vm);\\n  } else {\\n    observe(vm._data = {}, true /* asRootData */);\\n  }\\n  if (opts.computed) {\\n    initComputed(vm, opts.computed);\\n  }\\n  if (opts.watch && opts.watch !== nativeWatch) {\\n    initWatch(vm, opts.watch);\\n  }\\n}\\n\\nfunction initProps(vm, propsOptions) {\\n  var propsData = vm.$options.propsData || {};\\n  var props = vm._props = {};\\n  // cache prop keys so that future props updates can iterate using Array\\n  // instead of dynamic object key enumeration.\\n  var keys = vm.$options._propKeys = [];\\n  var isRoot = !vm.$parent;\\n  // root instance props should be converted\\n  if (!isRoot) {\\n    toggleObserving(false);\\n  }\\n  var loop = function (key) {\\n    keys.push(key);\\n    var value = validateProp(key, propsOptions, propsData, vm);\\n    /* istanbul ignore else */\\n    if (true) {\\n      var hyphenatedKey = hyphenate(key);\\n      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {\\n        warn(\\\"\\\\\\\"\\\" + hyphenatedKey + \\\"\\\\\\\" is a reserved attribute and cannot be used as component prop.\\\", vm);\\n      }\\n      defineReactive(props, key, value, function () {\\n        if (vm.$parent && !isUpdatingChildComponent) {\\n          warn(\\\"Avoid mutating a prop directly since the value will be \\\" + \\\"overwritten whenever the parent component re-renders. \\\" + \\\"Instead, use a data or computed property based on the prop's \\\" + \\\"value. Prop being mutated: \\\\\\\"\\\" + key + \\\"\\\\\\\"\\\", vm);\\n        }\\n      });\\n    } else {\\n      defineReactive(props, key, value);\\n    }\\n    // static props are already proxied on the component's prototype\\n    // during Vue.extend(). We only need to proxy props defined at\\n    // instantiation here.\\n    if (!(key in vm)) {\\n      proxy(vm, \\\"_props\\\", key);\\n    }\\n  };\\n\\n  for (var key in propsOptions) loop(key);\\n  toggleObserving(true);\\n}\\n\\nfunction initData(vm) {\\n  var data = vm.$options.data;\\n  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};\\n  if (!isPlainObject(data)) {\\n    data = {};\\n    \\\"development\\\" !== 'production' && warn('data functions should return an object:\\\\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);\\n  }\\n  // proxy data on instance\\n  var keys = Object.keys(data);\\n  var props = vm.$options.props;\\n  var methods = vm.$options.methods;\\n  var i = keys.length;\\n  while (i--) {\\n    var key = keys[i];\\n    if (true) {\\n      if (methods && hasOwn(methods, key)) {\\n        warn(\\\"Method \\\\\\\"\\\" + key + \\\"\\\\\\\" has already been defined as a data property.\\\", vm);\\n      }\\n    }\\n    if (props && hasOwn(props, key)) {\\n      \\\"development\\\" !== 'production' && warn(\\\"The data property \\\\\\\"\\\" + key + \\\"\\\\\\\" is already declared as a prop. \\\" + \\\"Use prop default value instead.\\\", vm);\\n    } else if (!isReserved(key)) {\\n      proxy(vm, \\\"_data\\\", key);\\n    }\\n  }\\n  // observe data\\n  observe(data, true /* asRootData */);\\n}\\n\\nfunction getData(data, vm) {\\n  // #7573 disable dep collection when invoking data getters\\n  pushTarget();\\n  try {\\n    return data.call(vm, vm);\\n  } catch (e) {\\n    handleError(e, vm, \\\"data()\\\");\\n    return {};\\n  } finally {\\n    popTarget();\\n  }\\n}\\n\\nvar computedWatcherOptions = { lazy: true };\\n\\nfunction initComputed(vm, computed) {\\n  // $flow-disable-line\\n  var watchers = vm._computedWatchers = Object.create(null);\\n  // computed properties are just getters during SSR\\n  var isSSR = isServerRendering();\\n\\n  for (var key in computed) {\\n    var userDef = computed[key];\\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\\n    if (\\\"development\\\" !== 'production' && getter == null) {\\n      warn(\\\"Getter is missing for computed property \\\\\\\"\\\" + key + \\\"\\\\\\\".\\\", vm);\\n    }\\n\\n    if (!isSSR) {\\n      // create internal watcher for the computed property.\\n      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);\\n    }\\n\\n    // component-defined computed properties are already defined on the\\n    // component prototype. We only need to define computed properties defined\\n    // at instantiation here.\\n    if (!(key in vm)) {\\n      defineComputed(vm, key, userDef);\\n    } else if (true) {\\n      if (key in vm.$data) {\\n        warn(\\\"The computed property \\\\\\\"\\\" + key + \\\"\\\\\\\" is already defined in data.\\\", vm);\\n      } else if (vm.$options.props && key in vm.$options.props) {\\n        warn(\\\"The computed property \\\\\\\"\\\" + key + \\\"\\\\\\\" is already defined as a prop.\\\", vm);\\n      }\\n    }\\n  }\\n}\\n\\nfunction defineComputed(target, key, userDef) {\\n  var shouldCache = !isServerRendering();\\n  if (typeof userDef === 'function') {\\n    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : userDef;\\n    sharedPropertyDefinition.set = noop;\\n  } else {\\n    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;\\n    sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;\\n  }\\n  if (\\\"development\\\" !== 'production' && sharedPropertyDefinition.set === noop) {\\n    sharedPropertyDefinition.set = function () {\\n      warn(\\\"Computed property \\\\\\\"\\\" + key + \\\"\\\\\\\" was assigned to but it has no setter.\\\", this);\\n    };\\n  }\\n  Object.defineProperty(target, key, sharedPropertyDefinition);\\n}\\n\\nfunction createComputedGetter(key) {\\n  return function computedGetter() {\\n    var watcher = this._computedWatchers && this._computedWatchers[key];\\n    if (watcher) {\\n      if (watcher.dirty) {\\n        watcher.evaluate();\\n      }\\n      if (Dep.target) {\\n        watcher.depend();\\n      }\\n      return watcher.value;\\n    }\\n  };\\n}\\n\\nfunction initMethods(vm, methods) {\\n  var props = vm.$options.props;\\n  for (var key in methods) {\\n    if (true) {\\n      if (methods[key] == null) {\\n        warn(\\\"Method \\\\\\\"\\\" + key + \\\"\\\\\\\" has an undefined value in the component definition. \\\" + \\\"Did you reference the function correctly?\\\", vm);\\n      }\\n      if (props && hasOwn(props, key)) {\\n        warn(\\\"Method \\\\\\\"\\\" + key + \\\"\\\\\\\" has already been defined as a prop.\\\", vm);\\n      }\\n      if (key in vm && isReserved(key)) {\\n        warn(\\\"Method \\\\\\\"\\\" + key + \\\"\\\\\\\" conflicts with an existing Vue instance method. \\\" + \\\"Avoid defining component methods that start with _ or $.\\\");\\n      }\\n    }\\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\\n  }\\n}\\n\\nfunction initWatch(vm, watch) {\\n  for (var key in watch) {\\n    var handler = watch[key];\\n    if (Array.isArray(handler)) {\\n      for (var i = 0; i < handler.length; i++) {\\n        createWatcher(vm, key, handler[i]);\\n      }\\n    } else {\\n      createWatcher(vm, key, handler);\\n    }\\n  }\\n}\\n\\nfunction createWatcher(vm, expOrFn, handler, options) {\\n  if (isPlainObject(handler)) {\\n    options = handler;\\n    handler = handler.handler;\\n  }\\n  if (typeof handler === 'string') {\\n    handler = vm[handler];\\n  }\\n  return vm.$watch(expOrFn, handler, options);\\n}\\n\\nfunction stateMixin(Vue) {\\n  // flow somehow has problems with directly declared definition object\\n  // when using Object.defineProperty, so we have to procedurally build up\\n  // the object here.\\n  var dataDef = {};\\n  dataDef.get = function () {\\n    return this._data;\\n  };\\n  var propsDef = {};\\n  propsDef.get = function () {\\n    return this._props;\\n  };\\n  if (true) {\\n    dataDef.set = function (newData) {\\n      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);\\n    };\\n    propsDef.set = function () {\\n      warn(\\\"$props is readonly.\\\", this);\\n    };\\n  }\\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\\n\\n  Vue.prototype.$set = set;\\n  Vue.prototype.$delete = del;\\n\\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\\n    var vm = this;\\n    if (isPlainObject(cb)) {\\n      return createWatcher(vm, expOrFn, cb, options);\\n    }\\n    options = options || {};\\n    options.user = true;\\n    var watcher = new Watcher(vm, expOrFn, cb, options);\\n    if (options.immediate) {\\n      cb.call(vm, watcher.value);\\n    }\\n    return function unwatchFn() {\\n      watcher.teardown();\\n    };\\n  };\\n}\\n\\n/*  */\\n\\nfunction initProvide(vm) {\\n  var provide = vm.$options.provide;\\n  if (provide) {\\n    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;\\n  }\\n}\\n\\nfunction initInjections(vm) {\\n  var result = resolveInject(vm.$options.inject, vm);\\n  if (result) {\\n    toggleObserving(false);\\n    Object.keys(result).forEach(function (key) {\\n      /* istanbul ignore else */\\n      if (true) {\\n        defineReactive(vm, key, result[key], function () {\\n          warn(\\\"Avoid mutating an injected value directly since the changes will be \\\" + \\\"overwritten whenever the provided component re-renders. \\\" + \\\"injection being mutated: \\\\\\\"\\\" + key + \\\"\\\\\\\"\\\", vm);\\n        });\\n      } else {\\n        defineReactive(vm, key, result[key]);\\n      }\\n    });\\n    toggleObserving(true);\\n  }\\n}\\n\\nfunction resolveInject(inject, vm) {\\n  if (inject) {\\n    // inject is :any because flow is not smart enough to figure out cached\\n    var result = Object.create(null);\\n    var keys = hasSymbol ? Reflect.ownKeys(inject).filter(function (key) {\\n      /* istanbul ignore next */\\n      return Object.getOwnPropertyDescriptor(inject, key).enumerable;\\n    }) : Object.keys(inject);\\n\\n    for (var i = 0; i < keys.length; i++) {\\n      var key = keys[i];\\n      var provideKey = inject[key].from;\\n      var source = vm;\\n      while (source) {\\n        if (source._provided && hasOwn(source._provided, provideKey)) {\\n          result[key] = source._provided[provideKey];\\n          break;\\n        }\\n        source = source.$parent;\\n      }\\n      if (!source) {\\n        if ('default' in inject[key]) {\\n          var provideDefault = inject[key].default;\\n          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;\\n        } else if (true) {\\n          warn(\\\"Injection \\\\\\\"\\\" + key + \\\"\\\\\\\" not found\\\", vm);\\n        }\\n      }\\n    }\\n    return result;\\n  }\\n}\\n\\n/*  */\\n\\n/**\\n * Runtime helper for rendering v-for lists.\\n */\\nfunction renderList(val, render) {\\n  var ret, i, l, keys, key;\\n  if (Array.isArray(val) || typeof val === 'string') {\\n    ret = new Array(val.length);\\n    for (i = 0, l = val.length; i < l; i++) {\\n      ret[i] = render(val[i], i);\\n    }\\n  } else if (typeof val === 'number') {\\n    ret = new Array(val);\\n    for (i = 0; i < val; i++) {\\n      ret[i] = render(i + 1, i);\\n    }\\n  } else if (isObject(val)) {\\n    keys = Object.keys(val);\\n    ret = new Array(keys.length);\\n    for (i = 0, l = keys.length; i < l; i++) {\\n      key = keys[i];\\n      ret[i] = render(val[key], key, i);\\n    }\\n  }\\n  if (isDef(ret)) {\\n    ret._isVList = true;\\n  }\\n  return ret;\\n}\\n\\n/*  */\\n\\n/**\\n * Runtime helper for rendering <slot>\\n */\\nfunction renderSlot(name, fallback, props, bindObject) {\\n  var scopedSlotFn = this.$scopedSlots[name];\\n  var nodes;\\n  if (scopedSlotFn) {\\n    // scoped slot\\n    props = props || {};\\n    if (bindObject) {\\n      if (\\\"development\\\" !== 'production' && !isObject(bindObject)) {\\n        warn('slot v-bind without argument expects an Object', this);\\n      }\\n      props = extend(extend({}, bindObject), props);\\n    }\\n    nodes = scopedSlotFn(props) || fallback;\\n  } else {\\n    var slotNodes = this.$slots[name];\\n    // warn duplicate slot usage\\n    if (slotNodes) {\\n      if (\\\"development\\\" !== 'production' && slotNodes._rendered) {\\n        warn(\\\"Duplicate presence of slot \\\\\\\"\\\" + name + \\\"\\\\\\\" found in the same render tree \\\" + \\\"- this will likely cause render errors.\\\", this);\\n      }\\n      slotNodes._rendered = true;\\n    }\\n    nodes = slotNodes || fallback;\\n  }\\n\\n  var target = props && props.slot;\\n  if (target) {\\n    return this.$createElement('template', { slot: target }, nodes);\\n  } else {\\n    return nodes;\\n  }\\n}\\n\\n/*  */\\n\\n/**\\n * Runtime helper for resolving filters\\n */\\nfunction resolveFilter(id) {\\n  return resolveAsset(this.$options, 'filters', id, true) || identity;\\n}\\n\\n/*  */\\n\\nfunction isKeyNotMatch(expect, actual) {\\n  if (Array.isArray(expect)) {\\n    return expect.indexOf(actual) === -1;\\n  } else {\\n    return expect !== actual;\\n  }\\n}\\n\\n/**\\n * Runtime helper for checking keyCodes from config.\\n * exposed as Vue.prototype._k\\n * passing in eventKeyName as last argument separately for backwards compat\\n */\\nfunction checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {\\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\\n    return isKeyNotMatch(builtInKeyName, eventKeyName);\\n  } else if (mappedKeyCode) {\\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode);\\n  } else if (eventKeyName) {\\n    return hyphenate(eventKeyName) !== key;\\n  }\\n}\\n\\n/*  */\\n\\n/**\\n * Runtime helper for merging v-bind=\\\"object\\\" into a VNode's data.\\n */\\nfunction bindObjectProps(data, tag, value, asProp, isSync) {\\n  if (value) {\\n    if (!isObject(value)) {\\n      \\\"development\\\" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);\\n    } else {\\n      if (Array.isArray(value)) {\\n        value = toObject(value);\\n      }\\n      var hash;\\n      var loop = function (key) {\\n        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {\\n          hash = data;\\n        } else {\\n          var type = data.attrs && data.attrs.type;\\n          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});\\n        }\\n        if (!(key in hash)) {\\n          hash[key] = value[key];\\n\\n          if (isSync) {\\n            var on = data.on || (data.on = {});\\n            on[\\\"update:\\\" + key] = function ($event) {\\n              value[key] = $event;\\n            };\\n          }\\n        }\\n      };\\n\\n      for (var key in value) loop(key);\\n    }\\n  }\\n  return data;\\n}\\n\\n/*  */\\n\\n/**\\n * Runtime helper for rendering static trees.\\n */\\nfunction renderStatic(index, isInFor) {\\n  var cached = this._staticTrees || (this._staticTrees = []);\\n  var tree = cached[index];\\n  // if has already-rendered static tree and not inside v-for,\\n  // we can reuse the same tree.\\n  if (tree && !isInFor) {\\n    return tree;\\n  }\\n  // otherwise, render a fresh tree.\\n  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates\\n  );\\n  markStatic(tree, \\\"__static__\\\" + index, false);\\n  return tree;\\n}\\n\\n/**\\n * Runtime helper for v-once.\\n * Effectively it means marking the node as static with a unique key.\\n */\\nfunction markOnce(tree, index, key) {\\n  markStatic(tree, \\\"__once__\\\" + index + (key ? \\\"_\\\" + key : \\\"\\\"), true);\\n  return tree;\\n}\\n\\nfunction markStatic(tree, key, isOnce) {\\n  if (Array.isArray(tree)) {\\n    for (var i = 0; i < tree.length; i++) {\\n      if (tree[i] && typeof tree[i] !== 'string') {\\n        markStaticNode(tree[i], key + \\\"_\\\" + i, isOnce);\\n      }\\n    }\\n  } else {\\n    markStaticNode(tree, key, isOnce);\\n  }\\n}\\n\\nfunction markStaticNode(node, key, isOnce) {\\n  node.isStatic = true;\\n  node.key = key;\\n  node.isOnce = isOnce;\\n}\\n\\n/*  */\\n\\nfunction bindObjectListeners(data, value) {\\n  if (value) {\\n    if (!isPlainObject(value)) {\\n      \\\"development\\\" !== 'production' && warn('v-on without argument expects an Object value', this);\\n    } else {\\n      var on = data.on = data.on ? extend({}, data.on) : {};\\n      for (var key in value) {\\n        var existing = on[key];\\n        var ours = value[key];\\n        on[key] = existing ? [].concat(existing, ours) : ours;\\n      }\\n    }\\n  }\\n  return data;\\n}\\n\\n/*  */\\n\\nfunction installRenderHelpers(target) {\\n  target._o = markOnce;\\n  target._n = toNumber;\\n  target._s = toString;\\n  target._l = renderList;\\n  target._t = renderSlot;\\n  target._q = looseEqual;\\n  target._i = looseIndexOf;\\n  target._m = renderStatic;\\n  target._f = resolveFilter;\\n  target._k = checkKeyCodes;\\n  target._b = bindObjectProps;\\n  target._v = createTextVNode;\\n  target._e = createEmptyVNode;\\n  target._u = resolveScopedSlots;\\n  target._g = bindObjectListeners;\\n}\\n\\n/*  */\\n\\nfunction FunctionalRenderContext(data, props, children, parent, Ctor) {\\n  var options = Ctor.options;\\n  // ensure the createElement function in functional components\\n  // gets a unique context - this is necessary for correct named slot check\\n  var contextVm;\\n  if (hasOwn(parent, '_uid')) {\\n    contextVm = Object.create(parent);\\n    // $flow-disable-line\\n    contextVm._original = parent;\\n  } else {\\n    // the context vm passed in is a functional context as well.\\n    // in this case we want to make sure we are able to get a hold to the\\n    // real context instance.\\n    contextVm = parent;\\n    // $flow-disable-line\\n    parent = parent._original;\\n  }\\n  var isCompiled = isTrue(options._compiled);\\n  var needNormalization = !isCompiled;\\n\\n  this.data = data;\\n  this.props = props;\\n  this.children = children;\\n  this.parent = parent;\\n  this.listeners = data.on || emptyObject;\\n  this.injections = resolveInject(options.inject, parent);\\n  this.slots = function () {\\n    return resolveSlots(children, parent);\\n  };\\n\\n  // support for compiled functional template\\n  if (isCompiled) {\\n    // exposing $options for renderStatic()\\n    this.$options = options;\\n    // pre-resolve slots for renderSlot()\\n    this.$slots = this.slots();\\n    this.$scopedSlots = data.scopedSlots || emptyObject;\\n  }\\n\\n  if (options._scopeId) {\\n    this._c = function (a, b, c, d) {\\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\\n      if (vnode && !Array.isArray(vnode)) {\\n        vnode.fnScopeId = options._scopeId;\\n        vnode.fnContext = parent;\\n      }\\n      return vnode;\\n    };\\n  } else {\\n    this._c = function (a, b, c, d) {\\n      return createElement(contextVm, a, b, c, d, needNormalization);\\n    };\\n  }\\n}\\n\\ninstallRenderHelpers(FunctionalRenderContext.prototype);\\n\\nfunction createFunctionalComponent(Ctor, propsData, data, contextVm, children) {\\n  var options = Ctor.options;\\n  var props = {};\\n  var propOptions = options.props;\\n  if (isDef(propOptions)) {\\n    for (var key in propOptions) {\\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\\n    }\\n  } else {\\n    if (isDef(data.attrs)) {\\n      mergeProps(props, data.attrs);\\n    }\\n    if (isDef(data.props)) {\\n      mergeProps(props, data.props);\\n    }\\n  }\\n\\n  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);\\n\\n  var vnode = options.render.call(null, renderContext._c, renderContext);\\n\\n  if (vnode instanceof VNode) {\\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options);\\n  } else if (Array.isArray(vnode)) {\\n    var vnodes = normalizeChildren(vnode) || [];\\n    var res = new Array(vnodes.length);\\n    for (var i = 0; i < vnodes.length; i++) {\\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);\\n    }\\n    return res;\\n  }\\n}\\n\\nfunction cloneAndMarkFunctionalResult(vnode, data, contextVm, options) {\\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\\n  // that should not be matched to match.\\n  var clone = cloneVNode(vnode);\\n  clone.fnContext = contextVm;\\n  clone.fnOptions = options;\\n  if (data.slot) {\\n    (clone.data || (clone.data = {})).slot = data.slot;\\n  }\\n  return clone;\\n}\\n\\nfunction mergeProps(to, from) {\\n  for (var key in from) {\\n    to[camelize(key)] = from[key];\\n  }\\n}\\n\\n/*  */\\n\\n// Register the component hook to weex native render engine.\\n// The hook will be triggered by native, not javascript.\\n\\n\\n// Updates the state of the component to weex native render engine.\\n\\n/*  */\\n\\n// https://github.com/Hanks10100/weex-native-directive/tree/master/component\\n\\n// listening on native callback\\n\\n/*  */\\n\\n/*  */\\n\\n// inline hooks to be invoked on component VNodes during patch\\nvar componentVNodeHooks = {\\n  init: function init(vnode, hydrating, parentElm, refElm) {\\n    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {\\n      // kept-alive components, treat as a patch\\n      var mountedNode = vnode; // work around flow\\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\\n    } else {\\n      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);\\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\\n    }\\n  },\\n\\n  prepatch: function prepatch(oldVnode, vnode) {\\n    var options = vnode.componentOptions;\\n    var child = vnode.componentInstance = oldVnode.componentInstance;\\n    updateChildComponent(child, options.propsData, // updated props\\n    options.listeners, // updated listeners\\n    vnode, // new parent vnode\\n    options.children // new children\\n    );\\n  },\\n\\n  insert: function insert(vnode) {\\n    var context = vnode.context;\\n    var componentInstance = vnode.componentInstance;\\n    if (!componentInstance._isMounted) {\\n      componentInstance._isMounted = true;\\n      callHook(componentInstance, 'mounted');\\n    }\\n    if (vnode.data.keepAlive) {\\n      if (context._isMounted) {\\n        // vue-router#1212\\n        // During updates, a kept-alive component's child components may\\n        // change, so directly walking the tree here may call activated hooks\\n        // on incorrect children. Instead we push them into a queue which will\\n        // be processed after the whole patch process ended.\\n        queueActivatedComponent(componentInstance);\\n      } else {\\n        activateChildComponent(componentInstance, true /* direct */);\\n      }\\n    }\\n  },\\n\\n  destroy: function destroy(vnode) {\\n    var componentInstance = vnode.componentInstance;\\n    if (!componentInstance._isDestroyed) {\\n      if (!vnode.data.keepAlive) {\\n        componentInstance.$destroy();\\n      } else {\\n        deactivateChildComponent(componentInstance, true /* direct */);\\n      }\\n    }\\n  }\\n};\\n\\nvar hooksToMerge = Object.keys(componentVNodeHooks);\\n\\nfunction createComponent(Ctor, data, context, children, tag) {\\n  if (isUndef(Ctor)) {\\n    return;\\n  }\\n\\n  var baseCtor = context.$options._base;\\n\\n  // plain options object: turn it into a constructor\\n  if (isObject(Ctor)) {\\n    Ctor = baseCtor.extend(Ctor);\\n  }\\n\\n  // if at this stage it's not a constructor or an async component factory,\\n  // reject.\\n  if (typeof Ctor !== 'function') {\\n    if (true) {\\n      warn(\\\"Invalid Component definition: \\\" + String(Ctor), context);\\n    }\\n    return;\\n  }\\n\\n  // async component\\n  var asyncFactory;\\n  if (isUndef(Ctor.cid)) {\\n    asyncFactory = Ctor;\\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\\n    if (Ctor === undefined) {\\n      // return a placeholder node for async component, which is rendered\\n      // as a comment node but preserves all the raw information for the node.\\n      // the information will be used for async server-rendering and hydration.\\n      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);\\n    }\\n  }\\n\\n  data = data || {};\\n\\n  // resolve constructor options in case global mixins are applied after\\n  // component constructor creation\\n  resolveConstructorOptions(Ctor);\\n\\n  // transform component v-model data into props & events\\n  if (isDef(data.model)) {\\n    transformModel(Ctor.options, data);\\n  }\\n\\n  // extract props\\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\\n\\n  // functional component\\n  if (isTrue(Ctor.options.functional)) {\\n    return createFunctionalComponent(Ctor, propsData, data, context, children);\\n  }\\n\\n  // extract listeners, since these needs to be treated as\\n  // child component listeners instead of DOM listeners\\n  var listeners = data.on;\\n  // replace with listeners with .native modifier\\n  // so it gets processed during parent component patch.\\n  data.on = data.nativeOn;\\n\\n  if (isTrue(Ctor.options.abstract)) {\\n    // abstract components do not keep anything\\n    // other than props & listeners & slot\\n\\n    // work around flow\\n    var slot = data.slot;\\n    data = {};\\n    if (slot) {\\n      data.slot = slot;\\n    }\\n  }\\n\\n  // install component management hooks onto the placeholder node\\n  installComponentHooks(data);\\n\\n  // return a placeholder vnode\\n  var name = Ctor.options.name || tag;\\n  var vnode = new VNode(\\\"vue-component-\\\" + Ctor.cid + (name ? \\\"-\\\" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);\\n\\n  // Weex specific: invoke recycle-list optimized @render function for\\n  // extracting cell-slot template.\\n  // https://github.com/Hanks10100/weex-native-directive/tree/master/component\\n  /* istanbul ignore if */\\n  return vnode;\\n}\\n\\nfunction createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't\\nparent, // activeInstance in lifecycle state\\nparentElm, refElm) {\\n  var options = {\\n    _isComponent: true,\\n    parent: parent,\\n    _parentVnode: vnode,\\n    _parentElm: parentElm || null,\\n    _refElm: refElm || null\\n  };\\n  // check inline-template render functions\\n  var inlineTemplate = vnode.data.inlineTemplate;\\n  if (isDef(inlineTemplate)) {\\n    options.render = inlineTemplate.render;\\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\\n  }\\n  return new vnode.componentOptions.Ctor(options);\\n}\\n\\nfunction installComponentHooks(data) {\\n  var hooks = data.hook || (data.hook = {});\\n  for (var i = 0; i < hooksToMerge.length; i++) {\\n    var key = hooksToMerge[i];\\n    hooks[key] = componentVNodeHooks[key];\\n  }\\n}\\n\\n// transform component v-model info (value and callback) into\\n// prop and event handler respectively.\\nfunction transformModel(options, data) {\\n  var prop = options.model && options.model.prop || 'value';\\n  var event = options.model && options.model.event || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\\n  var on = data.on || (data.on = {});\\n  if (isDef(on[event])) {\\n    on[event] = [data.model.callback].concat(on[event]);\\n  } else {\\n    on[event] = data.model.callback;\\n  }\\n}\\n\\n/*  */\\n\\nvar SIMPLE_NORMALIZE = 1;\\nvar ALWAYS_NORMALIZE = 2;\\n\\n// wrapper function for providing a more flexible interface\\n// without getting yelled at by flow\\nfunction createElement(context, tag, data, children, normalizationType, alwaysNormalize) {\\n  if (Array.isArray(data) || isPrimitive(data)) {\\n    normalizationType = children;\\n    children = data;\\n    data = undefined;\\n  }\\n  if (isTrue(alwaysNormalize)) {\\n    normalizationType = ALWAYS_NORMALIZE;\\n  }\\n  return _createElement(context, tag, data, children, normalizationType);\\n}\\n\\nfunction _createElement(context, tag, data, children, normalizationType) {\\n  if (isDef(data) && isDef(data.__ob__)) {\\n    \\\"development\\\" !== 'production' && warn(\\\"Avoid using observed data object as vnode data: \\\" + JSON.stringify(data) + \\\"\\\\n\\\" + 'Always create fresh vnode data objects in each render!', context);\\n    return createEmptyVNode();\\n  }\\n  // object syntax in v-bind\\n  if (isDef(data) && isDef(data.is)) {\\n    tag = data.is;\\n  }\\n  if (!tag) {\\n    // in case of component :is set to falsy value\\n    return createEmptyVNode();\\n  }\\n  // warn against non-primitive key\\n  if (\\\"development\\\" !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {\\n    {\\n      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);\\n    }\\n  }\\n  // support single function children as default scoped slot\\n  if (Array.isArray(children) && typeof children[0] === 'function') {\\n    data = data || {};\\n    data.scopedSlots = { default: children[0] };\\n    children.length = 0;\\n  }\\n  if (normalizationType === ALWAYS_NORMALIZE) {\\n    children = normalizeChildren(children);\\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\\n    children = simpleNormalizeChildren(children);\\n  }\\n  var vnode, ns;\\n  if (typeof tag === 'string') {\\n    var Ctor;\\n    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);\\n    if (config.isReservedTag(tag)) {\\n      // platform built-in elements\\n      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);\\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\\n      // component\\n      vnode = createComponent(Ctor, data, context, children, tag);\\n    } else {\\n      // unknown or unlisted namespaced elements\\n      // check at runtime because it may get assigned a namespace when its\\n      // parent normalizes children\\n      vnode = new VNode(tag, data, children, undefined, undefined, context);\\n    }\\n  } else {\\n    // direct component options / constructor\\n    vnode = createComponent(tag, data, context, children);\\n  }\\n  if (Array.isArray(vnode)) {\\n    return vnode;\\n  } else if (isDef(vnode)) {\\n    if (isDef(ns)) {\\n      applyNS(vnode, ns);\\n    }\\n    if (isDef(data)) {\\n      registerDeepBindings(data);\\n    }\\n    return vnode;\\n  } else {\\n    return createEmptyVNode();\\n  }\\n}\\n\\nfunction applyNS(vnode, ns, force) {\\n  vnode.ns = ns;\\n  if (vnode.tag === 'foreignObject') {\\n    // use default namespace inside foreignObject\\n    ns = undefined;\\n    force = true;\\n  }\\n  if (isDef(vnode.children)) {\\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\\n      var child = vnode.children[i];\\n      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {\\n        applyNS(child, ns, force);\\n      }\\n    }\\n  }\\n}\\n\\n// ref #5318\\n// necessary to ensure parent re-render when deep bindings like :style and\\n// :class are used on slot nodes\\nfunction registerDeepBindings(data) {\\n  if (isObject(data.style)) {\\n    traverse(data.style);\\n  }\\n  if (isObject(data.class)) {\\n    traverse(data.class);\\n  }\\n}\\n\\n/*  */\\n\\nfunction initRender(vm) {\\n  vm._vnode = null; // the root of the child tree\\n  vm._staticTrees = null; // v-once cached trees\\n  var options = vm.$options;\\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\\n  var renderContext = parentVnode && parentVnode.context;\\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\\n  vm.$scopedSlots = emptyObject;\\n  // bind the createElement fn to this instance\\n  // so that we get proper render context inside it.\\n  // args order: tag, data, children, normalizationType, alwaysNormalize\\n  // internal version is used by render functions compiled from templates\\n  vm._c = function (a, b, c, d) {\\n    return createElement(vm, a, b, c, d, false);\\n  };\\n  // normalization is always applied for the public version, used in\\n  // user-written render functions.\\n  vm.$createElement = function (a, b, c, d) {\\n    return createElement(vm, a, b, c, d, true);\\n  };\\n\\n  // $attrs & $listeners are exposed for easier HOC creation.\\n  // they need to be reactive so that HOCs using them are always updated\\n  var parentData = parentVnode && parentVnode.data;\\n\\n  /* istanbul ignore else */\\n  if (true) {\\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\\n      !isUpdatingChildComponent && warn(\\\"$attrs is readonly.\\\", vm);\\n    }, true);\\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {\\n      !isUpdatingChildComponent && warn(\\\"$listeners is readonly.\\\", vm);\\n    }, true);\\n  } else {\\n    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\\n    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, null, true);\\n  }\\n}\\n\\nfunction renderMixin(Vue) {\\n  // install runtime convenience helpers\\n  installRenderHelpers(Vue.prototype);\\n\\n  Vue.prototype.$nextTick = function (fn) {\\n    return nextTick(fn, this);\\n  };\\n\\n  Vue.prototype._render = function () {\\n    var vm = this;\\n    var ref = vm.$options;\\n    var render = ref.render;\\n    var _parentVnode = ref._parentVnode;\\n\\n    // reset _rendered flag on slots for duplicate slot check\\n    if (true) {\\n      for (var key in vm.$slots) {\\n        // $flow-disable-line\\n        vm.$slots[key]._rendered = false;\\n      }\\n    }\\n\\n    if (_parentVnode) {\\n      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;\\n    }\\n\\n    // set parent vnode. this allows render functions to have access\\n    // to the data on the placeholder node.\\n    vm.$vnode = _parentVnode;\\n    // render self\\n    var vnode;\\n    try {\\n      vnode = render.call(vm._renderProxy, vm.$createElement);\\n    } catch (e) {\\n      handleError(e, vm, \\\"render\\\");\\n      // return error render result,\\n      // or previous vnode to prevent render error causing blank component\\n      /* istanbul ignore else */\\n      if (true) {\\n        if (vm.$options.renderError) {\\n          try {\\n            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\\n          } catch (e) {\\n            handleError(e, vm, \\\"renderError\\\");\\n            vnode = vm._vnode;\\n          }\\n        } else {\\n          vnode = vm._vnode;\\n        }\\n      } else {\\n        vnode = vm._vnode;\\n      }\\n    }\\n    // return empty vnode in case the render function errored out\\n    if (!(vnode instanceof VNode)) {\\n      if (\\\"development\\\" !== 'production' && Array.isArray(vnode)) {\\n        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);\\n      }\\n      vnode = createEmptyVNode();\\n    }\\n    // set parent\\n    vnode.parent = _parentVnode;\\n    return vnode;\\n  };\\n}\\n\\n/*  */\\n\\nvar uid$3 = 0;\\n\\nfunction initMixin(Vue) {\\n  Vue.prototype._init = function (options) {\\n    var vm = this;\\n    // a uid\\n    vm._uid = uid$3++;\\n\\n    var startTag, endTag;\\n    /* istanbul ignore if */\\n    if (\\\"development\\\" !== 'production' && config.performance && mark) {\\n      startTag = \\\"vue-perf-start:\\\" + vm._uid;\\n      endTag = \\\"vue-perf-end:\\\" + vm._uid;\\n      mark(startTag);\\n    }\\n\\n    // a flag to avoid this being observed\\n    vm._isVue = true;\\n    // merge options\\n    if (options && options._isComponent) {\\n      // optimize internal component instantiation\\n      // since dynamic options merging is pretty slow, and none of the\\n      // internal component options needs special treatment.\\n      initInternalComponent(vm, options);\\n    } else {\\n      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);\\n    }\\n    /* istanbul ignore else */\\n    if (true) {\\n      initProxy(vm);\\n    } else {\\n      vm._renderProxy = vm;\\n    }\\n    // expose real self\\n    vm._self = vm;\\n    initLifecycle(vm);\\n    initEvents(vm);\\n    initRender(vm);\\n    callHook(vm, 'beforeCreate');\\n    initInjections(vm); // resolve injections before data/props\\n    initState(vm);\\n    initProvide(vm); // resolve provide after data/props\\n    callHook(vm, 'created');\\n\\n    /* istanbul ignore if */\\n    if (\\\"development\\\" !== 'production' && config.performance && mark) {\\n      vm._name = formatComponentName(vm, false);\\n      mark(endTag);\\n      measure(\\\"vue \\\" + vm._name + \\\" init\\\", startTag, endTag);\\n    }\\n\\n    if (vm.$options.el) {\\n      vm.$mount(vm.$options.el);\\n    }\\n  };\\n}\\n\\nfunction initInternalComponent(vm, options) {\\n  var opts = vm.$options = Object.create(vm.constructor.options);\\n  // doing this because it's faster than dynamic enumeration.\\n  var parentVnode = options._parentVnode;\\n  opts.parent = options.parent;\\n  opts._parentVnode = parentVnode;\\n  opts._parentElm = options._parentElm;\\n  opts._refElm = options._refElm;\\n\\n  var vnodeComponentOptions = parentVnode.componentOptions;\\n  opts.propsData = vnodeComponentOptions.propsData;\\n  opts._parentListeners = vnodeComponentOptions.listeners;\\n  opts._renderChildren = vnodeComponentOptions.children;\\n  opts._componentTag = vnodeComponentOptions.tag;\\n\\n  if (options.render) {\\n    opts.render = options.render;\\n    opts.staticRenderFns = options.staticRenderFns;\\n  }\\n}\\n\\nfunction resolveConstructorOptions(Ctor) {\\n  var options = Ctor.options;\\n  if (Ctor.super) {\\n    var superOptions = resolveConstructorOptions(Ctor.super);\\n    var cachedSuperOptions = Ctor.superOptions;\\n    if (superOptions !== cachedSuperOptions) {\\n      // super option changed,\\n      // need to resolve new options.\\n      Ctor.superOptions = superOptions;\\n      // check if there are any late-modified/attached options (#4976)\\n      var modifiedOptions = resolveModifiedOptions(Ctor);\\n      // update base extend options\\n      if (modifiedOptions) {\\n        extend(Ctor.extendOptions, modifiedOptions);\\n      }\\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\\n      if (options.name) {\\n        options.components[options.name] = Ctor;\\n      }\\n    }\\n  }\\n  return options;\\n}\\n\\nfunction resolveModifiedOptions(Ctor) {\\n  var modified;\\n  var latest = Ctor.options;\\n  var extended = Ctor.extendOptions;\\n  var sealed = Ctor.sealedOptions;\\n  for (var key in latest) {\\n    if (latest[key] !== sealed[key]) {\\n      if (!modified) {\\n        modified = {};\\n      }\\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\\n    }\\n  }\\n  return modified;\\n}\\n\\nfunction dedupe(latest, extended, sealed) {\\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\\n  // between merges\\n  if (Array.isArray(latest)) {\\n    var res = [];\\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\\n    extended = Array.isArray(extended) ? extended : [extended];\\n    for (var i = 0; i < latest.length; i++) {\\n      // push original options and not sealed options to exclude duplicated options\\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\\n        res.push(latest[i]);\\n      }\\n    }\\n    return res;\\n  } else {\\n    return latest;\\n  }\\n}\\n\\nfunction Vue(options) {\\n  if (\\\"development\\\" !== 'production' && !(this instanceof Vue)) {\\n    warn('Vue is a constructor and should be called with the `new` keyword');\\n  }\\n  this._init(options);\\n}\\n\\ninitMixin(Vue);\\nstateMixin(Vue);\\neventsMixin(Vue);\\nlifecycleMixin(Vue);\\nrenderMixin(Vue);\\n\\n/*  */\\n\\nfunction initUse(Vue) {\\n  Vue.use = function (plugin) {\\n    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);\\n    if (installedPlugins.indexOf(plugin) > -1) {\\n      return this;\\n    }\\n\\n    // additional parameters\\n    var args = toArray(arguments, 1);\\n    args.unshift(this);\\n    if (typeof plugin.install === 'function') {\\n      plugin.install.apply(plugin, args);\\n    } else if (typeof plugin === 'function') {\\n      plugin.apply(null, args);\\n    }\\n    installedPlugins.push(plugin);\\n    return this;\\n  };\\n}\\n\\n/*  */\\n\\nfunction initMixin$1(Vue) {\\n  Vue.mixin = function (mixin) {\\n    this.options = mergeOptions(this.options, mixin);\\n    return this;\\n  };\\n}\\n\\n/*  */\\n\\nfunction initExtend(Vue) {\\n  /**\\n   * Each instance constructor, including Vue, has a unique\\n   * cid. This enables us to create wrapped \\\"child\\n   * constructors\\\" for prototypal inheritance and cache them.\\n   */\\n  Vue.cid = 0;\\n  var cid = 1;\\n\\n  /**\\n   * Class inheritance\\n   */\\n  Vue.extend = function (extendOptions) {\\n    extendOptions = extendOptions || {};\\n    var Super = this;\\n    var SuperId = Super.cid;\\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\\n    if (cachedCtors[SuperId]) {\\n      return cachedCtors[SuperId];\\n    }\\n\\n    var name = extendOptions.name || Super.options.name;\\n    if (\\\"development\\\" !== 'production' && name) {\\n      validateComponentName(name);\\n    }\\n\\n    var Sub = function VueComponent(options) {\\n      this._init(options);\\n    };\\n    Sub.prototype = Object.create(Super.prototype);\\n    Sub.prototype.constructor = Sub;\\n    Sub.cid = cid++;\\n    Sub.options = mergeOptions(Super.options, extendOptions);\\n    Sub['super'] = Super;\\n\\n    // For props and computed properties, we define the proxy getters on\\n    // the Vue instances at extension time, on the extended prototype. This\\n    // avoids Object.defineProperty calls for each instance created.\\n    if (Sub.options.props) {\\n      initProps$1(Sub);\\n    }\\n    if (Sub.options.computed) {\\n      initComputed$1(Sub);\\n    }\\n\\n    // allow further extension/mixin/plugin usage\\n    Sub.extend = Super.extend;\\n    Sub.mixin = Super.mixin;\\n    Sub.use = Super.use;\\n\\n    // create asset registers, so extended classes\\n    // can have their private assets too.\\n    ASSET_TYPES.forEach(function (type) {\\n      Sub[type] = Super[type];\\n    });\\n    // enable recursive self-lookup\\n    if (name) {\\n      Sub.options.components[name] = Sub;\\n    }\\n\\n    // keep a reference to the super options at extension time.\\n    // later at instantiation we can check if Super's options have\\n    // been updated.\\n    Sub.superOptions = Super.options;\\n    Sub.extendOptions = extendOptions;\\n    Sub.sealedOptions = extend({}, Sub.options);\\n\\n    // cache constructor\\n    cachedCtors[SuperId] = Sub;\\n    return Sub;\\n  };\\n}\\n\\nfunction initProps$1(Comp) {\\n  var props = Comp.options.props;\\n  for (var key in props) {\\n    proxy(Comp.prototype, \\\"_props\\\", key);\\n  }\\n}\\n\\nfunction initComputed$1(Comp) {\\n  var computed = Comp.options.computed;\\n  for (var key in computed) {\\n    defineComputed(Comp.prototype, key, computed[key]);\\n  }\\n}\\n\\n/*  */\\n\\nfunction initAssetRegisters(Vue) {\\n  /**\\n   * Create asset registration methods.\\n   */\\n  ASSET_TYPES.forEach(function (type) {\\n    Vue[type] = function (id, definition) {\\n      if (!definition) {\\n        return this.options[type + 's'][id];\\n      } else {\\n        /* istanbul ignore if */\\n        if (\\\"development\\\" !== 'production' && type === 'component') {\\n          validateComponentName(id);\\n        }\\n        if (type === 'component' && isPlainObject(definition)) {\\n          definition.name = definition.name || id;\\n          definition = this.options._base.extend(definition);\\n        }\\n        if (type === 'directive' && typeof definition === 'function') {\\n          definition = { bind: definition, update: definition };\\n        }\\n        this.options[type + 's'][id] = definition;\\n        return definition;\\n      }\\n    };\\n  });\\n}\\n\\n/*  */\\n\\nfunction getComponentName(opts) {\\n  return opts && (opts.Ctor.options.name || opts.tag);\\n}\\n\\nfunction matches(pattern, name) {\\n  if (Array.isArray(pattern)) {\\n    return pattern.indexOf(name) > -1;\\n  } else if (typeof pattern === 'string') {\\n    return pattern.split(',').indexOf(name) > -1;\\n  } else if (isRegExp(pattern)) {\\n    return pattern.test(name);\\n  }\\n  /* istanbul ignore next */\\n  return false;\\n}\\n\\nfunction pruneCache(keepAliveInstance, filter) {\\n  var cache = keepAliveInstance.cache;\\n  var keys = keepAliveInstance.keys;\\n  var _vnode = keepAliveInstance._vnode;\\n  for (var key in cache) {\\n    var cachedNode = cache[key];\\n    if (cachedNode) {\\n      var name = getComponentName(cachedNode.componentOptions);\\n      if (name && !filter(name)) {\\n        pruneCacheEntry(cache, key, keys, _vnode);\\n      }\\n    }\\n  }\\n}\\n\\nfunction pruneCacheEntry(cache, key, keys, current) {\\n  var cached$$1 = cache[key];\\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\\n    cached$$1.componentInstance.$destroy();\\n  }\\n  cache[key] = null;\\n  remove(keys, key);\\n}\\n\\nvar patternTypes = [String, RegExp, Array];\\n\\nvar KeepAlive = {\\n  name: 'keep-alive',\\n  abstract: true,\\n\\n  props: {\\n    include: patternTypes,\\n    exclude: patternTypes,\\n    max: [String, Number]\\n  },\\n\\n  created: function created() {\\n    this.cache = Object.create(null);\\n    this.keys = [];\\n  },\\n\\n  destroyed: function destroyed() {\\n    var this$1 = this;\\n\\n    for (var key in this$1.cache) {\\n      pruneCacheEntry(this$1.cache, key, this$1.keys);\\n    }\\n  },\\n\\n  mounted: function mounted() {\\n    var this$1 = this;\\n\\n    this.$watch('include', function (val) {\\n      pruneCache(this$1, function (name) {\\n        return matches(val, name);\\n      });\\n    });\\n    this.$watch('exclude', function (val) {\\n      pruneCache(this$1, function (name) {\\n        return !matches(val, name);\\n      });\\n    });\\n  },\\n\\n  render: function render() {\\n    var slot = this.$slots.default;\\n    var vnode = getFirstComponentChild(slot);\\n    var componentOptions = vnode && vnode.componentOptions;\\n    if (componentOptions) {\\n      // check pattern\\n      var name = getComponentName(componentOptions);\\n      var ref = this;\\n      var include = ref.include;\\n      var exclude = ref.exclude;\\n      if (\\n      // not included\\n      include && (!name || !matches(include, name)) ||\\n      // excluded\\n      exclude && name && matches(exclude, name)) {\\n        return vnode;\\n      }\\n\\n      var ref$1 = this;\\n      var cache = ref$1.cache;\\n      var keys = ref$1.keys;\\n      var key = vnode.key == null\\n      // same constructor may get registered as different local components\\n      // so cid alone is not enough (#3269)\\n      ? componentOptions.Ctor.cid + (componentOptions.tag ? \\\"::\\\" + componentOptions.tag : '') : vnode.key;\\n      if (cache[key]) {\\n        vnode.componentInstance = cache[key].componentInstance;\\n        // make current key freshest\\n        remove(keys, key);\\n        keys.push(key);\\n      } else {\\n        cache[key] = vnode;\\n        keys.push(key);\\n        // prune oldest entry\\n        if (this.max && keys.length > parseInt(this.max)) {\\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\\n        }\\n      }\\n\\n      vnode.data.keepAlive = true;\\n    }\\n    return vnode || slot && slot[0];\\n  }\\n};\\n\\nvar builtInComponents = {\\n  KeepAlive: KeepAlive\\n\\n  /*  */\\n\\n};function initGlobalAPI(Vue) {\\n  // config\\n  var configDef = {};\\n  configDef.get = function () {\\n    return config;\\n  };\\n  if (true) {\\n    configDef.set = function () {\\n      warn('Do not replace the Vue.config object, set individual fields instead.');\\n    };\\n  }\\n  Object.defineProperty(Vue, 'config', configDef);\\n\\n  // exposed util methods.\\n  // NOTE: these are not considered part of the public API - avoid relying on\\n  // them unless you are aware of the risk.\\n  Vue.util = {\\n    warn: warn,\\n    extend: extend,\\n    mergeOptions: mergeOptions,\\n    defineReactive: defineReactive\\n  };\\n\\n  Vue.set = set;\\n  Vue.delete = del;\\n  Vue.nextTick = nextTick;\\n\\n  Vue.options = Object.create(null);\\n  ASSET_TYPES.forEach(function (type) {\\n    Vue.options[type + 's'] = Object.create(null);\\n  });\\n\\n  // this is used to identify the \\\"base\\\" constructor to extend all plain-object\\n  // components with in Weex's multi-instance scenarios.\\n  Vue.options._base = Vue;\\n\\n  extend(Vue.options.components, builtInComponents);\\n\\n  initUse(Vue);\\n  initMixin$1(Vue);\\n  initExtend(Vue);\\n  initAssetRegisters(Vue);\\n}\\n\\ninitGlobalAPI(Vue);\\n\\nObject.defineProperty(Vue.prototype, '$isServer', {\\n  get: isServerRendering\\n});\\n\\nObject.defineProperty(Vue.prototype, '$ssrContext', {\\n  get: function get() {\\n    /* istanbul ignore next */\\n    return this.$vnode && this.$vnode.ssrContext;\\n  }\\n});\\n\\n// expose FunctionalRenderContext for ssr runtime helper installation\\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\\n  value: FunctionalRenderContext\\n});\\n\\nVue.version = '2.5.17';\\n\\n/*  */\\n\\n// these are reserved for web because they are directly compiled away\\n// during template compilation\\nvar isReservedAttr = makeMap('style,class');\\n\\n// attributes that should be using props for binding\\nvar acceptValue = makeMap('input,textarea,option,select,progress');\\nvar mustUseProp = function (tag, type, attr) {\\n  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';\\n};\\n\\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\\n\\nvar isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');\\n\\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\\n\\nvar isXlink = function (name) {\\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';\\n};\\n\\nvar getXlinkProp = function (name) {\\n  return isXlink(name) ? name.slice(6, name.length) : '';\\n};\\n\\nvar isFalsyAttrValue = function (val) {\\n  return val == null || val === false;\\n};\\n\\n/*  */\\n\\nfunction genClassForVnode(vnode) {\\n  var data = vnode.data;\\n  var parentNode = vnode;\\n  var childNode = vnode;\\n  while (isDef(childNode.componentInstance)) {\\n    childNode = childNode.componentInstance._vnode;\\n    if (childNode && childNode.data) {\\n      data = mergeClassData(childNode.data, data);\\n    }\\n  }\\n  while (isDef(parentNode = parentNode.parent)) {\\n    if (parentNode && parentNode.data) {\\n      data = mergeClassData(data, parentNode.data);\\n    }\\n  }\\n  return renderClass(data.staticClass, data.class);\\n}\\n\\nfunction mergeClassData(child, parent) {\\n  return {\\n    staticClass: concat(child.staticClass, parent.staticClass),\\n    class: isDef(child.class) ? [child.class, parent.class] : parent.class\\n  };\\n}\\n\\nfunction renderClass(staticClass, dynamicClass) {\\n  if (isDef(staticClass) || isDef(dynamicClass)) {\\n    return concat(staticClass, stringifyClass(dynamicClass));\\n  }\\n  /* istanbul ignore next */\\n  return '';\\n}\\n\\nfunction concat(a, b) {\\n  return a ? b ? a + ' ' + b : a : b || '';\\n}\\n\\nfunction stringifyClass(value) {\\n  if (Array.isArray(value)) {\\n    return stringifyArray(value);\\n  }\\n  if (isObject(value)) {\\n    return stringifyObject(value);\\n  }\\n  if (typeof value === 'string') {\\n    return value;\\n  }\\n  /* istanbul ignore next */\\n  return '';\\n}\\n\\nfunction stringifyArray(value) {\\n  var res = '';\\n  var stringified;\\n  for (var i = 0, l = value.length; i < l; i++) {\\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\\n      if (res) {\\n        res += ' ';\\n      }\\n      res += stringified;\\n    }\\n  }\\n  return res;\\n}\\n\\nfunction stringifyObject(value) {\\n  var res = '';\\n  for (var key in value) {\\n    if (value[key]) {\\n      if (res) {\\n        res += ' ';\\n      }\\n      res += key;\\n    }\\n  }\\n  return res;\\n}\\n\\n/*  */\\n\\nvar namespaceMap = {\\n  svg: 'http://www.w3.org/2000/svg',\\n  math: 'http://www.w3.org/1998/Math/MathML'\\n};\\n\\nvar isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot');\\n\\n// this map is intentionally selective, only covering SVG elements that may\\n// contain child elements.\\nvar isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);\\n\\nvar isPreTag = function (tag) {\\n  return tag === 'pre';\\n};\\n\\nvar isReservedTag = function (tag) {\\n  return isHTMLTag(tag) || isSVG(tag);\\n};\\n\\nfunction getTagNamespace(tag) {\\n  if (isSVG(tag)) {\\n    return 'svg';\\n  }\\n  // basic support for MathML\\n  // note it doesn't support other MathML elements being component roots\\n  if (tag === 'math') {\\n    return 'math';\\n  }\\n}\\n\\nvar unknownElementCache = Object.create(null);\\nfunction isUnknownElement(tag) {\\n  /* istanbul ignore if */\\n  if (!inBrowser) {\\n    return true;\\n  }\\n  if (isReservedTag(tag)) {\\n    return false;\\n  }\\n  tag = tag.toLowerCase();\\n  /* istanbul ignore if */\\n  if (unknownElementCache[tag] != null) {\\n    return unknownElementCache[tag];\\n  }\\n  var el = document.createElement(tag);\\n  if (tag.indexOf('-') > -1) {\\n    // http://stackoverflow.com/a/28210364/1070244\\n    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\\n  } else {\\n    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());\\n  }\\n}\\n\\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\\n\\n/*  */\\n\\n/**\\n * Query an element selector if it's not an element already.\\n */\\nfunction query(el) {\\n  if (typeof el === 'string') {\\n    var selected = document.querySelector(el);\\n    if (!selected) {\\n      \\\"development\\\" !== 'production' && warn('Cannot find element: ' + el);\\n      return document.createElement('div');\\n    }\\n    return selected;\\n  } else {\\n    return el;\\n  }\\n}\\n\\n/*  */\\n\\nfunction createElement$1(tagName, vnode) {\\n  var elm = document.createElement(tagName);\\n  if (tagName !== 'select') {\\n    return elm;\\n  }\\n  // false or null will remove the attribute but undefined will not\\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\\n    elm.setAttribute('multiple', 'multiple');\\n  }\\n  return elm;\\n}\\n\\nfunction createElementNS(namespace, tagName) {\\n  return document.createElementNS(namespaceMap[namespace], tagName);\\n}\\n\\nfunction createTextNode(text) {\\n  return document.createTextNode(text);\\n}\\n\\nfunction createComment(text) {\\n  return document.createComment(text);\\n}\\n\\nfunction insertBefore(parentNode, newNode, referenceNode) {\\n  parentNode.insertBefore(newNode, referenceNode);\\n}\\n\\nfunction removeChild(node, child) {\\n  node.removeChild(child);\\n}\\n\\nfunction appendChild(node, child) {\\n  node.appendChild(child);\\n}\\n\\nfunction parentNode(node) {\\n  return node.parentNode;\\n}\\n\\nfunction nextSibling(node) {\\n  return node.nextSibling;\\n}\\n\\nfunction tagName(node) {\\n  return node.tagName;\\n}\\n\\nfunction setTextContent(node, text) {\\n  node.textContent = text;\\n}\\n\\nfunction setStyleScope(node, scopeId) {\\n  node.setAttribute(scopeId, '');\\n}\\n\\nvar nodeOps = Object.freeze({\\n  createElement: createElement$1,\\n  createElementNS: createElementNS,\\n  createTextNode: createTextNode,\\n  createComment: createComment,\\n  insertBefore: insertBefore,\\n  removeChild: removeChild,\\n  appendChild: appendChild,\\n  parentNode: parentNode,\\n  nextSibling: nextSibling,\\n  tagName: tagName,\\n  setTextContent: setTextContent,\\n  setStyleScope: setStyleScope\\n});\\n\\n/*  */\\n\\nvar ref = {\\n  create: function create(_, vnode) {\\n    registerRef(vnode);\\n  },\\n  update: function update(oldVnode, vnode) {\\n    if (oldVnode.data.ref !== vnode.data.ref) {\\n      registerRef(oldVnode, true);\\n      registerRef(vnode);\\n    }\\n  },\\n  destroy: function destroy(vnode) {\\n    registerRef(vnode, true);\\n  }\\n};\\n\\nfunction registerRef(vnode, isRemoval) {\\n  var key = vnode.data.ref;\\n  if (!isDef(key)) {\\n    return;\\n  }\\n\\n  var vm = vnode.context;\\n  var ref = vnode.componentInstance || vnode.elm;\\n  var refs = vm.$refs;\\n  if (isRemoval) {\\n    if (Array.isArray(refs[key])) {\\n      remove(refs[key], ref);\\n    } else if (refs[key] === ref) {\\n      refs[key] = undefined;\\n    }\\n  } else {\\n    if (vnode.data.refInFor) {\\n      if (!Array.isArray(refs[key])) {\\n        refs[key] = [ref];\\n      } else if (refs[key].indexOf(ref) < 0) {\\n        // $flow-disable-line\\n        refs[key].push(ref);\\n      }\\n    } else {\\n      refs[key] = ref;\\n    }\\n  }\\n}\\n\\n/**\\n * Virtual DOM patching algorithm based on Snabbdom by\\n * Simon Friis Vindum (@paldepind)\\n * Licensed under the MIT License\\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\\n *\\n * modified by Evan You (@yyx990803)\\n *\\n * Not type-checking this because this file is perf-critical and the cost\\n * of making flow understand it is not worth it.\\n */\\n\\nvar emptyNode = new VNode('', {}, []);\\n\\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\\n\\nfunction sameVnode(a, b) {\\n  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));\\n}\\n\\nfunction sameInputType(a, b) {\\n  if (a.tag !== 'input') {\\n    return true;\\n  }\\n  var i;\\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);\\n}\\n\\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\\n  var i, key;\\n  var map = {};\\n  for (i = beginIdx; i <= endIdx; ++i) {\\n    key = children[i].key;\\n    if (isDef(key)) {\\n      map[key] = i;\\n    }\\n  }\\n  return map;\\n}\\n\\nfunction createPatchFunction(backend) {\\n  var i, j;\\n  var cbs = {};\\n\\n  var modules = backend.modules;\\n  var nodeOps = backend.nodeOps;\\n\\n  for (i = 0; i < hooks.length; ++i) {\\n    cbs[hooks[i]] = [];\\n    for (j = 0; j < modules.length; ++j) {\\n      if (isDef(modules[j][hooks[i]])) {\\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\\n      }\\n    }\\n  }\\n\\n  function emptyNodeAt(elm) {\\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);\\n  }\\n\\n  function createRmCb(childElm, listeners) {\\n    function remove() {\\n      if (--remove.listeners === 0) {\\n        removeNode(childElm);\\n      }\\n    }\\n    remove.listeners = listeners;\\n    return remove;\\n  }\\n\\n  function removeNode(el) {\\n    var parent = nodeOps.parentNode(el);\\n    // element may have already been removed due to v-html / v-text\\n    if (isDef(parent)) {\\n      nodeOps.removeChild(parent, el);\\n    }\\n  }\\n\\n  function isUnknownElement$$1(vnode, inVPre) {\\n    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {\\n      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;\\n    })) && config.isUnknownElement(vnode.tag);\\n  }\\n\\n  var creatingElmInVPre = 0;\\n\\n  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {\\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\\n      // This vnode was used in a previous render!\\n      // now it's used as a new node, overwriting its elm would cause\\n      // potential patch errors down the road when it's used as an insertion\\n      // reference node. Instead, we clone the node on-demand before creating\\n      // associated DOM element for it.\\n      vnode = ownerArray[index] = cloneVNode(vnode);\\n    }\\n\\n    vnode.isRootInsert = !nested; // for transition enter check\\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\\n      return;\\n    }\\n\\n    var data = vnode.data;\\n    var children = vnode.children;\\n    var tag = vnode.tag;\\n    if (isDef(tag)) {\\n      if (true) {\\n        if (data && data.pre) {\\n          creatingElmInVPre++;\\n        }\\n        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \\\"name\\\" option.', vnode.context);\\n        }\\n      }\\n\\n      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);\\n      setScope(vnode);\\n\\n      /* istanbul ignore if */\\n      {\\n        createChildren(vnode, children, insertedVnodeQueue);\\n        if (isDef(data)) {\\n          invokeCreateHooks(vnode, insertedVnodeQueue);\\n        }\\n        insert(parentElm, vnode.elm, refElm);\\n      }\\n\\n      if (\\\"development\\\" !== 'production' && data && data.pre) {\\n        creatingElmInVPre--;\\n      }\\n    } else if (isTrue(vnode.isComment)) {\\n      vnode.elm = nodeOps.createComment(vnode.text);\\n      insert(parentElm, vnode.elm, refElm);\\n    } else {\\n      vnode.elm = nodeOps.createTextNode(vnode.text);\\n      insert(parentElm, vnode.elm, refElm);\\n    }\\n  }\\n\\n  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\\n    var i = vnode.data;\\n    if (isDef(i)) {\\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\\n        i(vnode, false /* hydrating */, parentElm, refElm);\\n      }\\n      // after calling the init hook, if the vnode is a child component\\n      // it should've created a child instance and mounted it. the child\\n      // component also has set the placeholder vnode's elm.\\n      // in that case we can just return the element and be done.\\n      if (isDef(vnode.componentInstance)) {\\n        initComponent(vnode, insertedVnodeQueue);\\n        if (isTrue(isReactivated)) {\\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\\n        }\\n        return true;\\n      }\\n    }\\n  }\\n\\n  function initComponent(vnode, insertedVnodeQueue) {\\n    if (isDef(vnode.data.pendingInsert)) {\\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\\n      vnode.data.pendingInsert = null;\\n    }\\n    vnode.elm = vnode.componentInstance.$el;\\n    if (isPatchable(vnode)) {\\n      invokeCreateHooks(vnode, insertedVnodeQueue);\\n      setScope(vnode);\\n    } else {\\n      // empty component root.\\n      // skip all element-related modules except for ref (#3455)\\n      registerRef(vnode);\\n      // make sure to invoke the insert hook\\n      insertedVnodeQueue.push(vnode);\\n    }\\n  }\\n\\n  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {\\n    var i;\\n    // hack for #4339: a reactivated component with inner transition\\n    // does not trigger because the inner node's created hooks are not called\\n    // again. It's not ideal to involve module-specific logic in here but\\n    // there doesn't seem to be a better way to do it.\\n    var innerNode = vnode;\\n    while (innerNode.componentInstance) {\\n      innerNode = innerNode.componentInstance._vnode;\\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\\n        for (i = 0; i < cbs.activate.length; ++i) {\\n          cbs.activate[i](emptyNode, innerNode);\\n        }\\n        insertedVnodeQueue.push(innerNode);\\n        break;\\n      }\\n    }\\n    // unlike a newly created component,\\n    // a reactivated keep-alive component doesn't insert itself\\n    insert(parentElm, vnode.elm, refElm);\\n  }\\n\\n  function insert(parent, elm, ref$$1) {\\n    if (isDef(parent)) {\\n      if (isDef(ref$$1)) {\\n        if (ref$$1.parentNode === parent) {\\n          nodeOps.insertBefore(parent, elm, ref$$1);\\n        }\\n      } else {\\n        nodeOps.appendChild(parent, elm);\\n      }\\n    }\\n  }\\n\\n  function createChildren(vnode, children, insertedVnodeQueue) {\\n    if (Array.isArray(children)) {\\n      if (true) {\\n        checkDuplicateKeys(children);\\n      }\\n      for (var i = 0; i < children.length; ++i) {\\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\\n      }\\n    } else if (isPrimitive(vnode.text)) {\\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\\n    }\\n  }\\n\\n  function isPatchable(vnode) {\\n    while (vnode.componentInstance) {\\n      vnode = vnode.componentInstance._vnode;\\n    }\\n    return isDef(vnode.tag);\\n  }\\n\\n  function invokeCreateHooks(vnode, insertedVnodeQueue) {\\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\\n      cbs.create[i$1](emptyNode, vnode);\\n    }\\n    i = vnode.data.hook; // Reuse variable\\n    if (isDef(i)) {\\n      if (isDef(i.create)) {\\n        i.create(emptyNode, vnode);\\n      }\\n      if (isDef(i.insert)) {\\n        insertedVnodeQueue.push(vnode);\\n      }\\n    }\\n  }\\n\\n  // set scope id attribute for scoped CSS.\\n  // this is implemented as a special case to avoid the overhead\\n  // of going through the normal attribute patching process.\\n  function setScope(vnode) {\\n    var i;\\n    if (isDef(i = vnode.fnScopeId)) {\\n      nodeOps.setStyleScope(vnode.elm, i);\\n    } else {\\n      var ancestor = vnode;\\n      while (ancestor) {\\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\\n          nodeOps.setStyleScope(vnode.elm, i);\\n        }\\n        ancestor = ancestor.parent;\\n      }\\n    }\\n    // for slot content they should also get the scopeId from the host instance.\\n    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {\\n      nodeOps.setStyleScope(vnode.elm, i);\\n    }\\n  }\\n\\n  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\\n    for (; startIdx <= endIdx; ++startIdx) {\\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\\n    }\\n  }\\n\\n  function invokeDestroyHook(vnode) {\\n    var i, j;\\n    var data = vnode.data;\\n    if (isDef(data)) {\\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) {\\n        i(vnode);\\n      }\\n      for (i = 0; i < cbs.destroy.length; ++i) {\\n        cbs.destroy[i](vnode);\\n      }\\n    }\\n    if (isDef(i = vnode.children)) {\\n      for (j = 0; j < vnode.children.length; ++j) {\\n        invokeDestroyHook(vnode.children[j]);\\n      }\\n    }\\n  }\\n\\n  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\\n    for (; startIdx <= endIdx; ++startIdx) {\\n      var ch = vnodes[startIdx];\\n      if (isDef(ch)) {\\n        if (isDef(ch.tag)) {\\n          removeAndInvokeRemoveHook(ch);\\n          invokeDestroyHook(ch);\\n        } else {\\n          // Text node\\n          removeNode(ch.elm);\\n        }\\n      }\\n    }\\n  }\\n\\n  function removeAndInvokeRemoveHook(vnode, rm) {\\n    if (isDef(rm) || isDef(vnode.data)) {\\n      var i;\\n      var listeners = cbs.remove.length + 1;\\n      if (isDef(rm)) {\\n        // we have a recursively passed down rm callback\\n        // increase the listeners count\\n        rm.listeners += listeners;\\n      } else {\\n        // directly removing\\n        rm = createRmCb(vnode.elm, listeners);\\n      }\\n      // recursively invoke hooks on child component root node\\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\\n        removeAndInvokeRemoveHook(i, rm);\\n      }\\n      for (i = 0; i < cbs.remove.length; ++i) {\\n        cbs.remove[i](vnode, rm);\\n      }\\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\\n        i(vnode, rm);\\n      } else {\\n        rm();\\n      }\\n    } else {\\n      removeNode(vnode.elm);\\n    }\\n  }\\n\\n  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\\n    var oldStartIdx = 0;\\n    var newStartIdx = 0;\\n    var oldEndIdx = oldCh.length - 1;\\n    var oldStartVnode = oldCh[0];\\n    var oldEndVnode = oldCh[oldEndIdx];\\n    var newEndIdx = newCh.length - 1;\\n    var newStartVnode = newCh[0];\\n    var newEndVnode = newCh[newEndIdx];\\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\\n\\n    // removeOnly is a special flag used only by <transition-group>\\n    // to ensure removed elements stay in correct relative positions\\n    // during leaving transitions\\n    var canMove = !removeOnly;\\n\\n    if (true) {\\n      checkDuplicateKeys(newCh);\\n    }\\n\\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\\n      if (isUndef(oldStartVnode)) {\\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\\n      } else if (isUndef(oldEndVnode)) {\\n        oldEndVnode = oldCh[--oldEndIdx];\\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\\n        oldStartVnode = oldCh[++oldStartIdx];\\n        newStartVnode = newCh[++newStartIdx];\\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\\n        oldEndVnode = oldCh[--oldEndIdx];\\n        newEndVnode = newCh[--newEndIdx];\\n      } else if (sameVnode(oldStartVnode, newEndVnode)) {\\n        // Vnode moved right\\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\\n        oldStartVnode = oldCh[++oldStartIdx];\\n        newEndVnode = newCh[--newEndIdx];\\n      } else if (sameVnode(oldEndVnode, newStartVnode)) {\\n        // Vnode moved left\\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\\n        oldEndVnode = oldCh[--oldEndIdx];\\n        newStartVnode = newCh[++newStartIdx];\\n      } else {\\n        if (isUndef(oldKeyToIdx)) {\\n          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\\n        }\\n        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\\n        if (isUndef(idxInOld)) {\\n          // New element\\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\\n        } else {\\n          vnodeToMove = oldCh[idxInOld];\\n          if (sameVnode(vnodeToMove, newStartVnode)) {\\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);\\n            oldCh[idxInOld] = undefined;\\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\\n          } else {\\n            // same key but different element. treat as new element\\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\\n          }\\n        }\\n        newStartVnode = newCh[++newStartIdx];\\n      }\\n    }\\n    if (oldStartIdx > oldEndIdx) {\\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\\n    } else if (newStartIdx > newEndIdx) {\\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\\n    }\\n  }\\n\\n  function checkDuplicateKeys(children) {\\n    var seenKeys = {};\\n    for (var i = 0; i < children.length; i++) {\\n      var vnode = children[i];\\n      var key = vnode.key;\\n      if (isDef(key)) {\\n        if (seenKeys[key]) {\\n          warn(\\\"Duplicate keys detected: '\\\" + key + \\\"'. This may cause an update error.\\\", vnode.context);\\n        } else {\\n          seenKeys[key] = true;\\n        }\\n      }\\n    }\\n  }\\n\\n  function findIdxInOld(node, oldCh, start, end) {\\n    for (var i = start; i < end; i++) {\\n      var c = oldCh[i];\\n      if (isDef(c) && sameVnode(node, c)) {\\n        return i;\\n      }\\n    }\\n  }\\n\\n  function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {\\n    if (oldVnode === vnode) {\\n      return;\\n    }\\n\\n    var elm = vnode.elm = oldVnode.elm;\\n\\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\\n      if (isDef(vnode.asyncFactory.resolved)) {\\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\\n      } else {\\n        vnode.isAsyncPlaceholder = true;\\n      }\\n      return;\\n    }\\n\\n    // reuse element for static trees.\\n    // note we only do this if the vnode is cloned -\\n    // if the new node is not cloned it means the render functions have been\\n    // reset by the hot-reload-api and we need to do a proper re-render.\\n    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {\\n      vnode.componentInstance = oldVnode.componentInstance;\\n      return;\\n    }\\n\\n    var i;\\n    var data = vnode.data;\\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\\n      i(oldVnode, vnode);\\n    }\\n\\n    var oldCh = oldVnode.children;\\n    var ch = vnode.children;\\n    if (isDef(data) && isPatchable(vnode)) {\\n      for (i = 0; i < cbs.update.length; ++i) {\\n        cbs.update[i](oldVnode, vnode);\\n      }\\n      if (isDef(i = data.hook) && isDef(i = i.update)) {\\n        i(oldVnode, vnode);\\n      }\\n    }\\n    if (isUndef(vnode.text)) {\\n      if (isDef(oldCh) && isDef(ch)) {\\n        if (oldCh !== ch) {\\n          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);\\n        }\\n      } else if (isDef(ch)) {\\n        if (isDef(oldVnode.text)) {\\n          nodeOps.setTextContent(elm, '');\\n        }\\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\\n      } else if (isDef(oldCh)) {\\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\\n      } else if (isDef(oldVnode.text)) {\\n        nodeOps.setTextContent(elm, '');\\n      }\\n    } else if (oldVnode.text !== vnode.text) {\\n      nodeOps.setTextContent(elm, vnode.text);\\n    }\\n    if (isDef(data)) {\\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {\\n        i(oldVnode, vnode);\\n      }\\n    }\\n  }\\n\\n  function invokeInsertHook(vnode, queue, initial) {\\n    // delay insert hooks for component root nodes, invoke them after the\\n    // element is really inserted\\n    if (isTrue(initial) && isDef(vnode.parent)) {\\n      vnode.parent.data.pendingInsert = queue;\\n    } else {\\n      for (var i = 0; i < queue.length; ++i) {\\n        queue[i].data.hook.insert(queue[i]);\\n      }\\n    }\\n  }\\n\\n  var hydrationBailed = false;\\n  // list of modules that can skip create hook during hydration because they\\n  // are already rendered on the client or has no need for initialization\\n  // Note: style is excluded because it relies on initial clone for future\\n  // deep updates (#7063).\\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\\n\\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\\n  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {\\n    var i;\\n    var tag = vnode.tag;\\n    var data = vnode.data;\\n    var children = vnode.children;\\n    inVPre = inVPre || data && data.pre;\\n    vnode.elm = elm;\\n\\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\\n      vnode.isAsyncPlaceholder = true;\\n      return true;\\n    }\\n    // assert node match\\n    if (true) {\\n      if (!assertNodeMatch(elm, vnode, inVPre)) {\\n        return false;\\n      }\\n    }\\n    if (isDef(data)) {\\n      if (isDef(i = data.hook) && isDef(i = i.init)) {\\n        i(vnode, true /* hydrating */);\\n      }\\n      if (isDef(i = vnode.componentInstance)) {\\n        // child component. it should have hydrated its own tree.\\n        initComponent(vnode, insertedVnodeQueue);\\n        return true;\\n      }\\n    }\\n    if (isDef(tag)) {\\n      if (isDef(children)) {\\n        // empty element, allow client to pick up and populate children\\n        if (!elm.hasChildNodes()) {\\n          createChildren(vnode, children, insertedVnodeQueue);\\n        } else {\\n          // v-html and domProps: innerHTML\\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\\n            if (i !== elm.innerHTML) {\\n              /* istanbul ignore if */\\n              if (\\\"development\\\" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {\\n                hydrationBailed = true;\\n                console.warn('Parent: ', elm);\\n                console.warn('server innerHTML: ', i);\\n                console.warn('client innerHTML: ', elm.innerHTML);\\n              }\\n              return false;\\n            }\\n          } else {\\n            // iterate and compare children lists\\n            var childrenMatch = true;\\n            var childNode = elm.firstChild;\\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\\n                childrenMatch = false;\\n                break;\\n              }\\n              childNode = childNode.nextSibling;\\n            }\\n            // if childNode is not null, it means the actual childNodes list is\\n            // longer than the virtual children list.\\n            if (!childrenMatch || childNode) {\\n              /* istanbul ignore if */\\n              if (\\\"development\\\" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {\\n                hydrationBailed = true;\\n                console.warn('Parent: ', elm);\\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\\n              }\\n              return false;\\n            }\\n          }\\n        }\\n      }\\n      if (isDef(data)) {\\n        var fullInvoke = false;\\n        for (var key in data) {\\n          if (!isRenderedModule(key)) {\\n            fullInvoke = true;\\n            invokeCreateHooks(vnode, insertedVnodeQueue);\\n            break;\\n          }\\n        }\\n        if (!fullInvoke && data['class']) {\\n          // ensure collecting deps for deep class bindings for future updates\\n          traverse(data['class']);\\n        }\\n      }\\n    } else if (elm.data !== vnode.text) {\\n      elm.data = vnode.text;\\n    }\\n    return true;\\n  }\\n\\n  function assertNodeMatch(node, vnode, inVPre) {\\n    if (isDef(vnode.tag)) {\\n      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());\\n    } else {\\n      return node.nodeType === (vnode.isComment ? 8 : 3);\\n    }\\n  }\\n\\n  return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\\n    if (isUndef(vnode)) {\\n      if (isDef(oldVnode)) {\\n        invokeDestroyHook(oldVnode);\\n      }\\n      return;\\n    }\\n\\n    var isInitialPatch = false;\\n    var insertedVnodeQueue = [];\\n\\n    if (isUndef(oldVnode)) {\\n      // empty mount (likely as component), create new root element\\n      isInitialPatch = true;\\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\\n    } else {\\n      var isRealElement = isDef(oldVnode.nodeType);\\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\\n        // patch existing root node\\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\\n      } else {\\n        if (isRealElement) {\\n          // mounting to a real element\\n          // check if this is server-rendered content and if we can perform\\n          // a successful hydration.\\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\\n            oldVnode.removeAttribute(SSR_ATTR);\\n            hydrating = true;\\n          }\\n          if (isTrue(hydrating)) {\\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\\n              return oldVnode;\\n            } else if (true) {\\n              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');\\n            }\\n          }\\n          // either not server-rendered, or hydration failed.\\n          // create an empty node and replace it\\n          oldVnode = emptyNodeAt(oldVnode);\\n        }\\n\\n        // replacing existing element\\n        var oldElm = oldVnode.elm;\\n        var parentElm$1 = nodeOps.parentNode(oldElm);\\n\\n        // create new node\\n        createElm(vnode, insertedVnodeQueue,\\n        // extremely rare edge case: do not insert if old element is in a\\n        // leaving transition. Only happens when combining transition +\\n        // keep-alive + HOCs. (#4590)\\n        oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));\\n\\n        // update parent placeholder node element, recursively\\n        if (isDef(vnode.parent)) {\\n          var ancestor = vnode.parent;\\n          var patchable = isPatchable(vnode);\\n          while (ancestor) {\\n            for (var i = 0; i < cbs.destroy.length; ++i) {\\n              cbs.destroy[i](ancestor);\\n            }\\n            ancestor.elm = vnode.elm;\\n            if (patchable) {\\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\\n                cbs.create[i$1](emptyNode, ancestor);\\n              }\\n              // #6513\\n              // invoke insert hooks that may have been merged by create hooks.\\n              // e.g. for directives that uses the \\\"inserted\\\" hook.\\n              var insert = ancestor.data.hook.insert;\\n              if (insert.merged) {\\n                // start at index 1 to avoid re-invoking component mounted hook\\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\\n                  insert.fns[i$2]();\\n                }\\n              }\\n            } else {\\n              registerRef(ancestor);\\n            }\\n            ancestor = ancestor.parent;\\n          }\\n        }\\n\\n        // destroy old node\\n        if (isDef(parentElm$1)) {\\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\\n        } else if (isDef(oldVnode.tag)) {\\n          invokeDestroyHook(oldVnode);\\n        }\\n      }\\n    }\\n\\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\\n    return vnode.elm;\\n  };\\n}\\n\\n/*  */\\n\\nvar directives = {\\n  create: updateDirectives,\\n  update: updateDirectives,\\n  destroy: function unbindDirectives(vnode) {\\n    updateDirectives(vnode, emptyNode);\\n  }\\n};\\n\\nfunction updateDirectives(oldVnode, vnode) {\\n  if (oldVnode.data.directives || vnode.data.directives) {\\n    _update(oldVnode, vnode);\\n  }\\n}\\n\\nfunction _update(oldVnode, vnode) {\\n  var isCreate = oldVnode === emptyNode;\\n  var isDestroy = vnode === emptyNode;\\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\\n\\n  var dirsWithInsert = [];\\n  var dirsWithPostpatch = [];\\n\\n  var key, oldDir, dir;\\n  for (key in newDirs) {\\n    oldDir = oldDirs[key];\\n    dir = newDirs[key];\\n    if (!oldDir) {\\n      // new directive, bind\\n      callHook$1(dir, 'bind', vnode, oldVnode);\\n      if (dir.def && dir.def.inserted) {\\n        dirsWithInsert.push(dir);\\n      }\\n    } else {\\n      // existing directive, update\\n      dir.oldValue = oldDir.value;\\n      callHook$1(dir, 'update', vnode, oldVnode);\\n      if (dir.def && dir.def.componentUpdated) {\\n        dirsWithPostpatch.push(dir);\\n      }\\n    }\\n  }\\n\\n  if (dirsWithInsert.length) {\\n    var callInsert = function () {\\n      for (var i = 0; i < dirsWithInsert.length; i++) {\\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\\n      }\\n    };\\n    if (isCreate) {\\n      mergeVNodeHook(vnode, 'insert', callInsert);\\n    } else {\\n      callInsert();\\n    }\\n  }\\n\\n  if (dirsWithPostpatch.length) {\\n    mergeVNodeHook(vnode, 'postpatch', function () {\\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\\n      }\\n    });\\n  }\\n\\n  if (!isCreate) {\\n    for (key in oldDirs) {\\n      if (!newDirs[key]) {\\n        // no longer present, unbind\\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\\n      }\\n    }\\n  }\\n}\\n\\nvar emptyModifiers = Object.create(null);\\n\\nfunction normalizeDirectives$1(dirs, vm) {\\n  var res = Object.create(null);\\n  if (!dirs) {\\n    // $flow-disable-line\\n    return res;\\n  }\\n  var i, dir;\\n  for (i = 0; i < dirs.length; i++) {\\n    dir = dirs[i];\\n    if (!dir.modifiers) {\\n      // $flow-disable-line\\n      dir.modifiers = emptyModifiers;\\n    }\\n    res[getRawDirName(dir)] = dir;\\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\\n  }\\n  // $flow-disable-line\\n  return res;\\n}\\n\\nfunction getRawDirName(dir) {\\n  return dir.rawName || dir.name + \\\".\\\" + Object.keys(dir.modifiers || {}).join('.');\\n}\\n\\nfunction callHook$1(dir, hook, vnode, oldVnode, isDestroy) {\\n  var fn = dir.def && dir.def[hook];\\n  if (fn) {\\n    try {\\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\\n    } catch (e) {\\n      handleError(e, vnode.context, \\\"directive \\\" + dir.name + \\\" \\\" + hook + \\\" hook\\\");\\n    }\\n  }\\n}\\n\\nvar baseModules = [ref, directives];\\n\\n/*  */\\n\\nfunction updateAttrs(oldVnode, vnode) {\\n  var opts = vnode.componentOptions;\\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\\n    return;\\n  }\\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\\n    return;\\n  }\\n  var key, cur, old;\\n  var elm = vnode.elm;\\n  var oldAttrs = oldVnode.data.attrs || {};\\n  var attrs = vnode.data.attrs || {};\\n  // clone observed objects, as the user probably wants to mutate it\\n  if (isDef(attrs.__ob__)) {\\n    attrs = vnode.data.attrs = extend({}, attrs);\\n  }\\n\\n  for (key in attrs) {\\n    cur = attrs[key];\\n    old = oldAttrs[key];\\n    if (old !== cur) {\\n      setAttr(elm, key, cur);\\n    }\\n  }\\n  // #4391: in IE9, setting type can reset value for input[type=radio]\\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\\n  /* istanbul ignore if */\\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\\n    setAttr(elm, 'value', attrs.value);\\n  }\\n  for (key in oldAttrs) {\\n    if (isUndef(attrs[key])) {\\n      if (isXlink(key)) {\\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\\n      } else if (!isEnumeratedAttr(key)) {\\n        elm.removeAttribute(key);\\n      }\\n    }\\n  }\\n}\\n\\nfunction setAttr(el, key, value) {\\n  if (el.tagName.indexOf('-') > -1) {\\n    baseSetAttr(el, key, value);\\n  } else if (isBooleanAttr(key)) {\\n    // set attribute for blank value\\n    // e.g. <option disabled>Select one</option>\\n    if (isFalsyAttrValue(value)) {\\n      el.removeAttribute(key);\\n    } else {\\n      // technically allowfullscreen is a boolean attribute for <iframe>,\\n      // but Flash expects a value of \\\"true\\\" when used on <embed> tag\\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;\\n      el.setAttribute(key, value);\\n    }\\n  } else if (isEnumeratedAttr(key)) {\\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\\n  } else if (isXlink(key)) {\\n    if (isFalsyAttrValue(value)) {\\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\\n    } else {\\n      el.setAttributeNS(xlinkNS, key, value);\\n    }\\n  } else {\\n    baseSetAttr(el, key, value);\\n  }\\n}\\n\\nfunction baseSetAttr(el, key, value) {\\n  if (isFalsyAttrValue(value)) {\\n    el.removeAttribute(key);\\n  } else {\\n    // #7138: IE10 & 11 fires input event when setting placeholder on\\n    // <textarea>... block the first input event and remove the blocker\\n    // immediately.\\n    /* istanbul ignore if */\\n    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && !el.__ieph) {\\n      var blocker = function (e) {\\n        e.stopImmediatePropagation();\\n        el.removeEventListener('input', blocker);\\n      };\\n      el.addEventListener('input', blocker);\\n      // $flow-disable-line\\n      el.__ieph = true; /* IE placeholder patched */\\n    }\\n    el.setAttribute(key, value);\\n  }\\n}\\n\\nvar attrs = {\\n  create: updateAttrs,\\n  update: updateAttrs\\n\\n  /*  */\\n\\n};function updateClass(oldVnode, vnode) {\\n  var el = vnode.elm;\\n  var data = vnode.data;\\n  var oldData = oldVnode.data;\\n  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {\\n    return;\\n  }\\n\\n  var cls = genClassForVnode(vnode);\\n\\n  // handle transition classes\\n  var transitionClass = el._transitionClasses;\\n  if (isDef(transitionClass)) {\\n    cls = concat(cls, stringifyClass(transitionClass));\\n  }\\n\\n  // set the class\\n  if (cls !== el._prevClass) {\\n    el.setAttribute('class', cls);\\n    el._prevClass = cls;\\n  }\\n}\\n\\nvar klass = {\\n  create: updateClass,\\n  update: updateClass\\n\\n  /*  */\\n\\n};var validDivisionCharRE = /[\\\\w).+\\\\-_$\\\\]]/;\\n\\nfunction parseFilters(exp) {\\n  var inSingle = false;\\n  var inDouble = false;\\n  var inTemplateString = false;\\n  var inRegex = false;\\n  var curly = 0;\\n  var square = 0;\\n  var paren = 0;\\n  var lastFilterIndex = 0;\\n  var c, prev, i, expression, filters;\\n\\n  for (i = 0; i < exp.length; i++) {\\n    prev = c;\\n    c = exp.charCodeAt(i);\\n    if (inSingle) {\\n      if (c === 0x27 && prev !== 0x5C) {\\n        inSingle = false;\\n      }\\n    } else if (inDouble) {\\n      if (c === 0x22 && prev !== 0x5C) {\\n        inDouble = false;\\n      }\\n    } else if (inTemplateString) {\\n      if (c === 0x60 && prev !== 0x5C) {\\n        inTemplateString = false;\\n      }\\n    } else if (inRegex) {\\n      if (c === 0x2f && prev !== 0x5C) {\\n        inRegex = false;\\n      }\\n    } else if (c === 0x7C && // pipe\\n    exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {\\n      if (expression === undefined) {\\n        // first filter, end of expression\\n        lastFilterIndex = i + 1;\\n        expression = exp.slice(0, i).trim();\\n      } else {\\n        pushFilter();\\n      }\\n    } else {\\n      switch (c) {\\n        case 0x22:\\n          inDouble = true;break; // \\\"\\n        case 0x27:\\n          inSingle = true;break; // '\\n        case 0x60:\\n          inTemplateString = true;break; // `\\n        case 0x28:\\n          paren++;break; // (\\n        case 0x29:\\n          paren--;break; // )\\n        case 0x5B:\\n          square++;break; // [\\n        case 0x5D:\\n          square--;break; // ]\\n        case 0x7B:\\n          curly++;break; // {\\n        case 0x7D:\\n          curly--;break; // }\\n      }\\n      if (c === 0x2f) {\\n        // /\\n        var j = i - 1;\\n        var p = void 0;\\n        // find first non-whitespace prev char\\n        for (; j >= 0; j--) {\\n          p = exp.charAt(j);\\n          if (p !== ' ') {\\n            break;\\n          }\\n        }\\n        if (!p || !validDivisionCharRE.test(p)) {\\n          inRegex = true;\\n        }\\n      }\\n    }\\n  }\\n\\n  if (expression === undefined) {\\n    expression = exp.slice(0, i).trim();\\n  } else if (lastFilterIndex !== 0) {\\n    pushFilter();\\n  }\\n\\n  function pushFilter() {\\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\\n    lastFilterIndex = i + 1;\\n  }\\n\\n  if (filters) {\\n    for (i = 0; i < filters.length; i++) {\\n      expression = wrapFilter(expression, filters[i]);\\n    }\\n  }\\n\\n  return expression;\\n}\\n\\nfunction wrapFilter(exp, filter) {\\n  var i = filter.indexOf('(');\\n  if (i < 0) {\\n    // _f: resolveFilter\\n    return \\\"_f(\\\\\\\"\\\" + filter + \\\"\\\\\\\")(\\\" + exp + \\\")\\\";\\n  } else {\\n    var name = filter.slice(0, i);\\n    var args = filter.slice(i + 1);\\n    return \\\"_f(\\\\\\\"\\\" + name + \\\"\\\\\\\")(\\\" + exp + (args !== ')' ? ',' + args : args);\\n  }\\n}\\n\\n/*  */\\n\\nfunction baseWarn(msg) {\\n  console.error(\\\"[Vue compiler]: \\\" + msg);\\n}\\n\\nfunction pluckModuleFunction(modules, key) {\\n  return modules ? modules.map(function (m) {\\n    return m[key];\\n  }).filter(function (_) {\\n    return _;\\n  }) : [];\\n}\\n\\nfunction addProp(el, name, value) {\\n  (el.props || (el.props = [])).push({ name: name, value: value });\\n  el.plain = false;\\n}\\n\\nfunction addAttr(el, name, value) {\\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\\n  el.plain = false;\\n}\\n\\n// add a raw attr (use this in preTransforms)\\nfunction addRawAttr(el, name, value) {\\n  el.attrsMap[name] = value;\\n  el.attrsList.push({ name: name, value: value });\\n}\\n\\nfunction addDirective(el, name, rawName, value, arg, modifiers) {\\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\\n  el.plain = false;\\n}\\n\\nfunction addHandler(el, name, value, modifiers, important, warn) {\\n  modifiers = modifiers || emptyObject;\\n  // warn prevent and passive modifier\\n  /* istanbul ignore if */\\n  if (\\\"development\\\" !== 'production' && warn && modifiers.prevent && modifiers.passive) {\\n    warn('passive and prevent can\\\\'t be used together. ' + 'Passive handler can\\\\'t prevent default event.');\\n  }\\n\\n  // check capture modifier\\n  if (modifiers.capture) {\\n    delete modifiers.capture;\\n    name = '!' + name; // mark the event as captured\\n  }\\n  if (modifiers.once) {\\n    delete modifiers.once;\\n    name = '~' + name; // mark the event as once\\n  }\\n  /* istanbul ignore if */\\n  if (modifiers.passive) {\\n    delete modifiers.passive;\\n    name = '&' + name; // mark the event as passive\\n  }\\n\\n  // normalize click.right and click.middle since they don't actually fire\\n  // this is technically browser-specific, but at least for now browsers are\\n  // the only target envs that have right/middle clicks.\\n  if (name === 'click') {\\n    if (modifiers.right) {\\n      name = 'contextmenu';\\n      delete modifiers.right;\\n    } else if (modifiers.middle) {\\n      name = 'mouseup';\\n    }\\n  }\\n\\n  var events;\\n  if (modifiers.native) {\\n    delete modifiers.native;\\n    events = el.nativeEvents || (el.nativeEvents = {});\\n  } else {\\n    events = el.events || (el.events = {});\\n  }\\n\\n  var newHandler = {\\n    value: value.trim()\\n  };\\n  if (modifiers !== emptyObject) {\\n    newHandler.modifiers = modifiers;\\n  }\\n\\n  var handlers = events[name];\\n  /* istanbul ignore if */\\n  if (Array.isArray(handlers)) {\\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\\n  } else if (handlers) {\\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\\n  } else {\\n    events[name] = newHandler;\\n  }\\n\\n  el.plain = false;\\n}\\n\\nfunction getBindingAttr(el, name, getStatic) {\\n  var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);\\n  if (dynamicValue != null) {\\n    return parseFilters(dynamicValue);\\n  } else if (getStatic !== false) {\\n    var staticValue = getAndRemoveAttr(el, name);\\n    if (staticValue != null) {\\n      return JSON.stringify(staticValue);\\n    }\\n  }\\n}\\n\\n// note: this only removes the attr from the Array (attrsList) so that it\\n// doesn't get processed by processAttrs.\\n// By default it does NOT remove it from the map (attrsMap) because the map is\\n// needed during codegen.\\nfunction getAndRemoveAttr(el, name, removeFromMap) {\\n  var val;\\n  if ((val = el.attrsMap[name]) != null) {\\n    var list = el.attrsList;\\n    for (var i = 0, l = list.length; i < l; i++) {\\n      if (list[i].name === name) {\\n        list.splice(i, 1);\\n        break;\\n      }\\n    }\\n  }\\n  if (removeFromMap) {\\n    delete el.attrsMap[name];\\n  }\\n  return val;\\n}\\n\\n/*  */\\n\\n/**\\n * Cross-platform code generation for component v-model\\n */\\nfunction genComponentModel(el, value, modifiers) {\\n  var ref = modifiers || {};\\n  var number = ref.number;\\n  var trim = ref.trim;\\n\\n  var baseValueExpression = '$$v';\\n  var valueExpression = baseValueExpression;\\n  if (trim) {\\n    valueExpression = \\\"(typeof \\\" + baseValueExpression + \\\" === 'string'\\\" + \\\"? \\\" + baseValueExpression + \\\".trim()\\\" + \\\": \\\" + baseValueExpression + \\\")\\\";\\n  }\\n  if (number) {\\n    valueExpression = \\\"_n(\\\" + valueExpression + \\\")\\\";\\n  }\\n  var assignment = genAssignmentCode(value, valueExpression);\\n\\n  el.model = {\\n    value: \\\"(\\\" + value + \\\")\\\",\\n    expression: \\\"\\\\\\\"\\\" + value + \\\"\\\\\\\"\\\",\\n    callback: \\\"function (\\\" + baseValueExpression + \\\") {\\\" + assignment + \\\"}\\\"\\n  };\\n}\\n\\n/**\\n * Cross-platform codegen helper for generating v-model value assignment code.\\n */\\nfunction genAssignmentCode(value, assignment) {\\n  var res = parseModel(value);\\n  if (res.key === null) {\\n    return value + \\\"=\\\" + assignment;\\n  } else {\\n    return \\\"$set(\\\" + res.exp + \\\", \\\" + res.key + \\\", \\\" + assignment + \\\")\\\";\\n  }\\n}\\n\\n/**\\n * Parse a v-model expression into a base path and a final key segment.\\n * Handles both dot-path and possible square brackets.\\n *\\n * Possible cases:\\n *\\n * - test\\n * - test[key]\\n * - test[test1[key]]\\n * - test[\\\"a\\\"][key]\\n * - xxx.test[a[a].test1[key]]\\n * - test.xxx.a[\\\"asa\\\"][test1[key]]\\n *\\n */\\n\\nvar len;\\nvar str;\\nvar chr;\\nvar index$1;\\nvar expressionPos;\\nvar expressionEndPos;\\n\\nfunction parseModel(val) {\\n  // Fix https://github.com/vuejs/vue/pull/7730\\n  // allow v-model=\\\"obj.val \\\" (trailing whitespace)\\n  val = val.trim();\\n  len = val.length;\\n\\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\\n    index$1 = val.lastIndexOf('.');\\n    if (index$1 > -1) {\\n      return {\\n        exp: val.slice(0, index$1),\\n        key: '\\\"' + val.slice(index$1 + 1) + '\\\"'\\n      };\\n    } else {\\n      return {\\n        exp: val,\\n        key: null\\n      };\\n    }\\n  }\\n\\n  str = val;\\n  index$1 = expressionPos = expressionEndPos = 0;\\n\\n  while (!eof()) {\\n    chr = next();\\n    /* istanbul ignore if */\\n    if (isStringStart(chr)) {\\n      parseString(chr);\\n    } else if (chr === 0x5B) {\\n      parseBracket(chr);\\n    }\\n  }\\n\\n  return {\\n    exp: val.slice(0, expressionPos),\\n    key: val.slice(expressionPos + 1, expressionEndPos)\\n  };\\n}\\n\\nfunction next() {\\n  return str.charCodeAt(++index$1);\\n}\\n\\nfunction eof() {\\n  return index$1 >= len;\\n}\\n\\nfunction isStringStart(chr) {\\n  return chr === 0x22 || chr === 0x27;\\n}\\n\\nfunction parseBracket(chr) {\\n  var inBracket = 1;\\n  expressionPos = index$1;\\n  while (!eof()) {\\n    chr = next();\\n    if (isStringStart(chr)) {\\n      parseString(chr);\\n      continue;\\n    }\\n    if (chr === 0x5B) {\\n      inBracket++;\\n    }\\n    if (chr === 0x5D) {\\n      inBracket--;\\n    }\\n    if (inBracket === 0) {\\n      expressionEndPos = index$1;\\n      break;\\n    }\\n  }\\n}\\n\\nfunction parseString(chr) {\\n  var stringQuote = chr;\\n  while (!eof()) {\\n    chr = next();\\n    if (chr === stringQuote) {\\n      break;\\n    }\\n  }\\n}\\n\\n/*  */\\n\\nvar warn$1;\\n\\n// in some cases, the event used has to be determined at runtime\\n// so we used some reserved tokens during compile.\\nvar RANGE_TOKEN = '__r';\\nvar CHECKBOX_RADIO_TOKEN = '__c';\\n\\nfunction model(el, dir, _warn) {\\n  warn$1 = _warn;\\n  var value = dir.value;\\n  var modifiers = dir.modifiers;\\n  var tag = el.tag;\\n  var type = el.attrsMap.type;\\n\\n  if (true) {\\n    // inputs with type=\\\"file\\\" are read only and setting the input's\\n    // value will throw an error.\\n    if (tag === 'input' && type === 'file') {\\n      warn$1(\\\"<\\\" + el.tag + \\\" v-model=\\\\\\\"\\\" + value + \\\"\\\\\\\" type=\\\\\\\"file\\\\\\\">:\\\\n\\\" + \\\"File inputs are read only. Use a v-on:change listener instead.\\\");\\n    }\\n  }\\n\\n  if (el.component) {\\n    genComponentModel(el, value, modifiers);\\n    // component v-model doesn't need extra runtime\\n    return false;\\n  } else if (tag === 'select') {\\n    genSelect(el, value, modifiers);\\n  } else if (tag === 'input' && type === 'checkbox') {\\n    genCheckboxModel(el, value, modifiers);\\n  } else if (tag === 'input' && type === 'radio') {\\n    genRadioModel(el, value, modifiers);\\n  } else if (tag === 'input' || tag === 'textarea') {\\n    genDefaultModel(el, value, modifiers);\\n  } else if (!config.isReservedTag(tag)) {\\n    genComponentModel(el, value, modifiers);\\n    // component v-model doesn't need extra runtime\\n    return false;\\n  } else if (true) {\\n    warn$1(\\\"<\\\" + el.tag + \\\" v-model=\\\\\\\"\\\" + value + \\\"\\\\\\\">: \\\" + \\\"v-model is not supported on this element type. \\\" + 'If you are working with contenteditable, it\\\\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.');\\n  }\\n\\n  // ensure runtime directive metadata\\n  return true;\\n}\\n\\nfunction genCheckboxModel(el, value, modifiers) {\\n  var number = modifiers && modifiers.number;\\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\\n  addProp(el, 'checked', \\\"Array.isArray(\\\" + value + \\\")\\\" + \\\"?_i(\\\" + value + \\\",\\\" + valueBinding + \\\")>-1\\\" + (trueValueBinding === 'true' ? \\\":(\\\" + value + \\\")\\\" : \\\":_q(\\\" + value + \\\",\\\" + trueValueBinding + \\\")\\\"));\\n  addHandler(el, 'change', \\\"var $$a=\\\" + value + \\\",\\\" + '$$el=$event.target,' + \\\"$$c=$$el.checked?(\\\" + trueValueBinding + \\\"):(\\\" + falseValueBinding + \\\");\\\" + 'if(Array.isArray($$a)){' + \\\"var $$v=\\\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \\\",\\\" + '$$i=_i($$a,$$v);' + \\\"if($$el.checked){$$i<0&&(\\\" + genAssignmentCode(value, '$$a.concat([$$v])') + \\\")}\\\" + \\\"else{$$i>-1&&(\\\" + genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))') + \\\")}\\\" + \\\"}else{\\\" + genAssignmentCode(value, '$$c') + \\\"}\\\", null, true);\\n}\\n\\nfunction genRadioModel(el, value, modifiers) {\\n  var number = modifiers && modifiers.number;\\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\\n  valueBinding = number ? \\\"_n(\\\" + valueBinding + \\\")\\\" : valueBinding;\\n  addProp(el, 'checked', \\\"_q(\\\" + value + \\\",\\\" + valueBinding + \\\")\\\");\\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\\n}\\n\\nfunction genSelect(el, value, modifiers) {\\n  var number = modifiers && modifiers.number;\\n  var selectedVal = \\\"Array.prototype.filter\\\" + \\\".call($event.target.options,function(o){return o.selected})\\\" + \\\".map(function(o){var val = \\\\\\\"_value\\\\\\\" in o ? o._value : o.value;\\\" + \\\"return \\\" + (number ? '_n(val)' : 'val') + \\\"})\\\";\\n\\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\\n  var code = \\\"var $$selectedVal = \\\" + selectedVal + \\\";\\\";\\n  code = code + \\\" \\\" + genAssignmentCode(value, assignment);\\n  addHandler(el, 'change', code, null, true);\\n}\\n\\nfunction genDefaultModel(el, value, modifiers) {\\n  var type = el.attrsMap.type;\\n\\n  // warn if v-bind:value conflicts with v-model\\n  // except for inputs with v-bind:type\\n  if (true) {\\n    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];\\n    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\\n    if (value$1 && !typeBinding) {\\n      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';\\n      warn$1(binding + \\\"=\\\\\\\"\\\" + value$1 + \\\"\\\\\\\" conflicts with v-model on the same element \\\" + 'because the latter already expands to a value binding internally');\\n    }\\n  }\\n\\n  var ref = modifiers || {};\\n  var lazy = ref.lazy;\\n  var number = ref.number;\\n  var trim = ref.trim;\\n  var needCompositionGuard = !lazy && type !== 'range';\\n  var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';\\n\\n  var valueExpression = '$event.target.value';\\n  if (trim) {\\n    valueExpression = \\\"$event.target.value.trim()\\\";\\n  }\\n  if (number) {\\n    valueExpression = \\\"_n(\\\" + valueExpression + \\\")\\\";\\n  }\\n\\n  var code = genAssignmentCode(value, valueExpression);\\n  if (needCompositionGuard) {\\n    code = \\\"if($event.target.composing)return;\\\" + code;\\n  }\\n\\n  addProp(el, 'value', \\\"(\\\" + value + \\\")\\\");\\n  addHandler(el, event, code, null, true);\\n  if (trim || number) {\\n    addHandler(el, 'blur', '$forceUpdate()');\\n  }\\n}\\n\\n/*  */\\n\\n// normalize v-model event tokens that can only be determined at runtime.\\n// it's important to place the event as the first in the array because\\n// the whole point is ensuring the v-model callback gets called before\\n// user-attached handlers.\\nfunction normalizeEvents(on) {\\n  /* istanbul ignore if */\\n  if (isDef(on[RANGE_TOKEN])) {\\n    // IE input[type=range] only supports `change` event\\n    var event = isIE ? 'change' : 'input';\\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\\n    delete on[RANGE_TOKEN];\\n  }\\n  // This was originally intended to fix #4521 but no longer necessary\\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\\n  /* istanbul ignore if */\\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\\n    delete on[CHECKBOX_RADIO_TOKEN];\\n  }\\n}\\n\\nvar target$1;\\n\\nfunction createOnceHandler(handler, event, capture) {\\n  var _target = target$1; // save current target element in closure\\n  return function onceHandler() {\\n    var res = handler.apply(null, arguments);\\n    if (res !== null) {\\n      remove$2(event, onceHandler, capture, _target);\\n    }\\n  };\\n}\\n\\nfunction add$1(event, handler, once$$1, capture, passive) {\\n  handler = withMacroTask(handler);\\n  if (once$$1) {\\n    handler = createOnceHandler(handler, event, capture);\\n  }\\n  target$1.addEventListener(event, handler, supportsPassive ? { capture: capture, passive: passive } : capture);\\n}\\n\\nfunction remove$2(event, handler, capture, _target) {\\n  (_target || target$1).removeEventListener(event, handler._withTask || handler, capture);\\n}\\n\\nfunction updateDOMListeners(oldVnode, vnode) {\\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\\n    return;\\n  }\\n  var on = vnode.data.on || {};\\n  var oldOn = oldVnode.data.on || {};\\n  target$1 = vnode.elm;\\n  normalizeEvents(on);\\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\\n  target$1 = undefined;\\n}\\n\\nvar events = {\\n  create: updateDOMListeners,\\n  update: updateDOMListeners\\n\\n  /*  */\\n\\n};function updateDOMProps(oldVnode, vnode) {\\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\\n    return;\\n  }\\n  var key, cur;\\n  var elm = vnode.elm;\\n  var oldProps = oldVnode.data.domProps || {};\\n  var props = vnode.data.domProps || {};\\n  // clone observed objects, as the user probably wants to mutate it\\n  if (isDef(props.__ob__)) {\\n    props = vnode.data.domProps = extend({}, props);\\n  }\\n\\n  for (key in oldProps) {\\n    if (isUndef(props[key])) {\\n      elm[key] = '';\\n    }\\n  }\\n  for (key in props) {\\n    cur = props[key];\\n    // ignore children if the node has textContent or innerHTML,\\n    // as these will throw away existing DOM nodes and cause removal errors\\n    // on subsequent patches (#3360)\\n    if (key === 'textContent' || key === 'innerHTML') {\\n      if (vnode.children) {\\n        vnode.children.length = 0;\\n      }\\n      if (cur === oldProps[key]) {\\n        continue;\\n      }\\n      // #6601 work around Chrome version <= 55 bug where single textNode\\n      // replaced by innerHTML/textContent retains its parentNode property\\n      if (elm.childNodes.length === 1) {\\n        elm.removeChild(elm.childNodes[0]);\\n      }\\n    }\\n\\n    if (key === 'value') {\\n      // store value as _value as well since\\n      // non-string values will be stringified\\n      elm._value = cur;\\n      // avoid resetting cursor position when value is the same\\n      var strCur = isUndef(cur) ? '' : String(cur);\\n      if (shouldUpdateValue(elm, strCur)) {\\n        elm.value = strCur;\\n      }\\n    } else {\\n      elm[key] = cur;\\n    }\\n  }\\n}\\n\\n// check platforms/web/util/attrs.js acceptValue\\n\\n\\nfunction shouldUpdateValue(elm, checkVal) {\\n  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));\\n}\\n\\nfunction isNotInFocusAndDirty(elm, checkVal) {\\n  // return true when textbox (.number and .trim) loses focus and its value is\\n  // not equal to the updated value\\n  var notInFocus = true;\\n  // #6157\\n  // work around IE bug when accessing document.activeElement in an iframe\\n  try {\\n    notInFocus = document.activeElement !== elm;\\n  } catch (e) {}\\n  return notInFocus && elm.value !== checkVal;\\n}\\n\\nfunction isDirtyWithModifiers(elm, newVal) {\\n  var value = elm.value;\\n  var modifiers = elm._vModifiers; // injected by v-model runtime\\n  if (isDef(modifiers)) {\\n    if (modifiers.lazy) {\\n      // inputs with lazy should only be updated when not in focus\\n      return false;\\n    }\\n    if (modifiers.number) {\\n      return toNumber(value) !== toNumber(newVal);\\n    }\\n    if (modifiers.trim) {\\n      return value.trim() !== newVal.trim();\\n    }\\n  }\\n  return value !== newVal;\\n}\\n\\nvar domProps = {\\n  create: updateDOMProps,\\n  update: updateDOMProps\\n\\n  /*  */\\n\\n};var parseStyleText = cached(function (cssText) {\\n  var res = {};\\n  var listDelimiter = /;(?![^(]*\\\\))/g;\\n  var propertyDelimiter = /:(.+)/;\\n  cssText.split(listDelimiter).forEach(function (item) {\\n    if (item) {\\n      var tmp = item.split(propertyDelimiter);\\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\\n    }\\n  });\\n  return res;\\n});\\n\\n// merge static and dynamic style data on the same vnode\\nfunction normalizeStyleData(data) {\\n  var style = normalizeStyleBinding(data.style);\\n  // static style is pre-processed into an object during compilation\\n  // and is always a fresh object, so it's safe to merge into it\\n  return data.staticStyle ? extend(data.staticStyle, style) : style;\\n}\\n\\n// normalize possible array / string values into Object\\nfunction normalizeStyleBinding(bindingStyle) {\\n  if (Array.isArray(bindingStyle)) {\\n    return toObject(bindingStyle);\\n  }\\n  if (typeof bindingStyle === 'string') {\\n    return parseStyleText(bindingStyle);\\n  }\\n  return bindingStyle;\\n}\\n\\n/**\\n * parent component style should be after child's\\n * so that parent component's style could override it\\n */\\nfunction getStyle(vnode, checkChild) {\\n  var res = {};\\n  var styleData;\\n\\n  if (checkChild) {\\n    var childNode = vnode;\\n    while (childNode.componentInstance) {\\n      childNode = childNode.componentInstance._vnode;\\n      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {\\n        extend(res, styleData);\\n      }\\n    }\\n  }\\n\\n  if (styleData = normalizeStyleData(vnode.data)) {\\n    extend(res, styleData);\\n  }\\n\\n  var parentNode = vnode;\\n  while (parentNode = parentNode.parent) {\\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\\n      extend(res, styleData);\\n    }\\n  }\\n  return res;\\n}\\n\\n/*  */\\n\\nvar cssVarRE = /^--/;\\nvar importantRE = /\\\\s*!important$/;\\nvar setProp = function (el, name, val) {\\n  /* istanbul ignore if */\\n  if (cssVarRE.test(name)) {\\n    el.style.setProperty(name, val);\\n  } else if (importantRE.test(val)) {\\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\\n  } else {\\n    var normalizedName = normalize(name);\\n    if (Array.isArray(val)) {\\n      // Support values array created by autoprefixer, e.g.\\n      // {display: [\\\"-webkit-box\\\", \\\"-ms-flexbox\\\", \\\"flex\\\"]}\\n      // Set them one by one, and the browser will only set those it can recognize\\n      for (var i = 0, len = val.length; i < len; i++) {\\n        el.style[normalizedName] = val[i];\\n      }\\n    } else {\\n      el.style[normalizedName] = val;\\n    }\\n  }\\n};\\n\\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\\n\\nvar emptyStyle;\\nvar normalize = cached(function (prop) {\\n  emptyStyle = emptyStyle || document.createElement('div').style;\\n  prop = camelize(prop);\\n  if (prop !== 'filter' && prop in emptyStyle) {\\n    return prop;\\n  }\\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\\n  for (var i = 0; i < vendorNames.length; i++) {\\n    var name = vendorNames[i] + capName;\\n    if (name in emptyStyle) {\\n      return name;\\n    }\\n  }\\n});\\n\\nfunction updateStyle(oldVnode, vnode) {\\n  var data = vnode.data;\\n  var oldData = oldVnode.data;\\n\\n  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {\\n    return;\\n  }\\n\\n  var cur, name;\\n  var el = vnode.elm;\\n  var oldStaticStyle = oldData.staticStyle;\\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\\n\\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\\n  var oldStyle = oldStaticStyle || oldStyleBinding;\\n\\n  var style = normalizeStyleBinding(vnode.data.style) || {};\\n\\n  // store normalized style under a different key for next diff\\n  // make sure to clone it if it's reactive, since the user likely wants\\n  // to mutate it.\\n  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;\\n\\n  var newStyle = getStyle(vnode, true);\\n\\n  for (name in oldStyle) {\\n    if (isUndef(newStyle[name])) {\\n      setProp(el, name, '');\\n    }\\n  }\\n  for (name in newStyle) {\\n    cur = newStyle[name];\\n    if (cur !== oldStyle[name]) {\\n      // ie9 setting to null has no effect, must use empty string\\n      setProp(el, name, cur == null ? '' : cur);\\n    }\\n  }\\n}\\n\\nvar style = {\\n  create: updateStyle,\\n  update: updateStyle\\n\\n  /*  */\\n\\n  /**\\n   * Add class with compatibility for SVG since classList is not supported on\\n   * SVG elements in IE\\n   */\\n};function addClass(el, cls) {\\n  /* istanbul ignore if */\\n  if (!cls || !(cls = cls.trim())) {\\n    return;\\n  }\\n\\n  /* istanbul ignore else */\\n  if (el.classList) {\\n    if (cls.indexOf(' ') > -1) {\\n      cls.split(/\\\\s+/).forEach(function (c) {\\n        return el.classList.add(c);\\n      });\\n    } else {\\n      el.classList.add(cls);\\n    }\\n  } else {\\n    var cur = \\\" \\\" + (el.getAttribute('class') || '') + \\\" \\\";\\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\\n      el.setAttribute('class', (cur + cls).trim());\\n    }\\n  }\\n}\\n\\n/**\\n * Remove class with compatibility for SVG since classList is not supported on\\n * SVG elements in IE\\n */\\nfunction removeClass(el, cls) {\\n  /* istanbul ignore if */\\n  if (!cls || !(cls = cls.trim())) {\\n    return;\\n  }\\n\\n  /* istanbul ignore else */\\n  if (el.classList) {\\n    if (cls.indexOf(' ') > -1) {\\n      cls.split(/\\\\s+/).forEach(function (c) {\\n        return el.classList.remove(c);\\n      });\\n    } else {\\n      el.classList.remove(cls);\\n    }\\n    if (!el.classList.length) {\\n      el.removeAttribute('class');\\n    }\\n  } else {\\n    var cur = \\\" \\\" + (el.getAttribute('class') || '') + \\\" \\\";\\n    var tar = ' ' + cls + ' ';\\n    while (cur.indexOf(tar) >= 0) {\\n      cur = cur.replace(tar, ' ');\\n    }\\n    cur = cur.trim();\\n    if (cur) {\\n      el.setAttribute('class', cur);\\n    } else {\\n      el.removeAttribute('class');\\n    }\\n  }\\n}\\n\\n/*  */\\n\\nfunction resolveTransition(def) {\\n  if (!def) {\\n    return;\\n  }\\n  /* istanbul ignore else */\\n  if (typeof def === 'object') {\\n    var res = {};\\n    if (def.css !== false) {\\n      extend(res, autoCssTransition(def.name || 'v'));\\n    }\\n    extend(res, def);\\n    return res;\\n  } else if (typeof def === 'string') {\\n    return autoCssTransition(def);\\n  }\\n}\\n\\nvar autoCssTransition = cached(function (name) {\\n  return {\\n    enterClass: name + \\\"-enter\\\",\\n    enterToClass: name + \\\"-enter-to\\\",\\n    enterActiveClass: name + \\\"-enter-active\\\",\\n    leaveClass: name + \\\"-leave\\\",\\n    leaveToClass: name + \\\"-leave-to\\\",\\n    leaveActiveClass: name + \\\"-leave-active\\\"\\n  };\\n});\\n\\nvar hasTransition = inBrowser && !isIE9;\\nvar TRANSITION = 'transition';\\nvar ANIMATION = 'animation';\\n\\n// Transition property/event sniffing\\nvar transitionProp = 'transition';\\nvar transitionEndEvent = 'transitionend';\\nvar animationProp = 'animation';\\nvar animationEndEvent = 'animationend';\\nif (hasTransition) {\\n  /* istanbul ignore if */\\n  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {\\n    transitionProp = 'WebkitTransition';\\n    transitionEndEvent = 'webkitTransitionEnd';\\n  }\\n  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {\\n    animationProp = 'WebkitAnimation';\\n    animationEndEvent = 'webkitAnimationEnd';\\n  }\\n}\\n\\n// binding to window is necessary to make hot reload work in IE in strict mode\\nvar raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : /* istanbul ignore next */function (fn) {\\n  return fn();\\n};\\n\\nfunction nextFrame(fn) {\\n  raf(function () {\\n    raf(fn);\\n  });\\n}\\n\\nfunction addTransitionClass(el, cls) {\\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\\n  if (transitionClasses.indexOf(cls) < 0) {\\n    transitionClasses.push(cls);\\n    addClass(el, cls);\\n  }\\n}\\n\\nfunction removeTransitionClass(el, cls) {\\n  if (el._transitionClasses) {\\n    remove(el._transitionClasses, cls);\\n  }\\n  removeClass(el, cls);\\n}\\n\\nfunction whenTransitionEnds(el, expectedType, cb) {\\n  var ref = getTransitionInfo(el, expectedType);\\n  var type = ref.type;\\n  var timeout = ref.timeout;\\n  var propCount = ref.propCount;\\n  if (!type) {\\n    return cb();\\n  }\\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\\n  var ended = 0;\\n  var end = function () {\\n    el.removeEventListener(event, onEnd);\\n    cb();\\n  };\\n  var onEnd = function (e) {\\n    if (e.target === el) {\\n      if (++ended >= propCount) {\\n        end();\\n      }\\n    }\\n  };\\n  setTimeout(function () {\\n    if (ended < propCount) {\\n      end();\\n    }\\n  }, timeout + 1);\\n  el.addEventListener(event, onEnd);\\n}\\n\\nvar transformRE = /\\\\b(transform|all)(,|$)/;\\n\\nfunction getTransitionInfo(el, expectedType) {\\n  var styles = window.getComputedStyle(el);\\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\\n\\n  var type;\\n  var timeout = 0;\\n  var propCount = 0;\\n  /* istanbul ignore if */\\n  if (expectedType === TRANSITION) {\\n    if (transitionTimeout > 0) {\\n      type = TRANSITION;\\n      timeout = transitionTimeout;\\n      propCount = transitionDurations.length;\\n    }\\n  } else if (expectedType === ANIMATION) {\\n    if (animationTimeout > 0) {\\n      type = ANIMATION;\\n      timeout = animationTimeout;\\n      propCount = animationDurations.length;\\n    }\\n  } else {\\n    timeout = Math.max(transitionTimeout, animationTimeout);\\n    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;\\n    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;\\n  }\\n  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);\\n  return {\\n    type: type,\\n    timeout: timeout,\\n    propCount: propCount,\\n    hasTransform: hasTransform\\n  };\\n}\\n\\nfunction getTimeout(delays, durations) {\\n  /* istanbul ignore next */\\n  while (delays.length < durations.length) {\\n    delays = delays.concat(delays);\\n  }\\n\\n  return Math.max.apply(null, durations.map(function (d, i) {\\n    return toMs(d) + toMs(delays[i]);\\n  }));\\n}\\n\\nfunction toMs(s) {\\n  return Number(s.slice(0, -1)) * 1000;\\n}\\n\\n/*  */\\n\\nfunction enter(vnode, toggleDisplay) {\\n  var el = vnode.elm;\\n\\n  // call leave callback now\\n  if (isDef(el._leaveCb)) {\\n    el._leaveCb.cancelled = true;\\n    el._leaveCb();\\n  }\\n\\n  var data = resolveTransition(vnode.data.transition);\\n  if (isUndef(data)) {\\n    return;\\n  }\\n\\n  /* istanbul ignore if */\\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\\n    return;\\n  }\\n\\n  var css = data.css;\\n  var type = data.type;\\n  var enterClass = data.enterClass;\\n  var enterToClass = data.enterToClass;\\n  var enterActiveClass = data.enterActiveClass;\\n  var appearClass = data.appearClass;\\n  var appearToClass = data.appearToClass;\\n  var appearActiveClass = data.appearActiveClass;\\n  var beforeEnter = data.beforeEnter;\\n  var enter = data.enter;\\n  var afterEnter = data.afterEnter;\\n  var enterCancelled = data.enterCancelled;\\n  var beforeAppear = data.beforeAppear;\\n  var appear = data.appear;\\n  var afterAppear = data.afterAppear;\\n  var appearCancelled = data.appearCancelled;\\n  var duration = data.duration;\\n\\n  // activeInstance will always be the <transition> component managing this\\n  // transition. One edge case to check is when the <transition> is placed\\n  // as the root node of a child component. In that case we need to check\\n  // <transition>'s parent for appear check.\\n  var context = activeInstance;\\n  var transitionNode = activeInstance.$vnode;\\n  while (transitionNode && transitionNode.parent) {\\n    transitionNode = transitionNode.parent;\\n    context = transitionNode.context;\\n  }\\n\\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\\n\\n  if (isAppear && !appear && appear !== '') {\\n    return;\\n  }\\n\\n  var startClass = isAppear && appearClass ? appearClass : enterClass;\\n  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;\\n  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;\\n\\n  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;\\n  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;\\n  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;\\n  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;\\n\\n  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);\\n\\n  if (\\\"development\\\" !== 'production' && explicitEnterDuration != null) {\\n    checkDuration(explicitEnterDuration, 'enter', vnode);\\n  }\\n\\n  var expectsCSS = css !== false && !isIE9;\\n  var userWantsControl = getHookArgumentsLength(enterHook);\\n\\n  var cb = el._enterCb = once(function () {\\n    if (expectsCSS) {\\n      removeTransitionClass(el, toClass);\\n      removeTransitionClass(el, activeClass);\\n    }\\n    if (cb.cancelled) {\\n      if (expectsCSS) {\\n        removeTransitionClass(el, startClass);\\n      }\\n      enterCancelledHook && enterCancelledHook(el);\\n    } else {\\n      afterEnterHook && afterEnterHook(el);\\n    }\\n    el._enterCb = null;\\n  });\\n\\n  if (!vnode.data.show) {\\n    // remove pending leave element on enter by injecting an insert hook\\n    mergeVNodeHook(vnode, 'insert', function () {\\n      var parent = el.parentNode;\\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\\n      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {\\n        pendingNode.elm._leaveCb();\\n      }\\n      enterHook && enterHook(el, cb);\\n    });\\n  }\\n\\n  // start enter transition\\n  beforeEnterHook && beforeEnterHook(el);\\n  if (expectsCSS) {\\n    addTransitionClass(el, startClass);\\n    addTransitionClass(el, activeClass);\\n    nextFrame(function () {\\n      removeTransitionClass(el, startClass);\\n      if (!cb.cancelled) {\\n        addTransitionClass(el, toClass);\\n        if (!userWantsControl) {\\n          if (isValidDuration(explicitEnterDuration)) {\\n            setTimeout(cb, explicitEnterDuration);\\n          } else {\\n            whenTransitionEnds(el, type, cb);\\n          }\\n        }\\n      }\\n    });\\n  }\\n\\n  if (vnode.data.show) {\\n    toggleDisplay && toggleDisplay();\\n    enterHook && enterHook(el, cb);\\n  }\\n\\n  if (!expectsCSS && !userWantsControl) {\\n    cb();\\n  }\\n}\\n\\nfunction leave(vnode, rm) {\\n  var el = vnode.elm;\\n\\n  // call enter callback now\\n  if (isDef(el._enterCb)) {\\n    el._enterCb.cancelled = true;\\n    el._enterCb();\\n  }\\n\\n  var data = resolveTransition(vnode.data.transition);\\n  if (isUndef(data) || el.nodeType !== 1) {\\n    return rm();\\n  }\\n\\n  /* istanbul ignore if */\\n  if (isDef(el._leaveCb)) {\\n    return;\\n  }\\n\\n  var css = data.css;\\n  var type = data.type;\\n  var leaveClass = data.leaveClass;\\n  var leaveToClass = data.leaveToClass;\\n  var leaveActiveClass = data.leaveActiveClass;\\n  var beforeLeave = data.beforeLeave;\\n  var leave = data.leave;\\n  var afterLeave = data.afterLeave;\\n  var leaveCancelled = data.leaveCancelled;\\n  var delayLeave = data.delayLeave;\\n  var duration = data.duration;\\n\\n  var expectsCSS = css !== false && !isIE9;\\n  var userWantsControl = getHookArgumentsLength(leave);\\n\\n  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);\\n\\n  if (\\\"development\\\" !== 'production' && isDef(explicitLeaveDuration)) {\\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\\n  }\\n\\n  var cb = el._leaveCb = once(function () {\\n    if (el.parentNode && el.parentNode._pending) {\\n      el.parentNode._pending[vnode.key] = null;\\n    }\\n    if (expectsCSS) {\\n      removeTransitionClass(el, leaveToClass);\\n      removeTransitionClass(el, leaveActiveClass);\\n    }\\n    if (cb.cancelled) {\\n      if (expectsCSS) {\\n        removeTransitionClass(el, leaveClass);\\n      }\\n      leaveCancelled && leaveCancelled(el);\\n    } else {\\n      rm();\\n      afterLeave && afterLeave(el);\\n    }\\n    el._leaveCb = null;\\n  });\\n\\n  if (delayLeave) {\\n    delayLeave(performLeave);\\n  } else {\\n    performLeave();\\n  }\\n\\n  function performLeave() {\\n    // the delayed leave may have already been cancelled\\n    if (cb.cancelled) {\\n      return;\\n    }\\n    // record leaving element\\n    if (!vnode.data.show) {\\n      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;\\n    }\\n    beforeLeave && beforeLeave(el);\\n    if (expectsCSS) {\\n      addTransitionClass(el, leaveClass);\\n      addTransitionClass(el, leaveActiveClass);\\n      nextFrame(function () {\\n        removeTransitionClass(el, leaveClass);\\n        if (!cb.cancelled) {\\n          addTransitionClass(el, leaveToClass);\\n          if (!userWantsControl) {\\n            if (isValidDuration(explicitLeaveDuration)) {\\n              setTimeout(cb, explicitLeaveDuration);\\n            } else {\\n              whenTransitionEnds(el, type, cb);\\n            }\\n          }\\n        }\\n      });\\n    }\\n    leave && leave(el, cb);\\n    if (!expectsCSS && !userWantsControl) {\\n      cb();\\n    }\\n  }\\n}\\n\\n// only used in dev mode\\nfunction checkDuration(val, name, vnode) {\\n  if (typeof val !== 'number') {\\n    warn(\\\"<transition> explicit \\\" + name + \\\" duration is not a valid number - \\\" + \\\"got \\\" + JSON.stringify(val) + \\\".\\\", vnode.context);\\n  } else if (isNaN(val)) {\\n    warn(\\\"<transition> explicit \\\" + name + \\\" duration is NaN - \\\" + 'the duration expression might be incorrect.', vnode.context);\\n  }\\n}\\n\\nfunction isValidDuration(val) {\\n  return typeof val === 'number' && !isNaN(val);\\n}\\n\\n/**\\n * Normalize a transition hook's argument length. The hook may be:\\n * - a merged hook (invoker) with the original in .fns\\n * - a wrapped component method (check ._length)\\n * - a plain function (.length)\\n */\\nfunction getHookArgumentsLength(fn) {\\n  if (isUndef(fn)) {\\n    return false;\\n  }\\n  var invokerFns = fn.fns;\\n  if (isDef(invokerFns)) {\\n    // invoker\\n    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);\\n  } else {\\n    return (fn._length || fn.length) > 1;\\n  }\\n}\\n\\nfunction _enter(_, vnode) {\\n  if (vnode.data.show !== true) {\\n    enter(vnode);\\n  }\\n}\\n\\nvar transition = inBrowser ? {\\n  create: _enter,\\n  activate: _enter,\\n  remove: function remove$$1(vnode, rm) {\\n    /* istanbul ignore else */\\n    if (vnode.data.show !== true) {\\n      leave(vnode, rm);\\n    } else {\\n      rm();\\n    }\\n  }\\n} : {};\\n\\nvar platformModules = [attrs, klass, events, domProps, style, transition];\\n\\n/*  */\\n\\n// the directive module should be applied last, after all\\n// built-in modules have been applied.\\nvar modules = platformModules.concat(baseModules);\\n\\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\\n\\n/**\\n * Not type checking this file because flow doesn't like attaching\\n * properties to Elements.\\n */\\n\\n/* istanbul ignore if */\\nif (isIE9) {\\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\\n  document.addEventListener('selectionchange', function () {\\n    var el = document.activeElement;\\n    if (el && el.vmodel) {\\n      trigger(el, 'input');\\n    }\\n  });\\n}\\n\\nvar directive = {\\n  inserted: function inserted(el, binding, vnode, oldVnode) {\\n    if (vnode.tag === 'select') {\\n      // #6903\\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\\n        mergeVNodeHook(vnode, 'postpatch', function () {\\n          directive.componentUpdated(el, binding, vnode);\\n        });\\n      } else {\\n        setSelected(el, binding, vnode.context);\\n      }\\n      el._vOptions = [].map.call(el.options, getValue);\\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\\n      el._vModifiers = binding.modifiers;\\n      if (!binding.modifiers.lazy) {\\n        el.addEventListener('compositionstart', onCompositionStart);\\n        el.addEventListener('compositionend', onCompositionEnd);\\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\\n        // switching focus before confirming composition choice\\n        // this also fixes the issue where some browsers e.g. iOS Chrome\\n        // fires \\\"change\\\" instead of \\\"input\\\" on autocomplete.\\n        el.addEventListener('change', onCompositionEnd);\\n        /* istanbul ignore if */\\n        if (isIE9) {\\n          el.vmodel = true;\\n        }\\n      }\\n    }\\n  },\\n\\n  componentUpdated: function componentUpdated(el, binding, vnode) {\\n    if (vnode.tag === 'select') {\\n      setSelected(el, binding, vnode.context);\\n      // in case the options rendered by v-for have changed,\\n      // it's possible that the value is out-of-sync with the rendered options.\\n      // detect such cases and filter out values that no longer has a matching\\n      // option in the DOM.\\n      var prevOptions = el._vOptions;\\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\\n      if (curOptions.some(function (o, i) {\\n        return !looseEqual(o, prevOptions[i]);\\n      })) {\\n        // trigger change event if\\n        // no matching option found for at least one value\\n        var needReset = el.multiple ? binding.value.some(function (v) {\\n          return hasNoMatchingOption(v, curOptions);\\n        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\\n        if (needReset) {\\n          trigger(el, 'change');\\n        }\\n      }\\n    }\\n  }\\n};\\n\\nfunction setSelected(el, binding, vm) {\\n  actuallySetSelected(el, binding, vm);\\n  /* istanbul ignore if */\\n  if (isIE || isEdge) {\\n    setTimeout(function () {\\n      actuallySetSelected(el, binding, vm);\\n    }, 0);\\n  }\\n}\\n\\nfunction actuallySetSelected(el, binding, vm) {\\n  var value = binding.value;\\n  var isMultiple = el.multiple;\\n  if (isMultiple && !Array.isArray(value)) {\\n    \\\"development\\\" !== 'production' && warn(\\\"<select multiple v-model=\\\\\\\"\\\" + binding.expression + \\\"\\\\\\\"> \\\" + \\\"expects an Array value for its binding, but got \\\" + Object.prototype.toString.call(value).slice(8, -1), vm);\\n    return;\\n  }\\n  var selected, option;\\n  for (var i = 0, l = el.options.length; i < l; i++) {\\n    option = el.options[i];\\n    if (isMultiple) {\\n      selected = looseIndexOf(value, getValue(option)) > -1;\\n      if (option.selected !== selected) {\\n        option.selected = selected;\\n      }\\n    } else {\\n      if (looseEqual(getValue(option), value)) {\\n        if (el.selectedIndex !== i) {\\n          el.selectedIndex = i;\\n        }\\n        return;\\n      }\\n    }\\n  }\\n  if (!isMultiple) {\\n    el.selectedIndex = -1;\\n  }\\n}\\n\\nfunction hasNoMatchingOption(value, options) {\\n  return options.every(function (o) {\\n    return !looseEqual(o, value);\\n  });\\n}\\n\\nfunction getValue(option) {\\n  return '_value' in option ? option._value : option.value;\\n}\\n\\nfunction onCompositionStart(e) {\\n  e.target.composing = true;\\n}\\n\\nfunction onCompositionEnd(e) {\\n  // prevent triggering an input event for no reason\\n  if (!e.target.composing) {\\n    return;\\n  }\\n  e.target.composing = false;\\n  trigger(e.target, 'input');\\n}\\n\\nfunction trigger(el, type) {\\n  var e = document.createEvent('HTMLEvents');\\n  e.initEvent(type, true, true);\\n  el.dispatchEvent(e);\\n}\\n\\n/*  */\\n\\n// recursively search for possible transition defined inside the component root\\nfunction locateNode(vnode) {\\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;\\n}\\n\\nvar show = {\\n  bind: function bind(el, ref, vnode) {\\n    var value = ref.value;\\n\\n    vnode = locateNode(vnode);\\n    var transition$$1 = vnode.data && vnode.data.transition;\\n    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;\\n    if (value && transition$$1) {\\n      vnode.data.show = true;\\n      enter(vnode, function () {\\n        el.style.display = originalDisplay;\\n      });\\n    } else {\\n      el.style.display = value ? originalDisplay : 'none';\\n    }\\n  },\\n\\n  update: function update(el, ref, vnode) {\\n    var value = ref.value;\\n    var oldValue = ref.oldValue;\\n\\n    /* istanbul ignore if */\\n    if (!value === !oldValue) {\\n      return;\\n    }\\n    vnode = locateNode(vnode);\\n    var transition$$1 = vnode.data && vnode.data.transition;\\n    if (transition$$1) {\\n      vnode.data.show = true;\\n      if (value) {\\n        enter(vnode, function () {\\n          el.style.display = el.__vOriginalDisplay;\\n        });\\n      } else {\\n        leave(vnode, function () {\\n          el.style.display = 'none';\\n        });\\n      }\\n    } else {\\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\\n    }\\n  },\\n\\n  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {\\n    if (!isDestroy) {\\n      el.style.display = el.__vOriginalDisplay;\\n    }\\n  }\\n};\\n\\nvar platformDirectives = {\\n  model: directive,\\n  show: show\\n\\n  /*  */\\n\\n  // Provides transition support for a single element/component.\\n  // supports transition mode (out-in / in-out)\\n\\n};var transitionProps = {\\n  name: String,\\n  appear: Boolean,\\n  css: Boolean,\\n  mode: String,\\n  type: String,\\n  enterClass: String,\\n  leaveClass: String,\\n  enterToClass: String,\\n  leaveToClass: String,\\n  enterActiveClass: String,\\n  leaveActiveClass: String,\\n  appearClass: String,\\n  appearActiveClass: String,\\n  appearToClass: String,\\n  duration: [Number, String, Object]\\n};\\n\\n// in case the child is also an abstract component, e.g. <keep-alive>\\n// we want to recursively retrieve the real component to be rendered\\nfunction getRealChild(vnode) {\\n  var compOptions = vnode && vnode.componentOptions;\\n  if (compOptions && compOptions.Ctor.options.abstract) {\\n    return getRealChild(getFirstComponentChild(compOptions.children));\\n  } else {\\n    return vnode;\\n  }\\n}\\n\\nfunction extractTransitionData(comp) {\\n  var data = {};\\n  var options = comp.$options;\\n  // props\\n  for (var key in options.propsData) {\\n    data[key] = comp[key];\\n  }\\n  // events.\\n  // extract listeners and pass them directly to the transition methods\\n  var listeners = options._parentListeners;\\n  for (var key$1 in listeners) {\\n    data[camelize(key$1)] = listeners[key$1];\\n  }\\n  return data;\\n}\\n\\nfunction placeholder(h, rawChild) {\\n  if (/\\\\d-keep-alive$/.test(rawChild.tag)) {\\n    return h('keep-alive', {\\n      props: rawChild.componentOptions.propsData\\n    });\\n  }\\n}\\n\\nfunction hasParentTransition(vnode) {\\n  while (vnode = vnode.parent) {\\n    if (vnode.data.transition) {\\n      return true;\\n    }\\n  }\\n}\\n\\nfunction isSameChild(child, oldChild) {\\n  return oldChild.key === child.key && oldChild.tag === child.tag;\\n}\\n\\nvar Transition = {\\n  name: 'transition',\\n  props: transitionProps,\\n  abstract: true,\\n\\n  render: function render(h) {\\n    var this$1 = this;\\n\\n    var children = this.$slots.default;\\n    if (!children) {\\n      return;\\n    }\\n\\n    // filter out text nodes (possible whitespaces)\\n    children = children.filter(function (c) {\\n      return c.tag || isAsyncPlaceholder(c);\\n    });\\n    /* istanbul ignore if */\\n    if (!children.length) {\\n      return;\\n    }\\n\\n    // warn multiple elements\\n    if (\\\"development\\\" !== 'production' && children.length > 1) {\\n      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);\\n    }\\n\\n    var mode = this.mode;\\n\\n    // warn invalid mode\\n    if (\\\"development\\\" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {\\n      warn('invalid <transition> mode: ' + mode, this.$parent);\\n    }\\n\\n    var rawChild = children[0];\\n\\n    // if this is a component root node and the component's\\n    // parent container node also has transition, skip.\\n    if (hasParentTransition(this.$vnode)) {\\n      return rawChild;\\n    }\\n\\n    // apply transition data to child\\n    // use getRealChild() to ignore abstract components e.g. keep-alive\\n    var child = getRealChild(rawChild);\\n    /* istanbul ignore if */\\n    if (!child) {\\n      return rawChild;\\n    }\\n\\n    if (this._leaving) {\\n      return placeholder(h, rawChild);\\n    }\\n\\n    // ensure a key that is unique to the vnode type and to this transition\\n    // component instance. This key will be used to remove pending leaving nodes\\n    // during entering.\\n    var id = \\\"__transition-\\\" + this._uid + \\\"-\\\";\\n    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;\\n\\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\\n    var oldRawChild = this._vnode;\\n    var oldChild = getRealChild(oldRawChild);\\n\\n    // mark v-show\\n    // so that the transition module can hand over the control to the directive\\n    if (child.data.directives && child.data.directives.some(function (d) {\\n      return d.name === 'show';\\n    })) {\\n      child.data.show = true;\\n    }\\n\\n    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) &&\\n    // #6687 component root is a comment node\\n    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {\\n      // replace old child transition data with fresh one\\n      // important for dynamic transitions!\\n      var oldData = oldChild.data.transition = extend({}, data);\\n      // handle transition mode\\n      if (mode === 'out-in') {\\n        // return placeholder node and queue update when leave finishes\\n        this._leaving = true;\\n        mergeVNodeHook(oldData, 'afterLeave', function () {\\n          this$1._leaving = false;\\n          this$1.$forceUpdate();\\n        });\\n        return placeholder(h, rawChild);\\n      } else if (mode === 'in-out') {\\n        if (isAsyncPlaceholder(child)) {\\n          return oldRawChild;\\n        }\\n        var delayedLeave;\\n        var performLeave = function () {\\n          delayedLeave();\\n        };\\n        mergeVNodeHook(data, 'afterEnter', performLeave);\\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) {\\n          delayedLeave = leave;\\n        });\\n      }\\n    }\\n\\n    return rawChild;\\n  }\\n\\n  /*  */\\n\\n  // Provides transition support for list items.\\n  // supports move transitions using the FLIP technique.\\n\\n  // Because the vdom's children update algorithm is \\\"unstable\\\" - i.e.\\n  // it doesn't guarantee the relative positioning of removed elements,\\n  // we force transition-group to update its children into two passes:\\n  // in the first pass, we remove all nodes that need to be removed,\\n  // triggering their leaving transition; in the second pass, we insert/move\\n  // into the final desired state. This way in the second pass removed\\n  // nodes will remain where they should be.\\n\\n};var props = extend({\\n  tag: String,\\n  moveClass: String\\n}, transitionProps);\\n\\ndelete props.mode;\\n\\nvar TransitionGroup = {\\n  props: props,\\n\\n  render: function render(h) {\\n    var tag = this.tag || this.$vnode.data.tag || 'span';\\n    var map = Object.create(null);\\n    var prevChildren = this.prevChildren = this.children;\\n    var rawChildren = this.$slots.default || [];\\n    var children = this.children = [];\\n    var transitionData = extractTransitionData(this);\\n\\n    for (var i = 0; i < rawChildren.length; i++) {\\n      var c = rawChildren[i];\\n      if (c.tag) {\\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\\n          children.push(c);\\n          map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;\\n        } else if (true) {\\n          var opts = c.componentOptions;\\n          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;\\n          warn(\\\"<transition-group> children must be keyed: <\\\" + name + \\\">\\\");\\n        }\\n      }\\n    }\\n\\n    if (prevChildren) {\\n      var kept = [];\\n      var removed = [];\\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\\n        var c$1 = prevChildren[i$1];\\n        c$1.data.transition = transitionData;\\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\\n        if (map[c$1.key]) {\\n          kept.push(c$1);\\n        } else {\\n          removed.push(c$1);\\n        }\\n      }\\n      this.kept = h(tag, null, kept);\\n      this.removed = removed;\\n    }\\n\\n    return h(tag, null, children);\\n  },\\n\\n  beforeUpdate: function beforeUpdate() {\\n    // force removing pass\\n    this.__patch__(this._vnode, this.kept, false, // hydrating\\n    true // removeOnly (!important, avoids unnecessary moves)\\n    );\\n    this._vnode = this.kept;\\n  },\\n\\n  updated: function updated() {\\n    var children = this.prevChildren;\\n    var moveClass = this.moveClass || (this.name || 'v') + '-move';\\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\\n      return;\\n    }\\n\\n    // we divide the work into three loops to avoid mixing DOM reads and writes\\n    // in each iteration - which helps prevent layout thrashing.\\n    children.forEach(callPendingCbs);\\n    children.forEach(recordPosition);\\n    children.forEach(applyTranslation);\\n\\n    // force reflow to put everything in position\\n    // assign to this to avoid being removed in tree-shaking\\n    // $flow-disable-line\\n    this._reflow = document.body.offsetHeight;\\n\\n    children.forEach(function (c) {\\n      if (c.data.moved) {\\n        var el = c.elm;\\n        var s = el.style;\\n        addTransitionClass(el, moveClass);\\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {\\n          if (!e || /transform$/.test(e.propertyName)) {\\n            el.removeEventListener(transitionEndEvent, cb);\\n            el._moveCb = null;\\n            removeTransitionClass(el, moveClass);\\n          }\\n        });\\n      }\\n    });\\n  },\\n\\n  methods: {\\n    hasMove: function hasMove(el, moveClass) {\\n      /* istanbul ignore if */\\n      if (!hasTransition) {\\n        return false;\\n      }\\n      /* istanbul ignore if */\\n      if (this._hasMove) {\\n        return this._hasMove;\\n      }\\n      // Detect whether an element with the move class applied has\\n      // CSS transitions. Since the element may be inside an entering\\n      // transition at this very moment, we make a clone of it and remove\\n      // all other transition classes applied to ensure only the move class\\n      // is applied.\\n      var clone = el.cloneNode();\\n      if (el._transitionClasses) {\\n        el._transitionClasses.forEach(function (cls) {\\n          removeClass(clone, cls);\\n        });\\n      }\\n      addClass(clone, moveClass);\\n      clone.style.display = 'none';\\n      this.$el.appendChild(clone);\\n      var info = getTransitionInfo(clone);\\n      this.$el.removeChild(clone);\\n      return this._hasMove = info.hasTransform;\\n    }\\n  }\\n};\\n\\nfunction callPendingCbs(c) {\\n  /* istanbul ignore if */\\n  if (c.elm._moveCb) {\\n    c.elm._moveCb();\\n  }\\n  /* istanbul ignore if */\\n  if (c.elm._enterCb) {\\n    c.elm._enterCb();\\n  }\\n}\\n\\nfunction recordPosition(c) {\\n  c.data.newPos = c.elm.getBoundingClientRect();\\n}\\n\\nfunction applyTranslation(c) {\\n  var oldPos = c.data.pos;\\n  var newPos = c.data.newPos;\\n  var dx = oldPos.left - newPos.left;\\n  var dy = oldPos.top - newPos.top;\\n  if (dx || dy) {\\n    c.data.moved = true;\\n    var s = c.elm.style;\\n    s.transform = s.WebkitTransform = \\\"translate(\\\" + dx + \\\"px,\\\" + dy + \\\"px)\\\";\\n    s.transitionDuration = '0s';\\n  }\\n}\\n\\nvar platformComponents = {\\n  Transition: Transition,\\n  TransitionGroup: TransitionGroup\\n\\n  /*  */\\n\\n  // install platform specific utils\\n};Vue.config.mustUseProp = mustUseProp;\\nVue.config.isReservedTag = isReservedTag;\\nVue.config.isReservedAttr = isReservedAttr;\\nVue.config.getTagNamespace = getTagNamespace;\\nVue.config.isUnknownElement = isUnknownElement;\\n\\n// install platform runtime directives & components\\nextend(Vue.options.directives, platformDirectives);\\nextend(Vue.options.components, platformComponents);\\n\\n// install platform patch function\\nVue.prototype.__patch__ = inBrowser ? patch : noop;\\n\\n// public mount method\\nVue.prototype.$mount = function (el, hydrating) {\\n  el = el && inBrowser ? query(el) : undefined;\\n  return mountComponent(this, el, hydrating);\\n};\\n\\n// devtools global hook\\n/* istanbul ignore next */\\nif (inBrowser) {\\n  setTimeout(function () {\\n    if (config.devtools) {\\n      if (devtools) {\\n        devtools.emit('init', Vue);\\n      } else if (\\\"development\\\" !== 'production' && \\\"development\\\" !== 'test' && isChrome) {\\n        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\\\\n' + 'https://github.com/vuejs/vue-devtools');\\n      }\\n    }\\n    if (\\\"development\\\" !== 'production' && \\\"development\\\" !== 'test' && config.productionTip !== false && typeof console !== 'undefined') {\\n      console[console.info ? 'info' : 'log'](\\\"You are running Vue in development mode.\\\\n\\\" + \\\"Make sure to turn on production mode when deploying for production.\\\\n\\\" + \\\"See more tips at https://vuejs.org/guide/deployment.html\\\");\\n    }\\n  }, 0);\\n}\\n\\n/*  */\\n\\nvar defaultTagRE = /\\\\{\\\\{((?:.|\\\\n)+?)\\\\}\\\\}/g;\\nvar regexEscapeRE = /[-.*+?^${}()|[\\\\]\\\\/\\\\\\\\]/g;\\n\\nvar buildRegex = cached(function (delimiters) {\\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\\\\\$&');\\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\\\\\$&');\\n  return new RegExp(open + '((?:.|\\\\\\\\n)+?)' + close, 'g');\\n});\\n\\nfunction parseText(text, delimiters) {\\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\\n  if (!tagRE.test(text)) {\\n    return;\\n  }\\n  var tokens = [];\\n  var rawTokens = [];\\n  var lastIndex = tagRE.lastIndex = 0;\\n  var match, index, tokenValue;\\n  while (match = tagRE.exec(text)) {\\n    index = match.index;\\n    // push text token\\n    if (index > lastIndex) {\\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\\n      tokens.push(JSON.stringify(tokenValue));\\n    }\\n    // tag token\\n    var exp = parseFilters(match[1].trim());\\n    tokens.push(\\\"_s(\\\" + exp + \\\")\\\");\\n    rawTokens.push({ '@binding': exp });\\n    lastIndex = index + match[0].length;\\n  }\\n  if (lastIndex < text.length) {\\n    rawTokens.push(tokenValue = text.slice(lastIndex));\\n    tokens.push(JSON.stringify(tokenValue));\\n  }\\n  return {\\n    expression: tokens.join('+'),\\n    tokens: rawTokens\\n  };\\n}\\n\\n/*  */\\n\\nfunction transformNode(el, options) {\\n  var warn = options.warn || baseWarn;\\n  var staticClass = getAndRemoveAttr(el, 'class');\\n  if (\\\"development\\\" !== 'production' && staticClass) {\\n    var res = parseText(staticClass, options.delimiters);\\n    if (res) {\\n      warn(\\\"class=\\\\\\\"\\\" + staticClass + \\\"\\\\\\\": \\\" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class=\\\"{{ val }}\\\">, use <div :class=\\\"val\\\">.');\\n    }\\n  }\\n  if (staticClass) {\\n    el.staticClass = JSON.stringify(staticClass);\\n  }\\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\\n  if (classBinding) {\\n    el.classBinding = classBinding;\\n  }\\n}\\n\\nfunction genData(el) {\\n  var data = '';\\n  if (el.staticClass) {\\n    data += \\\"staticClass:\\\" + el.staticClass + \\\",\\\";\\n  }\\n  if (el.classBinding) {\\n    data += \\\"class:\\\" + el.classBinding + \\\",\\\";\\n  }\\n  return data;\\n}\\n\\nvar klass$1 = {\\n  staticKeys: ['staticClass'],\\n  transformNode: transformNode,\\n  genData: genData\\n\\n  /*  */\\n\\n};function transformNode$1(el, options) {\\n  var warn = options.warn || baseWarn;\\n  var staticStyle = getAndRemoveAttr(el, 'style');\\n  if (staticStyle) {\\n    /* istanbul ignore if */\\n    if (true) {\\n      var res = parseText(staticStyle, options.delimiters);\\n      if (res) {\\n        warn(\\\"style=\\\\\\\"\\\" + staticStyle + \\\"\\\\\\\": \\\" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style=\\\"{{ val }}\\\">, use <div :style=\\\"val\\\">.');\\n      }\\n    }\\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\\n  }\\n\\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\\n  if (styleBinding) {\\n    el.styleBinding = styleBinding;\\n  }\\n}\\n\\nfunction genData$1(el) {\\n  var data = '';\\n  if (el.staticStyle) {\\n    data += \\\"staticStyle:\\\" + el.staticStyle + \\\",\\\";\\n  }\\n  if (el.styleBinding) {\\n    data += \\\"style:(\\\" + el.styleBinding + \\\"),\\\";\\n  }\\n  return data;\\n}\\n\\nvar style$1 = {\\n  staticKeys: ['staticStyle'],\\n  transformNode: transformNode$1,\\n  genData: genData$1\\n\\n  /*  */\\n\\n};var decoder;\\n\\nvar he = {\\n  decode: function decode(html) {\\n    decoder = decoder || document.createElement('div');\\n    decoder.innerHTML = html;\\n    return decoder.textContent;\\n  }\\n\\n  /*  */\\n\\n};var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr');\\n\\n// Elements that you can, intentionally, leave open\\n// (and which close themselves)\\nvar canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');\\n\\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\\nvar isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');\\n\\n/**\\n * Not type-checking this file because it's mostly vendor code.\\n */\\n\\n/*!\\n * HTML Parser By John Resig (ejohn.org)\\n * Modified by Juriy \\\"kangax\\\" Zaytsev\\n * Original code by Erik Arvidsson, Mozilla Public License\\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\\n */\\n\\n// Regular Expressions for parsing tags and attributes\\nvar attribute = /^\\\\s*([^\\\\s\\\"'<>\\\\/=]+)(?:\\\\s*(=)\\\\s*(?:\\\"([^\\\"]*)\\\"+|'([^']*)'+|([^\\\\s\\\"'=<>`]+)))?/;\\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\\n// but for Vue templates we can enforce a simple charset\\nvar ncname = '[a-zA-Z_][\\\\\\\\w\\\\\\\\-\\\\\\\\.]*';\\nvar qnameCapture = \\\"((?:\\\" + ncname + \\\"\\\\\\\\:)?\\\" + ncname + \\\")\\\";\\nvar startTagOpen = new RegExp(\\\"^<\\\" + qnameCapture);\\nvar startTagClose = /^\\\\s*(\\\\/?)>/;\\nvar endTag = new RegExp(\\\"^<\\\\\\\\/\\\" + qnameCapture + \\\"[^>]*>\\\");\\nvar doctype = /^<!DOCTYPE [^>]+>/i;\\n// #7298: escape - to avoid being pased as HTML comment when inlined in page\\nvar comment = /^<!\\\\--/;\\nvar conditionalComment = /^<!\\\\[/;\\n\\nvar IS_REGEX_CAPTURING_BROKEN = false;\\n'x'.replace(/x(.)?/g, function (m, g) {\\n  IS_REGEX_CAPTURING_BROKEN = g === '';\\n});\\n\\n// Special Elements (can contain anything)\\nvar isPlainTextElement = makeMap('script,style,textarea', true);\\nvar reCache = {};\\n\\nvar decodingMap = {\\n  '&lt;': '<',\\n  '&gt;': '>',\\n  '&quot;': '\\\"',\\n  '&amp;': '&',\\n  '&#10;': '\\\\n',\\n  '&#9;': '\\\\t'\\n};\\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10|#9);/g;\\n\\n// #5992\\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\\nvar shouldIgnoreFirstNewline = function (tag, html) {\\n  return tag && isIgnoreNewlineTag(tag) && html[0] === '\\\\n';\\n};\\n\\nfunction decodeAttr(value, shouldDecodeNewlines) {\\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\\n  return value.replace(re, function (match) {\\n    return decodingMap[match];\\n  });\\n}\\n\\nfunction parseHTML(html, options) {\\n  var stack = [];\\n  var expectHTML = options.expectHTML;\\n  var isUnaryTag$$1 = options.isUnaryTag || no;\\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\\n  var index = 0;\\n  var last, lastTag;\\n  while (html) {\\n    last = html;\\n    // Make sure we're not in a plaintext content element like script/style\\n    if (!lastTag || !isPlainTextElement(lastTag)) {\\n      var textEnd = html.indexOf('<');\\n      if (textEnd === 0) {\\n        // Comment:\\n        if (comment.test(html)) {\\n          var commentEnd = html.indexOf('-->');\\n\\n          if (commentEnd >= 0) {\\n            if (options.shouldKeepComment) {\\n              options.comment(html.substring(4, commentEnd));\\n            }\\n            advance(commentEnd + 3);\\n            continue;\\n          }\\n        }\\n\\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\\n        if (conditionalComment.test(html)) {\\n          var conditionalEnd = html.indexOf(']>');\\n\\n          if (conditionalEnd >= 0) {\\n            advance(conditionalEnd + 2);\\n            continue;\\n          }\\n        }\\n\\n        // Doctype:\\n        var doctypeMatch = html.match(doctype);\\n        if (doctypeMatch) {\\n          advance(doctypeMatch[0].length);\\n          continue;\\n        }\\n\\n        // End tag:\\n        var endTagMatch = html.match(endTag);\\n        if (endTagMatch) {\\n          var curIndex = index;\\n          advance(endTagMatch[0].length);\\n          parseEndTag(endTagMatch[1], curIndex, index);\\n          continue;\\n        }\\n\\n        // Start tag:\\n        var startTagMatch = parseStartTag();\\n        if (startTagMatch) {\\n          handleStartTag(startTagMatch);\\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\\n            advance(1);\\n          }\\n          continue;\\n        }\\n      }\\n\\n      var text = void 0,\\n          rest = void 0,\\n          next = void 0;\\n      if (textEnd >= 0) {\\n        rest = html.slice(textEnd);\\n        while (!endTag.test(rest) && !startTagOpen.test(rest) && !comment.test(rest) && !conditionalComment.test(rest)) {\\n          // < in plain text, be forgiving and treat it as text\\n          next = rest.indexOf('<', 1);\\n          if (next < 0) {\\n            break;\\n          }\\n          textEnd += next;\\n          rest = html.slice(textEnd);\\n        }\\n        text = html.substring(0, textEnd);\\n        advance(textEnd);\\n      }\\n\\n      if (textEnd < 0) {\\n        text = html;\\n        html = '';\\n      }\\n\\n      if (options.chars && text) {\\n        options.chars(text);\\n      }\\n    } else {\\n      var endTagLength = 0;\\n      var stackedTag = lastTag.toLowerCase();\\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\\\\\s\\\\\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\\n        endTagLength = endTag.length;\\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\\n          text = text.replace(/<!\\\\--([\\\\s\\\\S]*?)-->/g, '$1') // #7298\\n          .replace(/<!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)]]>/g, '$1');\\n        }\\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\\n          text = text.slice(1);\\n        }\\n        if (options.chars) {\\n          options.chars(text);\\n        }\\n        return '';\\n      });\\n      index += html.length - rest$1.length;\\n      html = rest$1;\\n      parseEndTag(stackedTag, index - endTagLength, index);\\n    }\\n\\n    if (html === last) {\\n      options.chars && options.chars(html);\\n      if (\\\"development\\\" !== 'production' && !stack.length && options.warn) {\\n        options.warn(\\\"Mal-formatted tag at end of template: \\\\\\\"\\\" + html + \\\"\\\\\\\"\\\");\\n      }\\n      break;\\n    }\\n  }\\n\\n  // Clean up any remaining tags\\n  parseEndTag();\\n\\n  function advance(n) {\\n    index += n;\\n    html = html.substring(n);\\n  }\\n\\n  function parseStartTag() {\\n    var start = html.match(startTagOpen);\\n    if (start) {\\n      var match = {\\n        tagName: start[1],\\n        attrs: [],\\n        start: index\\n      };\\n      advance(start[0].length);\\n      var end, attr;\\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\\n        advance(attr[0].length);\\n        match.attrs.push(attr);\\n      }\\n      if (end) {\\n        match.unarySlash = end[1];\\n        advance(end[0].length);\\n        match.end = index;\\n        return match;\\n      }\\n    }\\n  }\\n\\n  function handleStartTag(match) {\\n    var tagName = match.tagName;\\n    var unarySlash = match.unarySlash;\\n\\n    if (expectHTML) {\\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\\n        parseEndTag(lastTag);\\n      }\\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\\n        parseEndTag(tagName);\\n      }\\n    }\\n\\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\\n\\n    var l = match.attrs.length;\\n    var attrs = new Array(l);\\n    for (var i = 0; i < l; i++) {\\n      var args = match.attrs[i];\\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\\\"\\\"') === -1) {\\n        if (args[3] === '') {\\n          delete args[3];\\n        }\\n        if (args[4] === '') {\\n          delete args[4];\\n        }\\n        if (args[5] === '') {\\n          delete args[5];\\n        }\\n      }\\n      var value = args[3] || args[4] || args[5] || '';\\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href' ? options.shouldDecodeNewlinesForHref : options.shouldDecodeNewlines;\\n      attrs[i] = {\\n        name: args[1],\\n        value: decodeAttr(value, shouldDecodeNewlines)\\n      };\\n    }\\n\\n    if (!unary) {\\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\\n      lastTag = tagName;\\n    }\\n\\n    if (options.start) {\\n      options.start(tagName, attrs, unary, match.start, match.end);\\n    }\\n  }\\n\\n  function parseEndTag(tagName, start, end) {\\n    var pos, lowerCasedTagName;\\n    if (start == null) {\\n      start = index;\\n    }\\n    if (end == null) {\\n      end = index;\\n    }\\n\\n    if (tagName) {\\n      lowerCasedTagName = tagName.toLowerCase();\\n    }\\n\\n    // Find the closest opened tag of the same type\\n    if (tagName) {\\n      for (pos = stack.length - 1; pos >= 0; pos--) {\\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\\n          break;\\n        }\\n      }\\n    } else {\\n      // If no tag name is provided, clean shop\\n      pos = 0;\\n    }\\n\\n    if (pos >= 0) {\\n      // Close all the open elements, up the stack\\n      for (var i = stack.length - 1; i >= pos; i--) {\\n        if (\\\"development\\\" !== 'production' && (i > pos || !tagName) && options.warn) {\\n          options.warn(\\\"tag <\\\" + stack[i].tag + \\\"> has no matching end tag.\\\");\\n        }\\n        if (options.end) {\\n          options.end(stack[i].tag, start, end);\\n        }\\n      }\\n\\n      // Remove the open elements from the stack\\n      stack.length = pos;\\n      lastTag = pos && stack[pos - 1].tag;\\n    } else if (lowerCasedTagName === 'br') {\\n      if (options.start) {\\n        options.start(tagName, [], true, start, end);\\n      }\\n    } else if (lowerCasedTagName === 'p') {\\n      if (options.start) {\\n        options.start(tagName, [], false, start, end);\\n      }\\n      if (options.end) {\\n        options.end(tagName, start, end);\\n      }\\n    }\\n  }\\n}\\n\\n/*  */\\n\\nvar onRE = /^@|^v-on:/;\\nvar dirRE = /^v-|^@|^:/;\\nvar forAliasRE = /([^]*?)\\\\s+(?:in|of)\\\\s+([^]*)/;\\nvar forIteratorRE = /,([^,\\\\}\\\\]]*)(?:,([^,\\\\}\\\\]]*))?$/;\\nvar stripParensRE = /^\\\\(|\\\\)$/g;\\n\\nvar argRE = /:(.*)$/;\\nvar bindRE = /^:|^v-bind:/;\\nvar modifierRE = /\\\\.[^.]+/g;\\n\\nvar decodeHTMLCached = cached(he.decode);\\n\\n// configurable state\\nvar warn$2;\\nvar delimiters;\\nvar transforms;\\nvar preTransforms;\\nvar postTransforms;\\nvar platformIsPreTag;\\nvar platformMustUseProp;\\nvar platformGetTagNamespace;\\n\\nfunction createASTElement(tag, attrs, parent) {\\n  return {\\n    type: 1,\\n    tag: tag,\\n    attrsList: attrs,\\n    attrsMap: makeAttrsMap(attrs),\\n    parent: parent,\\n    children: []\\n  };\\n}\\n\\n/**\\n * Convert HTML string to AST.\\n */\\nfunction parse(template, options) {\\n  warn$2 = options.warn || baseWarn;\\n\\n  platformIsPreTag = options.isPreTag || no;\\n  platformMustUseProp = options.mustUseProp || no;\\n  platformGetTagNamespace = options.getTagNamespace || no;\\n\\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\\n\\n  delimiters = options.delimiters;\\n\\n  var stack = [];\\n  var preserveWhitespace = options.preserveWhitespace !== false;\\n  var root;\\n  var currentParent;\\n  var inVPre = false;\\n  var inPre = false;\\n  var warned = false;\\n\\n  function warnOnce(msg) {\\n    if (!warned) {\\n      warned = true;\\n      warn$2(msg);\\n    }\\n  }\\n\\n  function closeElement(element) {\\n    // check pre state\\n    if (element.pre) {\\n      inVPre = false;\\n    }\\n    if (platformIsPreTag(element.tag)) {\\n      inPre = false;\\n    }\\n    // apply post-transforms\\n    for (var i = 0; i < postTransforms.length; i++) {\\n      postTransforms[i](element, options);\\n    }\\n  }\\n\\n  parseHTML(template, {\\n    warn: warn$2,\\n    expectHTML: options.expectHTML,\\n    isUnaryTag: options.isUnaryTag,\\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\\n    shouldKeepComment: options.comments,\\n    start: function start(tag, attrs, unary) {\\n      // check namespace.\\n      // inherit parent ns if there is one\\n      var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);\\n\\n      // handle IE svg bug\\n      /* istanbul ignore if */\\n      if (isIE && ns === 'svg') {\\n        attrs = guardIESVGBug(attrs);\\n      }\\n\\n      var element = createASTElement(tag, attrs, currentParent);\\n      if (ns) {\\n        element.ns = ns;\\n      }\\n\\n      if (isForbiddenTag(element) && !isServerRendering()) {\\n        element.forbidden = true;\\n        \\\"development\\\" !== 'production' && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + \\\"<\\\" + tag + \\\">\\\" + ', as they will not be parsed.');\\n      }\\n\\n      // apply pre-transforms\\n      for (var i = 0; i < preTransforms.length; i++) {\\n        element = preTransforms[i](element, options) || element;\\n      }\\n\\n      if (!inVPre) {\\n        processPre(element);\\n        if (element.pre) {\\n          inVPre = true;\\n        }\\n      }\\n      if (platformIsPreTag(element.tag)) {\\n        inPre = true;\\n      }\\n      if (inVPre) {\\n        processRawAttrs(element);\\n      } else if (!element.processed) {\\n        // structural directives\\n        processFor(element);\\n        processIf(element);\\n        processOnce(element);\\n        // element-scope stuff\\n        processElement(element, options);\\n      }\\n\\n      function checkRootConstraints(el) {\\n        if (true) {\\n          if (el.tag === 'slot' || el.tag === 'template') {\\n            warnOnce(\\\"Cannot use <\\\" + el.tag + \\\"> as component root element because it may \\\" + 'contain multiple nodes.');\\n          }\\n          if (el.attrsMap.hasOwnProperty('v-for')) {\\n            warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');\\n          }\\n        }\\n      }\\n\\n      // tree management\\n      if (!root) {\\n        root = element;\\n        checkRootConstraints(root);\\n      } else if (!stack.length) {\\n        // allow root elements with v-if, v-else-if and v-else\\n        if (root.if && (element.elseif || element.else)) {\\n          checkRootConstraints(element);\\n          addIfCondition(root, {\\n            exp: element.elseif,\\n            block: element\\n          });\\n        } else if (true) {\\n          warnOnce(\\\"Component template should contain exactly one root element. \\\" + \\\"If you are using v-if on multiple elements, \\\" + \\\"use v-else-if to chain them instead.\\\");\\n        }\\n      }\\n      if (currentParent && !element.forbidden) {\\n        if (element.elseif || element.else) {\\n          processIfConditions(element, currentParent);\\n        } else if (element.slotScope) {\\n          // scoped slot\\n          currentParent.plain = false;\\n          var name = element.slotTarget || '\\\"default\\\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\\n        } else {\\n          currentParent.children.push(element);\\n          element.parent = currentParent;\\n        }\\n      }\\n      if (!unary) {\\n        currentParent = element;\\n        stack.push(element);\\n      } else {\\n        closeElement(element);\\n      }\\n    },\\n\\n    end: function end() {\\n      // remove trailing whitespace\\n      var element = stack[stack.length - 1];\\n      var lastNode = element.children[element.children.length - 1];\\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\\n        element.children.pop();\\n      }\\n      // pop stack\\n      stack.length -= 1;\\n      currentParent = stack[stack.length - 1];\\n      closeElement(element);\\n    },\\n\\n    chars: function chars(text) {\\n      if (!currentParent) {\\n        if (true) {\\n          if (text === template) {\\n            warnOnce('Component template requires a root element, rather than just text.');\\n          } else if (text = text.trim()) {\\n            warnOnce(\\\"text \\\\\\\"\\\" + text + \\\"\\\\\\\" outside root element will be ignored.\\\");\\n          }\\n        }\\n        return;\\n      }\\n      // IE textarea placeholder bug\\n      /* istanbul ignore if */\\n      if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {\\n        return;\\n      }\\n      var children = currentParent.children;\\n      text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\\n      // only preserve whitespace if its not right after a starting tag\\n      : preserveWhitespace && children.length ? ' ' : '';\\n      if (text) {\\n        var res;\\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\\n          children.push({\\n            type: 2,\\n            expression: res.expression,\\n            tokens: res.tokens,\\n            text: text\\n          });\\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\\n          children.push({\\n            type: 3,\\n            text: text\\n          });\\n        }\\n      }\\n    },\\n    comment: function comment(text) {\\n      currentParent.children.push({\\n        type: 3,\\n        text: text,\\n        isComment: true\\n      });\\n    }\\n  });\\n  return root;\\n}\\n\\nfunction processPre(el) {\\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\\n    el.pre = true;\\n  }\\n}\\n\\nfunction processRawAttrs(el) {\\n  var l = el.attrsList.length;\\n  if (l) {\\n    var attrs = el.attrs = new Array(l);\\n    for (var i = 0; i < l; i++) {\\n      attrs[i] = {\\n        name: el.attrsList[i].name,\\n        value: JSON.stringify(el.attrsList[i].value)\\n      };\\n    }\\n  } else if (!el.pre) {\\n    // non root node in pre blocks with no attributes\\n    el.plain = true;\\n  }\\n}\\n\\nfunction processElement(element, options) {\\n  processKey(element);\\n\\n  // determine whether this is a plain element after\\n  // removing structural attributes\\n  element.plain = !element.key && !element.attrsList.length;\\n\\n  processRef(element);\\n  processSlot(element);\\n  processComponent(element);\\n  for (var i = 0; i < transforms.length; i++) {\\n    element = transforms[i](element, options) || element;\\n  }\\n  processAttrs(element);\\n}\\n\\nfunction processKey(el) {\\n  var exp = getBindingAttr(el, 'key');\\n  if (exp) {\\n    if (\\\"development\\\" !== 'production' && el.tag === 'template') {\\n      warn$2(\\\"<template> cannot be keyed. Place the key on real elements instead.\\\");\\n    }\\n    el.key = exp;\\n  }\\n}\\n\\nfunction processRef(el) {\\n  var ref = getBindingAttr(el, 'ref');\\n  if (ref) {\\n    el.ref = ref;\\n    el.refInFor = checkInFor(el);\\n  }\\n}\\n\\nfunction processFor(el) {\\n  var exp;\\n  if (exp = getAndRemoveAttr(el, 'v-for')) {\\n    var res = parseFor(exp);\\n    if (res) {\\n      extend(el, res);\\n    } else if (true) {\\n      warn$2(\\\"Invalid v-for expression: \\\" + exp);\\n    }\\n  }\\n}\\n\\nfunction parseFor(exp) {\\n  var inMatch = exp.match(forAliasRE);\\n  if (!inMatch) {\\n    return;\\n  }\\n  var res = {};\\n  res.for = inMatch[2].trim();\\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\\n  var iteratorMatch = alias.match(forIteratorRE);\\n  if (iteratorMatch) {\\n    res.alias = alias.replace(forIteratorRE, '');\\n    res.iterator1 = iteratorMatch[1].trim();\\n    if (iteratorMatch[2]) {\\n      res.iterator2 = iteratorMatch[2].trim();\\n    }\\n  } else {\\n    res.alias = alias;\\n  }\\n  return res;\\n}\\n\\nfunction processIf(el) {\\n  var exp = getAndRemoveAttr(el, 'v-if');\\n  if (exp) {\\n    el.if = exp;\\n    addIfCondition(el, {\\n      exp: exp,\\n      block: el\\n    });\\n  } else {\\n    if (getAndRemoveAttr(el, 'v-else') != null) {\\n      el.else = true;\\n    }\\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\\n    if (elseif) {\\n      el.elseif = elseif;\\n    }\\n  }\\n}\\n\\nfunction processIfConditions(el, parent) {\\n  var prev = findPrevElement(parent.children);\\n  if (prev && prev.if) {\\n    addIfCondition(prev, {\\n      exp: el.elseif,\\n      block: el\\n    });\\n  } else if (true) {\\n    warn$2(\\\"v-\\\" + (el.elseif ? 'else-if=\\\"' + el.elseif + '\\\"' : 'else') + \\\" \\\" + \\\"used on element <\\\" + el.tag + \\\"> without corresponding v-if.\\\");\\n  }\\n}\\n\\nfunction findPrevElement(children) {\\n  var i = children.length;\\n  while (i--) {\\n    if (children[i].type === 1) {\\n      return children[i];\\n    } else {\\n      if (\\\"development\\\" !== 'production' && children[i].text !== ' ') {\\n        warn$2(\\\"text \\\\\\\"\\\" + children[i].text.trim() + \\\"\\\\\\\" between v-if and v-else(-if) \\\" + \\\"will be ignored.\\\");\\n      }\\n      children.pop();\\n    }\\n  }\\n}\\n\\nfunction addIfCondition(el, condition) {\\n  if (!el.ifConditions) {\\n    el.ifConditions = [];\\n  }\\n  el.ifConditions.push(condition);\\n}\\n\\nfunction processOnce(el) {\\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\\n  if (once$$1 != null) {\\n    el.once = true;\\n  }\\n}\\n\\nfunction processSlot(el) {\\n  if (el.tag === 'slot') {\\n    el.slotName = getBindingAttr(el, 'name');\\n    if (\\\"development\\\" !== 'production' && el.key) {\\n      warn$2(\\\"`key` does not work on <slot> because slots are abstract outlets \\\" + \\\"and can possibly expand into multiple elements. \\\" + \\\"Use the key on a wrapping element instead.\\\");\\n    }\\n  } else {\\n    var slotScope;\\n    if (el.tag === 'template') {\\n      slotScope = getAndRemoveAttr(el, 'scope');\\n      /* istanbul ignore if */\\n      if (\\\"development\\\" !== 'production' && slotScope) {\\n        warn$2(\\\"the \\\\\\\"scope\\\\\\\" attribute for scoped slots have been deprecated and \\\" + \\\"replaced by \\\\\\\"slot-scope\\\\\\\" since 2.5. The new \\\\\\\"slot-scope\\\\\\\" attribute \\\" + \\\"can also be used on plain elements in addition to <template> to \\\" + \\\"denote scoped slots.\\\", true);\\n      }\\n      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\\n    } else if (slotScope = getAndRemoveAttr(el, 'slot-scope')) {\\n      /* istanbul ignore if */\\n      if (\\\"development\\\" !== 'production' && el.attrsMap['v-for']) {\\n        warn$2(\\\"Ambiguous combined usage of slot-scope and v-for on <\\\" + el.tag + \\\"> \\\" + \\\"(v-for takes higher priority). Use a wrapper <template> for the \\\" + \\\"scoped slot to make it clearer.\\\", true);\\n      }\\n      el.slotScope = slotScope;\\n    }\\n    var slotTarget = getBindingAttr(el, 'slot');\\n    if (slotTarget) {\\n      el.slotTarget = slotTarget === '\\\"\\\"' ? '\\\"default\\\"' : slotTarget;\\n      // preserve slot as an attribute for native shadow DOM compat\\n      // only for non-scoped slots.\\n      if (el.tag !== 'template' && !el.slotScope) {\\n        addAttr(el, 'slot', slotTarget);\\n      }\\n    }\\n  }\\n}\\n\\nfunction processComponent(el) {\\n  var binding;\\n  if (binding = getBindingAttr(el, 'is')) {\\n    el.component = binding;\\n  }\\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\\n    el.inlineTemplate = true;\\n  }\\n}\\n\\nfunction processAttrs(el) {\\n  var list = el.attrsList;\\n  var i, l, name, rawName, value, modifiers, isProp;\\n  for (i = 0, l = list.length; i < l; i++) {\\n    name = rawName = list[i].name;\\n    value = list[i].value;\\n    if (dirRE.test(name)) {\\n      // mark element as dynamic\\n      el.hasBindings = true;\\n      // modifiers\\n      modifiers = parseModifiers(name);\\n      if (modifiers) {\\n        name = name.replace(modifierRE, '');\\n      }\\n      if (bindRE.test(name)) {\\n        // v-bind\\n        name = name.replace(bindRE, '');\\n        value = parseFilters(value);\\n        isProp = false;\\n        if (modifiers) {\\n          if (modifiers.prop) {\\n            isProp = true;\\n            name = camelize(name);\\n            if (name === 'innerHtml') {\\n              name = 'innerHTML';\\n            }\\n          }\\n          if (modifiers.camel) {\\n            name = camelize(name);\\n          }\\n          if (modifiers.sync) {\\n            addHandler(el, \\\"update:\\\" + camelize(name), genAssignmentCode(value, \\\"$event\\\"));\\n          }\\n        }\\n        if (isProp || !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)) {\\n          addProp(el, name, value);\\n        } else {\\n          addAttr(el, name, value);\\n        }\\n      } else if (onRE.test(name)) {\\n        // v-on\\n        name = name.replace(onRE, '');\\n        addHandler(el, name, value, modifiers, false, warn$2);\\n      } else {\\n        // normal directives\\n        name = name.replace(dirRE, '');\\n        // parse arg\\n        var argMatch = name.match(argRE);\\n        var arg = argMatch && argMatch[1];\\n        if (arg) {\\n          name = name.slice(0, -(arg.length + 1));\\n        }\\n        addDirective(el, name, rawName, value, arg, modifiers);\\n        if (\\\"development\\\" !== 'production' && name === 'model') {\\n          checkForAliasModel(el, value);\\n        }\\n      }\\n    } else {\\n      // literal attribute\\n      if (true) {\\n        var res = parseText(value, delimiters);\\n        if (res) {\\n          warn$2(name + \\\"=\\\\\\\"\\\" + value + \\\"\\\\\\\": \\\" + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id=\\\"{{ val }}\\\">, use <div :id=\\\"val\\\">.');\\n        }\\n      }\\n      addAttr(el, name, JSON.stringify(value));\\n      // #6887 firefox doesn't update muted state if set via attribute\\n      // even immediately after element creation\\n      if (!el.component && name === 'muted' && platformMustUseProp(el.tag, el.attrsMap.type, name)) {\\n        addProp(el, name, 'true');\\n      }\\n    }\\n  }\\n}\\n\\nfunction checkInFor(el) {\\n  var parent = el;\\n  while (parent) {\\n    if (parent.for !== undefined) {\\n      return true;\\n    }\\n    parent = parent.parent;\\n  }\\n  return false;\\n}\\n\\nfunction parseModifiers(name) {\\n  var match = name.match(modifierRE);\\n  if (match) {\\n    var ret = {};\\n    match.forEach(function (m) {\\n      ret[m.slice(1)] = true;\\n    });\\n    return ret;\\n  }\\n}\\n\\nfunction makeAttrsMap(attrs) {\\n  var map = {};\\n  for (var i = 0, l = attrs.length; i < l; i++) {\\n    if (\\\"development\\\" !== 'production' && map[attrs[i].name] && !isIE && !isEdge) {\\n      warn$2('duplicate attribute: ' + attrs[i].name);\\n    }\\n    map[attrs[i].name] = attrs[i].value;\\n  }\\n  return map;\\n}\\n\\n// for script (e.g. type=\\\"x/template\\\") or style, do not decode content\\nfunction isTextTag(el) {\\n  return el.tag === 'script' || el.tag === 'style';\\n}\\n\\nfunction isForbiddenTag(el) {\\n  return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');\\n}\\n\\nvar ieNSBug = /^xmlns:NS\\\\d+/;\\nvar ieNSPrefix = /^NS\\\\d+:/;\\n\\n/* istanbul ignore next */\\nfunction guardIESVGBug(attrs) {\\n  var res = [];\\n  for (var i = 0; i < attrs.length; i++) {\\n    var attr = attrs[i];\\n    if (!ieNSBug.test(attr.name)) {\\n      attr.name = attr.name.replace(ieNSPrefix, '');\\n      res.push(attr);\\n    }\\n  }\\n  return res;\\n}\\n\\nfunction checkForAliasModel(el, value) {\\n  var _el = el;\\n  while (_el) {\\n    if (_el.for && _el.alias === value) {\\n      warn$2(\\\"<\\\" + el.tag + \\\" v-model=\\\\\\\"\\\" + value + \\\"\\\\\\\">: \\\" + \\\"You are binding v-model directly to a v-for iteration alias. \\\" + \\\"This will not be able to modify the v-for source array because \\\" + \\\"writing to the alias is like modifying a function local variable. \\\" + \\\"Consider using an array of objects and use v-model on an object property instead.\\\");\\n    }\\n    _el = _el.parent;\\n  }\\n}\\n\\n/*  */\\n\\n/**\\n * Expand input[v-model] with dyanmic type bindings into v-if-else chains\\n * Turn this:\\n *   <input v-model=\\\"data[type]\\\" :type=\\\"type\\\">\\n * into this:\\n *   <input v-if=\\\"type === 'checkbox'\\\" type=\\\"checkbox\\\" v-model=\\\"data[type]\\\">\\n *   <input v-else-if=\\\"type === 'radio'\\\" type=\\\"radio\\\" v-model=\\\"data[type]\\\">\\n *   <input v-else :type=\\\"type\\\" v-model=\\\"data[type]\\\">\\n */\\n\\nfunction preTransformNode(el, options) {\\n  if (el.tag === 'input') {\\n    var map = el.attrsMap;\\n    if (!map['v-model']) {\\n      return;\\n    }\\n\\n    var typeBinding;\\n    if (map[':type'] || map['v-bind:type']) {\\n      typeBinding = getBindingAttr(el, 'type');\\n    }\\n    if (!map.type && !typeBinding && map['v-bind']) {\\n      typeBinding = \\\"(\\\" + map['v-bind'] + \\\").type\\\";\\n    }\\n\\n    if (typeBinding) {\\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\\n      var ifConditionExtra = ifCondition ? \\\"&&(\\\" + ifCondition + \\\")\\\" : \\\"\\\";\\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\\n      // 1. checkbox\\n      var branch0 = cloneASTElement(el);\\n      // process for on the main node\\n      processFor(branch0);\\n      addRawAttr(branch0, 'type', 'checkbox');\\n      processElement(branch0, options);\\n      branch0.processed = true; // prevent it from double-processed\\n      branch0.if = \\\"(\\\" + typeBinding + \\\")==='checkbox'\\\" + ifConditionExtra;\\n      addIfCondition(branch0, {\\n        exp: branch0.if,\\n        block: branch0\\n      });\\n      // 2. add radio else-if condition\\n      var branch1 = cloneASTElement(el);\\n      getAndRemoveAttr(branch1, 'v-for', true);\\n      addRawAttr(branch1, 'type', 'radio');\\n      processElement(branch1, options);\\n      addIfCondition(branch0, {\\n        exp: \\\"(\\\" + typeBinding + \\\")==='radio'\\\" + ifConditionExtra,\\n        block: branch1\\n      });\\n      // 3. other\\n      var branch2 = cloneASTElement(el);\\n      getAndRemoveAttr(branch2, 'v-for', true);\\n      addRawAttr(branch2, ':type', typeBinding);\\n      processElement(branch2, options);\\n      addIfCondition(branch0, {\\n        exp: ifCondition,\\n        block: branch2\\n      });\\n\\n      if (hasElse) {\\n        branch0.else = true;\\n      } else if (elseIfCondition) {\\n        branch0.elseif = elseIfCondition;\\n      }\\n\\n      return branch0;\\n    }\\n  }\\n}\\n\\nfunction cloneASTElement(el) {\\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent);\\n}\\n\\nvar model$2 = {\\n  preTransformNode: preTransformNode\\n};\\n\\nvar modules$1 = [klass$1, style$1, model$2];\\n\\n/*  */\\n\\nfunction text(el, dir) {\\n  if (dir.value) {\\n    addProp(el, 'textContent', \\\"_s(\\\" + dir.value + \\\")\\\");\\n  }\\n}\\n\\n/*  */\\n\\nfunction html(el, dir) {\\n  if (dir.value) {\\n    addProp(el, 'innerHTML', \\\"_s(\\\" + dir.value + \\\")\\\");\\n  }\\n}\\n\\nvar directives$1 = {\\n  model: model,\\n  text: text,\\n  html: html\\n\\n  /*  */\\n\\n};var baseOptions = {\\n  expectHTML: true,\\n  modules: modules$1,\\n  directives: directives$1,\\n  isPreTag: isPreTag,\\n  isUnaryTag: isUnaryTag,\\n  mustUseProp: mustUseProp,\\n  canBeLeftOpenTag: canBeLeftOpenTag,\\n  isReservedTag: isReservedTag,\\n  getTagNamespace: getTagNamespace,\\n  staticKeys: genStaticKeys(modules$1)\\n};\\n\\n/*  */\\n\\nvar isStaticKey;\\nvar isPlatformReservedTag;\\n\\nvar genStaticKeysCached = cached(genStaticKeys$1);\\n\\n/**\\n * Goal of the optimizer: walk the generated template AST tree\\n * and detect sub-trees that are purely static, i.e. parts of\\n * the DOM that never needs to change.\\n *\\n * Once we detect these sub-trees, we can:\\n *\\n * 1. Hoist them into constants, so that we no longer need to\\n *    create fresh nodes for them on each re-render;\\n * 2. Completely skip them in the patching process.\\n */\\nfunction optimize(root, options) {\\n  if (!root) {\\n    return;\\n  }\\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\\n  isPlatformReservedTag = options.isReservedTag || no;\\n  // first pass: mark all non-static nodes.\\n  markStatic$1(root);\\n  // second pass: mark static roots.\\n  markStaticRoots(root, false);\\n}\\n\\nfunction genStaticKeys$1(keys) {\\n  return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));\\n}\\n\\nfunction markStatic$1(node) {\\n  node.static = isStatic(node);\\n  if (node.type === 1) {\\n    // do not make component slot content static. this avoids\\n    // 1. components not able to mutate slot nodes\\n    // 2. static slot content fails for hot-reloading\\n    if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {\\n      return;\\n    }\\n    for (var i = 0, l = node.children.length; i < l; i++) {\\n      var child = node.children[i];\\n      markStatic$1(child);\\n      if (!child.static) {\\n        node.static = false;\\n      }\\n    }\\n    if (node.ifConditions) {\\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\\n        var block = node.ifConditions[i$1].block;\\n        markStatic$1(block);\\n        if (!block.static) {\\n          node.static = false;\\n        }\\n      }\\n    }\\n  }\\n}\\n\\nfunction markStaticRoots(node, isInFor) {\\n  if (node.type === 1) {\\n    if (node.static || node.once) {\\n      node.staticInFor = isInFor;\\n    }\\n    // For a node to qualify as a static root, it should have children that\\n    // are not just static text. Otherwise the cost of hoisting out will\\n    // outweigh the benefits and it's better off to just always render it fresh.\\n    if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {\\n      node.staticRoot = true;\\n      return;\\n    } else {\\n      node.staticRoot = false;\\n    }\\n    if (node.children) {\\n      for (var i = 0, l = node.children.length; i < l; i++) {\\n        markStaticRoots(node.children[i], isInFor || !!node.for);\\n      }\\n    }\\n    if (node.ifConditions) {\\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\\n      }\\n    }\\n  }\\n}\\n\\nfunction isStatic(node) {\\n  if (node.type === 2) {\\n    // expression\\n    return false;\\n  }\\n  if (node.type === 3) {\\n    // text\\n    return true;\\n  }\\n  return !!(node.pre || !node.hasBindings && // no dynamic bindings\\n  !node.if && !node.for && // not v-if or v-for or v-else\\n  !isBuiltInTag(node.tag) && // not a built-in\\n  isPlatformReservedTag(node.tag) && // not a component\\n  !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));\\n}\\n\\nfunction isDirectChildOfTemplateFor(node) {\\n  while (node.parent) {\\n    node = node.parent;\\n    if (node.tag !== 'template') {\\n      return false;\\n    }\\n    if (node.for) {\\n      return true;\\n    }\\n  }\\n  return false;\\n}\\n\\n/*  */\\n\\nvar fnExpRE = /^([\\\\w$_]+|\\\\([^)]*?\\\\))\\\\s*=>|^function\\\\s*\\\\(/;\\nvar simplePathRE = /^[A-Za-z_$][\\\\w$]*(?:\\\\.[A-Za-z_$][\\\\w$]*|\\\\['[^']*?']|\\\\[\\\"[^\\\"]*?\\\"]|\\\\[\\\\d+]|\\\\[[A-Za-z_$][\\\\w$]*])*$/;\\n\\n// KeyboardEvent.keyCode aliases\\nvar keyCodes = {\\n  esc: 27,\\n  tab: 9,\\n  enter: 13,\\n  space: 32,\\n  up: 38,\\n  left: 37,\\n  right: 39,\\n  down: 40,\\n  'delete': [8, 46]\\n};\\n\\n// KeyboardEvent.key aliases\\nvar keyNames = {\\n  esc: 'Escape',\\n  tab: 'Tab',\\n  enter: 'Enter',\\n  space: ' ',\\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\\n  up: ['Up', 'ArrowUp'],\\n  left: ['Left', 'ArrowLeft'],\\n  right: ['Right', 'ArrowRight'],\\n  down: ['Down', 'ArrowDown'],\\n  'delete': ['Backspace', 'Delete']\\n};\\n\\n// #4868: modifiers that prevent the execution of the listener\\n// need to explicitly return null so that we can determine whether to remove\\n// the listener for .once\\nvar genGuard = function (condition) {\\n  return \\\"if(\\\" + condition + \\\")return null;\\\";\\n};\\n\\nvar modifierCode = {\\n  stop: '$event.stopPropagation();',\\n  prevent: '$event.preventDefault();',\\n  self: genGuard(\\\"$event.target !== $event.currentTarget\\\"),\\n  ctrl: genGuard(\\\"!$event.ctrlKey\\\"),\\n  shift: genGuard(\\\"!$event.shiftKey\\\"),\\n  alt: genGuard(\\\"!$event.altKey\\\"),\\n  meta: genGuard(\\\"!$event.metaKey\\\"),\\n  left: genGuard(\\\"'button' in $event && $event.button !== 0\\\"),\\n  middle: genGuard(\\\"'button' in $event && $event.button !== 1\\\"),\\n  right: genGuard(\\\"'button' in $event && $event.button !== 2\\\")\\n};\\n\\nfunction genHandlers(events, isNative, warn) {\\n  var res = isNative ? 'nativeOn:{' : 'on:{';\\n  for (var name in events) {\\n    res += \\\"\\\\\\\"\\\" + name + \\\"\\\\\\\":\\\" + genHandler(name, events[name]) + \\\",\\\";\\n  }\\n  return res.slice(0, -1) + '}';\\n}\\n\\nfunction genHandler(name, handler) {\\n  if (!handler) {\\n    return 'function(){}';\\n  }\\n\\n  if (Array.isArray(handler)) {\\n    return \\\"[\\\" + handler.map(function (handler) {\\n      return genHandler(name, handler);\\n    }).join(',') + \\\"]\\\";\\n  }\\n\\n  var isMethodPath = simplePathRE.test(handler.value);\\n  var isFunctionExpression = fnExpRE.test(handler.value);\\n\\n  if (!handler.modifiers) {\\n    if (isMethodPath || isFunctionExpression) {\\n      return handler.value;\\n    }\\n    /* istanbul ignore if */\\n    return \\\"function($event){\\\" + handler.value + \\\"}\\\"; // inline statement\\n  } else {\\n    var code = '';\\n    var genModifierCode = '';\\n    var keys = [];\\n    for (var key in handler.modifiers) {\\n      if (modifierCode[key]) {\\n        genModifierCode += modifierCode[key];\\n        // left/right\\n        if (keyCodes[key]) {\\n          keys.push(key);\\n        }\\n      } else if (key === 'exact') {\\n        var modifiers = handler.modifiers;\\n        genModifierCode += genGuard(['ctrl', 'shift', 'alt', 'meta'].filter(function (keyModifier) {\\n          return !modifiers[keyModifier];\\n        }).map(function (keyModifier) {\\n          return \\\"$event.\\\" + keyModifier + \\\"Key\\\";\\n        }).join('||'));\\n      } else {\\n        keys.push(key);\\n      }\\n    }\\n    if (keys.length) {\\n      code += genKeyFilter(keys);\\n    }\\n    // Make sure modifiers like prevent and stop get executed after key filtering\\n    if (genModifierCode) {\\n      code += genModifierCode;\\n    }\\n    var handlerCode = isMethodPath ? \\\"return \\\" + handler.value + \\\"($event)\\\" : isFunctionExpression ? \\\"return (\\\" + handler.value + \\\")($event)\\\" : handler.value;\\n    /* istanbul ignore if */\\n    return \\\"function($event){\\\" + code + handlerCode + \\\"}\\\";\\n  }\\n}\\n\\nfunction genKeyFilter(keys) {\\n  return \\\"if(!('button' in $event)&&\\\" + keys.map(genFilterCode).join('&&') + \\\")return null;\\\";\\n}\\n\\nfunction genFilterCode(key) {\\n  var keyVal = parseInt(key, 10);\\n  if (keyVal) {\\n    return \\\"$event.keyCode!==\\\" + keyVal;\\n  }\\n  var keyCode = keyCodes[key];\\n  var keyName = keyNames[key];\\n  return \\\"_k($event.keyCode,\\\" + JSON.stringify(key) + \\\",\\\" + JSON.stringify(keyCode) + \\\",\\\" + \\\"$event.key,\\\" + \\\"\\\" + JSON.stringify(keyName) + \\\")\\\";\\n}\\n\\n/*  */\\n\\nfunction on(el, dir) {\\n  if (\\\"development\\\" !== 'production' && dir.modifiers) {\\n    warn(\\\"v-on without argument does not support modifiers.\\\");\\n  }\\n  el.wrapListeners = function (code) {\\n    return \\\"_g(\\\" + code + \\\",\\\" + dir.value + \\\")\\\";\\n  };\\n}\\n\\n/*  */\\n\\nfunction bind$1(el, dir) {\\n  el.wrapData = function (code) {\\n    return \\\"_b(\\\" + code + \\\",'\\\" + el.tag + \\\"',\\\" + dir.value + \\\",\\\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \\\")\\\";\\n  };\\n}\\n\\n/*  */\\n\\nvar baseDirectives = {\\n  on: on,\\n  bind: bind$1,\\n  cloak: noop\\n\\n  /*  */\\n\\n};var CodegenState = function CodegenState(options) {\\n  this.options = options;\\n  this.warn = options.warn || baseWarn;\\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\\n  this.directives = extend(extend({}, baseDirectives), options.directives);\\n  var isReservedTag = options.isReservedTag || no;\\n  this.maybeComponent = function (el) {\\n    return !isReservedTag(el.tag);\\n  };\\n  this.onceId = 0;\\n  this.staticRenderFns = [];\\n};\\n\\nfunction generate(ast, options) {\\n  var state = new CodegenState(options);\\n  var code = ast ? genElement(ast, state) : '_c(\\\"div\\\")';\\n  return {\\n    render: \\\"with(this){return \\\" + code + \\\"}\\\",\\n    staticRenderFns: state.staticRenderFns\\n  };\\n}\\n\\nfunction genElement(el, state) {\\n  if (el.staticRoot && !el.staticProcessed) {\\n    return genStatic(el, state);\\n  } else if (el.once && !el.onceProcessed) {\\n    return genOnce(el, state);\\n  } else if (el.for && !el.forProcessed) {\\n    return genFor(el, state);\\n  } else if (el.if && !el.ifProcessed) {\\n    return genIf(el, state);\\n  } else if (el.tag === 'template' && !el.slotTarget) {\\n    return genChildren(el, state) || 'void 0';\\n  } else if (el.tag === 'slot') {\\n    return genSlot(el, state);\\n  } else {\\n    // component or element\\n    var code;\\n    if (el.component) {\\n      code = genComponent(el.component, el, state);\\n    } else {\\n      var data = el.plain ? undefined : genData$2(el, state);\\n\\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\\n      code = \\\"_c('\\\" + el.tag + \\\"'\\\" + (data ? \\\",\\\" + data : '') + (children ? \\\",\\\" + children : '') + \\\")\\\";\\n    }\\n    // module transforms\\n    for (var i = 0; i < state.transforms.length; i++) {\\n      code = state.transforms[i](el, code);\\n    }\\n    return code;\\n  }\\n}\\n\\n// hoist static sub-trees out\\nfunction genStatic(el, state) {\\n  el.staticProcessed = true;\\n  state.staticRenderFns.push(\\\"with(this){return \\\" + genElement(el, state) + \\\"}\\\");\\n  return \\\"_m(\\\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \\\")\\\";\\n}\\n\\n// v-once\\nfunction genOnce(el, state) {\\n  el.onceProcessed = true;\\n  if (el.if && !el.ifProcessed) {\\n    return genIf(el, state);\\n  } else if (el.staticInFor) {\\n    var key = '';\\n    var parent = el.parent;\\n    while (parent) {\\n      if (parent.for) {\\n        key = parent.key;\\n        break;\\n      }\\n      parent = parent.parent;\\n    }\\n    if (!key) {\\n      \\\"development\\\" !== 'production' && state.warn(\\\"v-once can only be used inside v-for that is keyed. \\\");\\n      return genElement(el, state);\\n    }\\n    return \\\"_o(\\\" + genElement(el, state) + \\\",\\\" + state.onceId++ + \\\",\\\" + key + \\\")\\\";\\n  } else {\\n    return genStatic(el, state);\\n  }\\n}\\n\\nfunction genIf(el, state, altGen, altEmpty) {\\n  el.ifProcessed = true; // avoid recursion\\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty);\\n}\\n\\nfunction genIfConditions(conditions, state, altGen, altEmpty) {\\n  if (!conditions.length) {\\n    return altEmpty || '_e()';\\n  }\\n\\n  var condition = conditions.shift();\\n  if (condition.exp) {\\n    return \\\"(\\\" + condition.exp + \\\")?\\\" + genTernaryExp(condition.block) + \\\":\\\" + genIfConditions(conditions, state, altGen, altEmpty);\\n  } else {\\n    return \\\"\\\" + genTernaryExp(condition.block);\\n  }\\n\\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\\n  function genTernaryExp(el) {\\n    return altGen ? altGen(el, state) : el.once ? genOnce(el, state) : genElement(el, state);\\n  }\\n}\\n\\nfunction genFor(el, state, altGen, altHelper) {\\n  var exp = el.for;\\n  var alias = el.alias;\\n  var iterator1 = el.iterator1 ? \\\",\\\" + el.iterator1 : '';\\n  var iterator2 = el.iterator2 ? \\\",\\\" + el.iterator2 : '';\\n\\n  if (\\\"development\\\" !== 'production' && state.maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {\\n    state.warn(\\\"<\\\" + el.tag + \\\" v-for=\\\\\\\"\\\" + alias + \\\" in \\\" + exp + \\\"\\\\\\\">: component lists rendered with \\\" + \\\"v-for should have explicit keys. \\\" + \\\"See https://vuejs.org/guide/list.html#key for more info.\\\", true /* tip */\\n    );\\n  }\\n\\n  el.forProcessed = true; // avoid recursion\\n  return (altHelper || '_l') + \\\"((\\\" + exp + \\\"),\\\" + \\\"function(\\\" + alias + iterator1 + iterator2 + \\\"){\\\" + \\\"return \\\" + (altGen || genElement)(el, state) + '})';\\n}\\n\\nfunction genData$2(el, state) {\\n  var data = '{';\\n\\n  // directives first.\\n  // directives may mutate the el's other properties before they are generated.\\n  var dirs = genDirectives(el, state);\\n  if (dirs) {\\n    data += dirs + ',';\\n  }\\n\\n  // key\\n  if (el.key) {\\n    data += \\\"key:\\\" + el.key + \\\",\\\";\\n  }\\n  // ref\\n  if (el.ref) {\\n    data += \\\"ref:\\\" + el.ref + \\\",\\\";\\n  }\\n  if (el.refInFor) {\\n    data += \\\"refInFor:true,\\\";\\n  }\\n  // pre\\n  if (el.pre) {\\n    data += \\\"pre:true,\\\";\\n  }\\n  // record original tag name for components using \\\"is\\\" attribute\\n  if (el.component) {\\n    data += \\\"tag:\\\\\\\"\\\" + el.tag + \\\"\\\\\\\",\\\";\\n  }\\n  // module data generation functions\\n  for (var i = 0; i < state.dataGenFns.length; i++) {\\n    data += state.dataGenFns[i](el);\\n  }\\n  // attributes\\n  if (el.attrs) {\\n    data += \\\"attrs:{\\\" + genProps(el.attrs) + \\\"},\\\";\\n  }\\n  // DOM props\\n  if (el.props) {\\n    data += \\\"domProps:{\\\" + genProps(el.props) + \\\"},\\\";\\n  }\\n  // event handlers\\n  if (el.events) {\\n    data += genHandlers(el.events, false, state.warn) + \\\",\\\";\\n  }\\n  if (el.nativeEvents) {\\n    data += genHandlers(el.nativeEvents, true, state.warn) + \\\",\\\";\\n  }\\n  // slot target\\n  // only for non-scoped slots\\n  if (el.slotTarget && !el.slotScope) {\\n    data += \\\"slot:\\\" + el.slotTarget + \\\",\\\";\\n  }\\n  // scoped slots\\n  if (el.scopedSlots) {\\n    data += genScopedSlots(el.scopedSlots, state) + \\\",\\\";\\n  }\\n  // component v-model\\n  if (el.model) {\\n    data += \\\"model:{value:\\\" + el.model.value + \\\",callback:\\\" + el.model.callback + \\\",expression:\\\" + el.model.expression + \\\"},\\\";\\n  }\\n  // inline-template\\n  if (el.inlineTemplate) {\\n    var inlineTemplate = genInlineTemplate(el, state);\\n    if (inlineTemplate) {\\n      data += inlineTemplate + \\\",\\\";\\n    }\\n  }\\n  data = data.replace(/,$/, '') + '}';\\n  // v-bind data wrap\\n  if (el.wrapData) {\\n    data = el.wrapData(data);\\n  }\\n  // v-on data wrap\\n  if (el.wrapListeners) {\\n    data = el.wrapListeners(data);\\n  }\\n  return data;\\n}\\n\\nfunction genDirectives(el, state) {\\n  var dirs = el.directives;\\n  if (!dirs) {\\n    return;\\n  }\\n  var res = 'directives:[';\\n  var hasRuntime = false;\\n  var i, l, dir, needRuntime;\\n  for (i = 0, l = dirs.length; i < l; i++) {\\n    dir = dirs[i];\\n    needRuntime = true;\\n    var gen = state.directives[dir.name];\\n    if (gen) {\\n      // compile-time directive that manipulates AST.\\n      // returns true if it also needs a runtime counterpart.\\n      needRuntime = !!gen(el, dir, state.warn);\\n    }\\n    if (needRuntime) {\\n      hasRuntime = true;\\n      res += \\\"{name:\\\\\\\"\\\" + dir.name + \\\"\\\\\\\",rawName:\\\\\\\"\\\" + dir.rawName + \\\"\\\\\\\"\\\" + (dir.value ? \\\",value:(\\\" + dir.value + \\\"),expression:\\\" + JSON.stringify(dir.value) : '') + (dir.arg ? \\\",arg:\\\\\\\"\\\" + dir.arg + \\\"\\\\\\\"\\\" : '') + (dir.modifiers ? \\\",modifiers:\\\" + JSON.stringify(dir.modifiers) : '') + \\\"},\\\";\\n    }\\n  }\\n  if (hasRuntime) {\\n    return res.slice(0, -1) + ']';\\n  }\\n}\\n\\nfunction genInlineTemplate(el, state) {\\n  var ast = el.children[0];\\n  if (\\\"development\\\" !== 'production' && (el.children.length !== 1 || ast.type !== 1)) {\\n    state.warn('Inline-template components must have exactly one child element.');\\n  }\\n  if (ast.type === 1) {\\n    var inlineRenderFns = generate(ast, state.options);\\n    return \\\"inlineTemplate:{render:function(){\\\" + inlineRenderFns.render + \\\"},staticRenderFns:[\\\" + inlineRenderFns.staticRenderFns.map(function (code) {\\n      return \\\"function(){\\\" + code + \\\"}\\\";\\n    }).join(',') + \\\"]}\\\";\\n  }\\n}\\n\\nfunction genScopedSlots(slots, state) {\\n  return \\\"scopedSlots:_u([\\\" + Object.keys(slots).map(function (key) {\\n    return genScopedSlot(key, slots[key], state);\\n  }).join(',') + \\\"])\\\";\\n}\\n\\nfunction genScopedSlot(key, el, state) {\\n  if (el.for && !el.forProcessed) {\\n    return genForScopedSlot(key, el, state);\\n  }\\n  var fn = \\\"function(\\\" + String(el.slotScope) + \\\"){\\\" + \\\"return \\\" + (el.tag === 'template' ? el.if ? el.if + \\\"?\\\" + (genChildren(el, state) || 'undefined') + \\\":undefined\\\" : genChildren(el, state) || 'undefined' : genElement(el, state)) + \\\"}\\\";\\n  return \\\"{key:\\\" + key + \\\",fn:\\\" + fn + \\\"}\\\";\\n}\\n\\nfunction genForScopedSlot(key, el, state) {\\n  var exp = el.for;\\n  var alias = el.alias;\\n  var iterator1 = el.iterator1 ? \\\",\\\" + el.iterator1 : '';\\n  var iterator2 = el.iterator2 ? \\\",\\\" + el.iterator2 : '';\\n  el.forProcessed = true; // avoid recursion\\n  return \\\"_l((\\\" + exp + \\\"),\\\" + \\\"function(\\\" + alias + iterator1 + iterator2 + \\\"){\\\" + \\\"return \\\" + genScopedSlot(key, el, state) + '})';\\n}\\n\\nfunction genChildren(el, state, checkSkip, altGenElement, altGenNode) {\\n  var children = el.children;\\n  if (children.length) {\\n    var el$1 = children[0];\\n    // optimize single v-for\\n    if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {\\n      return (altGenElement || genElement)(el$1, state);\\n    }\\n    var normalizationType = checkSkip ? getNormalizationType(children, state.maybeComponent) : 0;\\n    var gen = altGenNode || genNode;\\n    return \\\"[\\\" + children.map(function (c) {\\n      return gen(c, state);\\n    }).join(',') + \\\"]\\\" + (normalizationType ? \\\",\\\" + normalizationType : '');\\n  }\\n}\\n\\n// determine the normalization needed for the children array.\\n// 0: no normalization needed\\n// 1: simple normalization needed (possible 1-level deep nested array)\\n// 2: full normalization needed\\nfunction getNormalizationType(children, maybeComponent) {\\n  var res = 0;\\n  for (var i = 0; i < children.length; i++) {\\n    var el = children[i];\\n    if (el.type !== 1) {\\n      continue;\\n    }\\n    if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {\\n      return needsNormalization(c.block);\\n    })) {\\n      res = 2;\\n      break;\\n    }\\n    if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {\\n      return maybeComponent(c.block);\\n    })) {\\n      res = 1;\\n    }\\n  }\\n  return res;\\n}\\n\\nfunction needsNormalization(el) {\\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';\\n}\\n\\nfunction genNode(node, state) {\\n  if (node.type === 1) {\\n    return genElement(node, state);\\n  }if (node.type === 3 && node.isComment) {\\n    return genComment(node);\\n  } else {\\n    return genText(node);\\n  }\\n}\\n\\nfunction genText(text) {\\n  return \\\"_v(\\\" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()\\n  : transformSpecialNewlines(JSON.stringify(text.text))) + \\\")\\\";\\n}\\n\\nfunction genComment(comment) {\\n  return \\\"_e(\\\" + JSON.stringify(comment.text) + \\\")\\\";\\n}\\n\\nfunction genSlot(el, state) {\\n  var slotName = el.slotName || '\\\"default\\\"';\\n  var children = genChildren(el, state);\\n  var res = \\\"_t(\\\" + slotName + (children ? \\\",\\\" + children : '');\\n  var attrs = el.attrs && \\\"{\\\" + el.attrs.map(function (a) {\\n    return camelize(a.name) + \\\":\\\" + a.value;\\n  }).join(',') + \\\"}\\\";\\n  var bind$$1 = el.attrsMap['v-bind'];\\n  if ((attrs || bind$$1) && !children) {\\n    res += \\\",null\\\";\\n  }\\n  if (attrs) {\\n    res += \\\",\\\" + attrs;\\n  }\\n  if (bind$$1) {\\n    res += (attrs ? '' : ',null') + \\\",\\\" + bind$$1;\\n  }\\n  return res + ')';\\n}\\n\\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\\nfunction genComponent(componentName, el, state) {\\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\\n  return \\\"_c(\\\" + componentName + \\\",\\\" + genData$2(el, state) + (children ? \\\",\\\" + children : '') + \\\")\\\";\\n}\\n\\nfunction genProps(props) {\\n  var res = '';\\n  for (var i = 0; i < props.length; i++) {\\n    var prop = props[i];\\n    /* istanbul ignore if */\\n    {\\n      res += \\\"\\\\\\\"\\\" + prop.name + \\\"\\\\\\\":\\\" + transformSpecialNewlines(prop.value) + \\\",\\\";\\n    }\\n  }\\n  return res.slice(0, -1);\\n}\\n\\n// #3895, #4268\\nfunction transformSpecialNewlines(text) {\\n  return text.replace(/\\\\u2028/g, '\\\\\\\\u2028').replace(/\\\\u2029/g, '\\\\\\\\u2029');\\n}\\n\\n/*  */\\n\\n// these keywords should not appear inside expressions, but operators like\\n// typeof, instanceof and in are allowed\\nvar prohibitedKeywordRE = new RegExp('\\\\\\\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\\\\\\\b|\\\\\\\\b') + '\\\\\\\\b');\\n\\n// these unary operators should not be used as property/method names\\nvar unaryOperatorsRE = new RegExp('\\\\\\\\b' + 'delete,typeof,void'.split(',').join('\\\\\\\\s*\\\\\\\\([^\\\\\\\\)]*\\\\\\\\)|\\\\\\\\b') + '\\\\\\\\s*\\\\\\\\([^\\\\\\\\)]*\\\\\\\\)');\\n\\n// strip strings in expressions\\nvar stripStringRE = /'(?:[^'\\\\\\\\]|\\\\\\\\.)*'|\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"|`(?:[^`\\\\\\\\]|\\\\\\\\.)*\\\\$\\\\{|\\\\}(?:[^`\\\\\\\\]|\\\\\\\\.)*`|`(?:[^`\\\\\\\\]|\\\\\\\\.)*`/g;\\n\\n// detect problematic expressions in a template\\nfunction detectErrors(ast) {\\n  var errors = [];\\n  if (ast) {\\n    checkNode(ast, errors);\\n  }\\n  return errors;\\n}\\n\\nfunction checkNode(node, errors) {\\n  if (node.type === 1) {\\n    for (var name in node.attrsMap) {\\n      if (dirRE.test(name)) {\\n        var value = node.attrsMap[name];\\n        if (value) {\\n          if (name === 'v-for') {\\n            checkFor(node, \\\"v-for=\\\\\\\"\\\" + value + \\\"\\\\\\\"\\\", errors);\\n          } else if (onRE.test(name)) {\\n            checkEvent(value, name + \\\"=\\\\\\\"\\\" + value + \\\"\\\\\\\"\\\", errors);\\n          } else {\\n            checkExpression(value, name + \\\"=\\\\\\\"\\\" + value + \\\"\\\\\\\"\\\", errors);\\n          }\\n        }\\n      }\\n    }\\n    if (node.children) {\\n      for (var i = 0; i < node.children.length; i++) {\\n        checkNode(node.children[i], errors);\\n      }\\n    }\\n  } else if (node.type === 2) {\\n    checkExpression(node.expression, node.text, errors);\\n  }\\n}\\n\\nfunction checkEvent(exp, text, errors) {\\n  var stipped = exp.replace(stripStringRE, '');\\n  var keywordMatch = stipped.match(unaryOperatorsRE);\\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\\n    errors.push(\\\"avoid using JavaScript unary operator as property name: \\\" + \\\"\\\\\\\"\\\" + keywordMatch[0] + \\\"\\\\\\\" in expression \\\" + text.trim());\\n  }\\n  checkExpression(exp, text, errors);\\n}\\n\\nfunction checkFor(node, text, errors) {\\n  checkExpression(node.for || '', text, errors);\\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\\n}\\n\\nfunction checkIdentifier(ident, type, text, errors) {\\n  if (typeof ident === 'string') {\\n    try {\\n      new Function(\\\"var \\\" + ident + \\\"=_\\\");\\n    } catch (e) {\\n      errors.push(\\\"invalid \\\" + type + \\\" \\\\\\\"\\\" + ident + \\\"\\\\\\\" in expression: \\\" + text.trim());\\n    }\\n  }\\n}\\n\\nfunction checkExpression(exp, text, errors) {\\n  try {\\n    new Function(\\\"return \\\" + exp);\\n  } catch (e) {\\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\\n    if (keywordMatch) {\\n      errors.push(\\\"avoid using JavaScript keyword as property name: \\\" + \\\"\\\\\\\"\\\" + keywordMatch[0] + \\\"\\\\\\\"\\\\n  Raw expression: \\\" + text.trim());\\n    } else {\\n      errors.push(\\\"invalid expression: \\\" + e.message + \\\" in\\\\n\\\\n\\\" + \\\"    \\\" + exp + \\\"\\\\n\\\\n\\\" + \\\"  Raw expression: \\\" + text.trim() + \\\"\\\\n\\\");\\n    }\\n  }\\n}\\n\\n/*  */\\n\\nfunction createFunction(code, errors) {\\n  try {\\n    return new Function(code);\\n  } catch (err) {\\n    errors.push({ err: err, code: code });\\n    return noop;\\n  }\\n}\\n\\nfunction createCompileToFunctionFn(compile) {\\n  var cache = Object.create(null);\\n\\n  return function compileToFunctions(template, options, vm) {\\n    options = extend({}, options);\\n    var warn$$1 = options.warn || warn;\\n    delete options.warn;\\n\\n    /* istanbul ignore if */\\n    if (true) {\\n      // detect possible CSP restriction\\n      try {\\n        new Function('return 1');\\n      } catch (e) {\\n        if (e.toString().match(/unsafe-eval|CSP/)) {\\n          warn$$1('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');\\n        }\\n      }\\n    }\\n\\n    // check cache\\n    var key = options.delimiters ? String(options.delimiters) + template : template;\\n    if (cache[key]) {\\n      return cache[key];\\n    }\\n\\n    // compile\\n    var compiled = compile(template, options);\\n\\n    // check compilation errors/tips\\n    if (true) {\\n      if (compiled.errors && compiled.errors.length) {\\n        warn$$1(\\\"Error compiling template:\\\\n\\\\n\\\" + template + \\\"\\\\n\\\\n\\\" + compiled.errors.map(function (e) {\\n          return \\\"- \\\" + e;\\n        }).join('\\\\n') + '\\\\n', vm);\\n      }\\n      if (compiled.tips && compiled.tips.length) {\\n        compiled.tips.forEach(function (msg) {\\n          return tip(msg, vm);\\n        });\\n      }\\n    }\\n\\n    // turn code into functions\\n    var res = {};\\n    var fnGenErrors = [];\\n    res.render = createFunction(compiled.render, fnGenErrors);\\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\\n      return createFunction(code, fnGenErrors);\\n    });\\n\\n    // check function generation errors.\\n    // this should only happen if there is a bug in the compiler itself.\\n    // mostly for codegen development use\\n    /* istanbul ignore if */\\n    if (true) {\\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\\n        warn$$1(\\\"Failed to generate render function:\\\\n\\\\n\\\" + fnGenErrors.map(function (ref) {\\n          var err = ref.err;\\n          var code = ref.code;\\n\\n          return err.toString() + \\\" in\\\\n\\\\n\\\" + code + \\\"\\\\n\\\";\\n        }).join('\\\\n'), vm);\\n      }\\n    }\\n\\n    return cache[key] = res;\\n  };\\n}\\n\\n/*  */\\n\\nfunction createCompilerCreator(baseCompile) {\\n  return function createCompiler(baseOptions) {\\n    function compile(template, options) {\\n      var finalOptions = Object.create(baseOptions);\\n      var errors = [];\\n      var tips = [];\\n      finalOptions.warn = function (msg, tip) {\\n        (tip ? tips : errors).push(msg);\\n      };\\n\\n      if (options) {\\n        // merge custom modules\\n        if (options.modules) {\\n          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);\\n        }\\n        // merge custom directives\\n        if (options.directives) {\\n          finalOptions.directives = extend(Object.create(baseOptions.directives || null), options.directives);\\n        }\\n        // copy other options\\n        for (var key in options) {\\n          if (key !== 'modules' && key !== 'directives') {\\n            finalOptions[key] = options[key];\\n          }\\n        }\\n      }\\n\\n      var compiled = baseCompile(template, finalOptions);\\n      if (true) {\\n        errors.push.apply(errors, detectErrors(compiled.ast));\\n      }\\n      compiled.errors = errors;\\n      compiled.tips = tips;\\n      return compiled;\\n    }\\n\\n    return {\\n      compile: compile,\\n      compileToFunctions: createCompileToFunctionFn(compile)\\n    };\\n  };\\n}\\n\\n/*  */\\n\\n// `createCompilerCreator` allows creating compilers that use alternative\\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\\n// Here we just export a default compiler using the default parts.\\nvar createCompiler = createCompilerCreator(function baseCompile(template, options) {\\n  var ast = parse(template.trim(), options);\\n  if (options.optimize !== false) {\\n    optimize(ast, options);\\n  }\\n  var code = generate(ast, options);\\n  return {\\n    ast: ast,\\n    render: code.render,\\n    staticRenderFns: code.staticRenderFns\\n  };\\n});\\n\\n/*  */\\n\\nvar ref$1 = createCompiler(baseOptions);\\nvar compileToFunctions = ref$1.compileToFunctions;\\n\\n/*  */\\n\\n// check whether current browser encodes a char inside attribute values\\nvar div;\\nfunction getShouldDecode(href) {\\n  div = div || document.createElement('div');\\n  div.innerHTML = href ? \\\"<a href=\\\\\\\"\\\\n\\\\\\\"/>\\\" : \\\"<div a=\\\\\\\"\\\\n\\\\\\\"/>\\\";\\n  return div.innerHTML.indexOf('&#10;') > 0;\\n}\\n\\n// #3663: IE encodes newlines inside attribute values while other browsers don't\\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\\n// #6828: chrome encodes content in a[href]\\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\\n\\n/*  */\\n\\nvar idToTemplate = cached(function (id) {\\n  var el = query(id);\\n  return el && el.innerHTML;\\n});\\n\\nvar mount = Vue.prototype.$mount;\\nVue.prototype.$mount = function (el, hydrating) {\\n  el = el && query(el);\\n\\n  /* istanbul ignore if */\\n  if (el === document.body || el === document.documentElement) {\\n    \\\"development\\\" !== 'production' && warn(\\\"Do not mount Vue to <html> or <body> - mount to normal elements instead.\\\");\\n    return this;\\n  }\\n\\n  var options = this.$options;\\n  // resolve template/el and convert to render function\\n  if (!options.render) {\\n    var template = options.template;\\n    if (template) {\\n      if (typeof template === 'string') {\\n        if (template.charAt(0) === '#') {\\n          template = idToTemplate(template);\\n          /* istanbul ignore if */\\n          if (\\\"development\\\" !== 'production' && !template) {\\n            warn(\\\"Template element not found or is empty: \\\" + options.template, this);\\n          }\\n        }\\n      } else if (template.nodeType) {\\n        template = template.innerHTML;\\n      } else {\\n        if (true) {\\n          warn('invalid template option:' + template, this);\\n        }\\n        return this;\\n      }\\n    } else if (el) {\\n      template = getOuterHTML(el);\\n    }\\n    if (template) {\\n      /* istanbul ignore if */\\n      if (\\\"development\\\" !== 'production' && config.performance && mark) {\\n        mark('compile');\\n      }\\n\\n      var ref = compileToFunctions(template, {\\n        shouldDecodeNewlines: shouldDecodeNewlines,\\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\\n        delimiters: options.delimiters,\\n        comments: options.comments\\n      }, this);\\n      var render = ref.render;\\n      var staticRenderFns = ref.staticRenderFns;\\n      options.render = render;\\n      options.staticRenderFns = staticRenderFns;\\n\\n      /* istanbul ignore if */\\n      if (\\\"development\\\" !== 'production' && config.performance && mark) {\\n        mark('compile end');\\n        measure(\\\"vue \\\" + this._name + \\\" compile\\\", 'compile', 'compile end');\\n      }\\n    }\\n  }\\n  return mount.call(this, el, hydrating);\\n};\\n\\n/**\\n * Get outerHTML of elements, taking care\\n * of SVG elements in IE as well.\\n */\\nfunction getOuterHTML(el) {\\n  if (el.outerHTML) {\\n    return el.outerHTML;\\n  } else {\\n    var container = document.createElement('div');\\n    container.appendChild(el.cloneNode(true));\\n    return container.innerHTML;\\n  }\\n}\\n\\nVue.compile = compileToFunctions;\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (Vue);//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///1\\n\");\n\n/***/ })\n/******/ ]);"
  },
  "maps": {}
}